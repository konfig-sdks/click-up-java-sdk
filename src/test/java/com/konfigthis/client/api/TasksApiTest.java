/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Assignees;
import com.konfigthis.client.model.CreateTaskrequest;
import com.konfigthis.client.model.CreateTaskresponse;
import com.konfigthis.client.model.CustomFields6;
import com.konfigthis.client.model.GetBulkTasksTimeinStatusresponse;
import com.konfigthis.client.model.GetFilteredTeamTasksresponse;
import com.konfigthis.client.model.GetTaskresponse;
import com.konfigthis.client.model.GetTasksTimeinStatusresponse;
import com.konfigthis.client.model.GetTasksresponse;
import com.konfigthis.client.model.UpdateTaskrequest;
import com.konfigthis.client.model.UpdateTaskresponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private static TasksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TasksApi(apiClient);
    }

    /**
     * Create Task
     *
     * Create a new task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTaskTest() throws ApiException {
        String name = null;
        Double listId = null;
        List<String> tags = null;
        String description = null;
        List<Integer> assignees = null;
        String status = null;
        Object priority = null;
        Integer dueDate = null;
        Boolean dueDateTime = null;
        Integer timeEstimate = null;
        Integer startDate = null;
        Boolean startDateTime = null;
        Boolean notifyAll = null;
        Object parent = null;
        Object linksTo = null;
        Boolean checkRequiredCustomFields = null;
        List<CustomFields6> customFields = null;
        Double customItemId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        CreateTaskresponse response = api.createNewTask(name, listId)
                .tags(tags)
                .description(description)
                .assignees(assignees)
                .status(status)
                .priority(priority)
                .dueDate(dueDate)
                .dueDateTime(dueDateTime)
                .timeEstimate(timeEstimate)
                .startDate(startDate)
                .startDateTime(startDateTime)
                .notifyAll(notifyAll)
                .parent(parent)
                .linksTo(linksTo)
                .checkRequiredCustomFields(checkRequiredCustomFields)
                .customFields(customFields)
                .customItemId(customItemId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Filtered Team Tasks
     *
     * View the tasks that meet specific criteria from a Workspace. Responses are limited to 100 tasks per page.  \\  \\ You can only view task information of tasks you can access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filterTeamTasksTest() throws ApiException {
        Double teamId = null;
        Integer page = null;
        String orderBy = null;
        Boolean reverse = null;
        Boolean subtasks = null;
        List<String> spaceIds = null;
        List<String> projectIds = null;
        List<String> listIds = null;
        List<String> statuses = null;
        Boolean includeClosed = null;
        List<String> assignees = null;
        List<String> tags = null;
        Integer dueDateGt = null;
        Integer dueDateLt = null;
        Integer dateCreatedGt = null;
        Integer dateCreatedLt = null;
        Integer dateUpdatedGt = null;
        Integer dateUpdatedLt = null;
        Integer dateDoneGt = null;
        Integer dateDoneLt = null;
        List<String> customFields = null;
        Boolean customTaskIds = null;
        Double teamId2 = null;
        String parent = null;
        Boolean includeMarkdownDescription = null;
        List<Double> customItems = null;
        GetFilteredTeamTasksresponse response = api.filterTeamTasks(teamId)
                .page(page)
                .orderBy(orderBy)
                .reverse(reverse)
                .subtasks(subtasks)
                .spaceIds(spaceIds)
                .projectIds(projectIds)
                .listIds(listIds)
                .statuses(statuses)
                .includeClosed(includeClosed)
                .assignees(assignees)
                .tags(tags)
                .dueDateGt(dueDateGt)
                .dueDateLt(dueDateLt)
                .dateCreatedGt(dateCreatedGt)
                .dateCreatedLt(dateCreatedLt)
                .dateUpdatedGt(dateUpdatedGt)
                .dateUpdatedLt(dateUpdatedLt)
                .dateDoneGt(dateDoneGt)
                .dateDoneLt(dateDoneLt)
                .customFields(customFields)
                .customTaskIds(customTaskIds)
                .teamId2(teamId2)
                .parent(parent)
                .includeMarkdownDescription(includeMarkdownDescription)
                .customItems(customItems)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Tasks
     *
     * View the tasks in a List. Responses are limited to 100 tasks per page. You can only view task information of tasks you can access. \\  \\ This endpoint only includes tasks where the specified &#x60;list_id&#x60; is their home List. Tasks added to the &#x60;list_id&#x60; with a different home List are not included in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTasksTest() throws ApiException {
        Double listId = null;
        Boolean archived = null;
        Boolean includeMarkdownDescription = null;
        Integer page = null;
        String orderBy = null;
        Boolean reverse = null;
        Boolean subtasks = null;
        List<String> statuses = null;
        Boolean includeClosed = null;
        List<String> assignees = null;
        List<String> tags = null;
        Integer dueDateGt = null;
        Integer dueDateLt = null;
        Integer dateCreatedGt = null;
        Integer dateCreatedLt = null;
        Integer dateUpdatedGt = null;
        Integer dateUpdatedLt = null;
        Integer dateDoneGt = null;
        Integer dateDoneLt = null;
        List<String> customFields = null;
        List<Double> customItems = null;
        GetTasksresponse response = api.getListTasks(listId)
                .archived(archived)
                .includeMarkdownDescription(includeMarkdownDescription)
                .page(page)
                .orderBy(orderBy)
                .reverse(reverse)
                .subtasks(subtasks)
                .statuses(statuses)
                .includeClosed(includeClosed)
                .assignees(assignees)
                .tags(tags)
                .dueDateGt(dueDateGt)
                .dueDateLt(dueDateLt)
                .dateCreatedGt(dateCreatedGt)
                .dateCreatedLt(dateCreatedLt)
                .dateUpdatedGt(dateUpdatedGt)
                .dateUpdatedLt(dateUpdatedLt)
                .dateDoneGt(dateDoneGt)
                .dateDoneLt(dateDoneLt)
                .customFields(customFields)
                .customItems(customItems)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Task
     *
     * View information about a task. You can only view task information of tasks you can access. \\  \\ Tasks with attachments will return an \&quot;attachments\&quot; response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTaskDetailsTest() throws ApiException {
        String taskId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Boolean includeSubtasks = null;
        Boolean includeMarkdownDescription = null;
        GetTaskresponse response = api.getTaskDetails(taskId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .includeSubtasks(includeSubtasks)
                .includeMarkdownDescription(includeMarkdownDescription)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Task&#39;s Time in Status
     *
     * View how long a task has been in each status. The Total time in Status ClickApp must first be enabled by the Workspace owner or an admin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeInStatusTest() throws ApiException {
        String taskId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        GetTasksTimeinStatusresponse response = api.getTimeInStatus(taskId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Bulk Tasks&#39; Time in Status
     *
     * View how long two or more tasks have been in each status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeInStatusBulkTest() throws ApiException {
        String taskIds = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        GetBulkTasksTimeinStatusresponse response = api.getTimeInStatusBulk(taskIds)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Task
     *
     * Delete a task from your Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTaskByIdTest() throws ApiException {
        String taskId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Object response = api.removeTaskById(taskId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Task
     *
     * Update a task by including one or more fields in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTaskFieldsTest() throws ApiException {
        String taskId = null;
        String description = null;
        Object customItemId = null;
        String name = null;
        String status = null;
        Integer priority = null;
        Integer dueDate = null;
        Boolean dueDateTime = null;
        String parent = null;
        Integer timeEstimate = null;
        Integer startDate = null;
        Boolean startDateTime = null;
        Assignees assignees = null;
        Boolean archived = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        UpdateTaskresponse response = api.updateTaskFields(taskId)
                .description(description)
                .customItemId(customItemId)
                .name(name)
                .status(status)
                .priority(priority)
                .dueDate(dueDate)
                .dueDateTime(dueDateTime)
                .parent(parent)
                .timeEstimate(timeEstimate)
                .startDate(startDate)
                .startDateTime(startDateTime)
                .assignees(assignees)
                .archived(archived)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

}
