/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Edittimetrackedrequest;
import com.konfigthis.client.model.Gettrackedtimeresponse;
import com.konfigthis.client.model.Tracktimerequest;
import com.konfigthis.client.model.Tracktimeresponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeTrackingLegacyApi
 */
@Disabled
public class TimeTrackingLegacyApiTest {

    private static TimeTrackingLegacyApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeTrackingLegacyApi(apiClient);
    }

    /**
     * Edit time tracked
     *
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editTimeTrackedTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        Integer time = null;
        String taskId = null;
        String intervalId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Object response = api.editTimeTracked(start, end, time, taskId, intervalId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tracked time
     *
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackedTimeTest() throws ApiException {
        String taskId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Gettrackedtimeresponse response = api.getTrackedTime(taskId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Track time
     *
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recordTimeForTaskTest() throws ApiException {
        Integer start = null;
        Integer end = null;
        Integer time = null;
        String taskId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Tracktimeresponse response = api.recordTimeForTask(start, end, time, taskId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete time tracked
     *
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTrackedTimeTest() throws ApiException {
        String taskId = null;
        String intervalId = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Object response = api.removeTrackedTime(taskId, intervalId)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

}
