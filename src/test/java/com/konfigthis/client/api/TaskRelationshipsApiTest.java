/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddDependencyrequest;
import com.konfigthis.client.model.AddTaskLinkresponse;
import com.konfigthis.client.model.DeleteTaskLinkresponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskRelationshipsApi
 */
@Disabled
public class TaskRelationshipsApiTest {

    private static TaskRelationshipsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TaskRelationshipsApi(apiClient);
    }

    /**
     * Add Dependency
     *
     * Set a task as waiting on or blocking another task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDependencyTest() throws ApiException {
        String taskId = null;
        String dependsOn = null;
        String depedencyOf = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Object response = api.addDependency(taskId)
                .dependsOn(dependsOn)
                .depedencyOf(depedencyOf)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add Task Link
     *
     * Link two tasks together.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkTasksTest() throws ApiException {
        String taskId = null;
        String linksTo = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        AddTaskLinkresponse response = api.linkTasks(taskId, linksTo)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Dependency
     *
     * Remove the dependency relationship between two or more tasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDependencyTest() throws ApiException {
        String taskId = null;
        String dependsOn = null;
        String dependencyOf = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        Object response = api.removeDependency(taskId, dependsOn, dependencyOf)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Task Link
     *
     * Remove the link between two tasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLinkBetweenTasksTest() throws ApiException {
        String taskId = null;
        String linksTo = null;
        Boolean customTaskIds = null;
        Double teamId = null;
        DeleteTaskLinkresponse response = api.removeLinkBetweenTasks(taskId, linksTo)
                .customTaskIds(customTaskIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

}
