/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateWebhookrequest;
import com.konfigthis.client.model.CreateWebhookresponse;
import com.konfigthis.client.model.GetWebhooksresponse;
import com.konfigthis.client.model.UpdateWebhookrequest;
import com.konfigthis.client.model.UpdateWebhookresponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private static WebhooksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebhooksApi(apiClient);
    }

    /**
     * Create Webhook
     *
     * Set up a webhook to monitor for events.&lt;br&gt; We do not have a dedicated IP address for webhooks. We use our domain name and dynamic addressing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        String endpoint = null;
        List<String> events = null;
        Double teamId = null;
        Integer spaceId = null;
        Integer folderId = null;
        Integer listId = null;
        String taskId = null;
        CreateWebhookresponse response = api.createWebhook(endpoint, events, teamId)
                .spaceId(spaceId)
                .folderId(folderId)
                .listId(listId)
                .taskId(taskId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete Webhook
     *
     * Delete a webhook to stop monitoring the events and locations of the webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeWebhookByIdTest() throws ApiException {
        String webhookId = null;
        Object response = api.removeWebhookById(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Webhook
     *
     * Update a webhook to change the events to be monitored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventsToMonitorTest() throws ApiException {
        String endpoint = null;
        String events = null;
        String status = null;
        String webhookId = null;
        UpdateWebhookresponse response = api.updateEventsToMonitor(endpoint, events, status, webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Webhooks
     *
     * View the webhooks created via the API for a Workspace. This endpoint returns webhooks created by the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspaceGetTest() throws ApiException {
        Double teamId = null;
        GetWebhooksresponse response = api.workspaceGet(teamId)
                .execute();
        // TODO: test validations
    }

}
