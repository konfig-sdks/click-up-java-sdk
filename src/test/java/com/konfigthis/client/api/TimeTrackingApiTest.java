/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Addtagsfromtimeentriesrequest;
import com.konfigthis.client.model.Changetagnamesfromtimeentriesrequest;
import com.konfigthis.client.model.Createatimeentryrequest;
import com.konfigthis.client.model.Createatimeentryresponse;
import com.konfigthis.client.model.DeleteatimeEntryresponse;
import com.konfigthis.client.model.Getalltagsfromtimeentriesresponse;
import com.konfigthis.client.model.Getrunningtimeentryresponse;
import com.konfigthis.client.model.Getsingulartimeentryresponse;
import com.konfigthis.client.model.Gettimeentrieswithinadaterangeresponse;
import com.konfigthis.client.model.Removetagsfromtimeentriesrequest;
import com.konfigthis.client.model.StartatimeEntryrequest;
import com.konfigthis.client.model.StartatimeEntryresponse;
import com.konfigthis.client.model.StopatimeEntryresponse;
import com.konfigthis.client.model.Tags10;
import com.konfigthis.client.model.Tags6;
import com.konfigthis.client.model.UpdateatimeEntryrequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeTrackingApi
 */
@Disabled
public class TimeTrackingApiTest {

    private static TimeTrackingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeTrackingApi(apiClient);
    }

    /**
     * Add tags from time entries
     *
     * Add a label to a time entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsFromTimeEntriesTest() throws ApiException {
        List<Tags6> tags = null;
        List<String> timeEntryIds = null;
        Double teamId = null;
        Object response = api.addTagsFromTimeEntries(tags, timeEntryIds, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Change tag names from time entries
     *
     * Rename an time entry label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeTagNamesTest() throws ApiException {
        String name = null;
        String newName = null;
        String tagBg = null;
        String tagFg = null;
        Double teamId = null;
        Object response = api.changeTagNames(name, newName, tagBg, tagFg, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a time entry
     *
     * Create a time entry. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimeEntryTest() throws ApiException {
        Integer start = null;
        Integer duration = null;
        Double teamId = null;
        List<Tags6> tags = null;
        String description = null;
        Integer stop = null;
        Integer end = null;
        Boolean billable = null;
        Integer assignee = null;
        String tid = null;
        Boolean customTaskIds = null;
        Double teamId2 = null;
        Createatimeentryresponse response = api.createTimeEntry(start, duration, teamId)
                .tags(tags)
                .description(description)
                .stop(stop)
                .end(end)
                .billable(billable)
                .assignee(assignee)
                .tid(tid)
                .customTaskIds(customTaskIds)
                .teamId2(teamId2)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all tags from time entries
     *
     * View all the labels that have been applied to time entries in a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTagsFromTimeEntriesTest() throws ApiException {
        Double teamId = null;
        Getalltagsfromtimeentriesresponse response = api.getAllTagsFromTimeEntries(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get running time entry
     *
     * View a time entry that&#39;s currently tracking time for the authenticated user. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentTimeEntryTest() throws ApiException {
        Double teamId = null;
        Double assignee = null;
        Getrunningtimeentryresponse response = api.getCurrentTimeEntry(teamId)
                .assignee(assignee)
                .execute();
        // TODO: test validations
    }

    /**
     * Get singular time entry
     *
     * View a single time entry. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTimeEntryTest() throws ApiException {
        Double teamId = null;
        String timerId = null;
        Boolean includeTask = null;
        Boolean includeLocationNames = null;
        Getsingulartimeentryresponse response = api.getSingleTimeEntry(teamId, timerId)
                .includeTask(includeTask)
                .includeLocationNames(includeLocationNames)
                .execute();
        // TODO: test validations
    }

    /**
     * Get time entries within a date range
     *
     * View time entries filtered by start and end date. \\  \\ By default, this endpoint returns time entries from the last 30 days created by the authenticated user. \\  \\ To retrieve time entries for other users, you must include the &#x60;assignee&#x60; query parameter. \\  \\ Only one of the following location filters can be included at a time: &#x60;space_id&#x60;, &#x60;folder_id&#x60;, &#x60;list_id&#x60;, or &#x60;task_id&#x60;. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeEntriesWithinDateRangeTest() throws ApiException {
        Double teamId = null;
        Double startDate = null;
        Double endDate = null;
        Double assignee = null;
        Boolean includeTaskTags = null;
        Boolean includeLocationNames = null;
        Double spaceId = null;
        Double folderId = null;
        Double listId = null;
        String taskId = null;
        Boolean customTaskIds = null;
        Double teamId2 = null;
        Gettimeentrieswithinadaterangeresponse response = api.getTimeEntriesWithinDateRange(teamId)
                .startDate(startDate)
                .endDate(endDate)
                .assignee(assignee)
                .includeTaskTags(includeTaskTags)
                .includeLocationNames(includeLocationNames)
                .spaceId(spaceId)
                .folderId(folderId)
                .listId(listId)
                .taskId(taskId)
                .customTaskIds(customTaskIds)
                .teamId2(teamId2)
                .execute();
        // TODO: test validations
    }

    /**
     * Get time entry history
     *
     * View a list of changes made to a time entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeEntryHistoryTest() throws ApiException {
        Double teamId = null;
        String timerId = null;
        Object response = api.getTimeEntryHistory(teamId, timerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a time Entry
     *
     * Delete a time entry from a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEntryTest() throws ApiException {
        Double teamId = null;
        Double timerId = null;
        DeleteatimeEntryresponse response = api.removeEntry(teamId, timerId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove tags from time entries
     *
     * Remove labels from time entries. This does not remove the label from a Workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagsFromTimeEntriesTest() throws ApiException {
        List<Tags10> tags = null;
        List<String> timeEntryIds = null;
        Double teamId = null;
        Object response = api.removeTagsFromTimeEntries(tags, timeEntryIds, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Start a time Entry
     *
     * Start a timer for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTimerTest() throws ApiException {
        Double teamId = null;
        List<Tags10> tags = null;
        String description = null;
        String tid = null;
        Boolean billable = null;
        Boolean customTaskIds = null;
        Double teamId2 = null;
        StartatimeEntryresponse response = api.startTimer(teamId)
                .tags(tags)
                .description(description)
                .tid(tid)
                .billable(billable)
                .customTaskIds(customTaskIds)
                .teamId2(teamId2)
                .execute();
        // TODO: test validations
    }

    /**
     * Stop a time Entry
     *
     * Stop a timer that&#39;s currently running for the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTimeEntryTest() throws ApiException {
        Double teamId = null;
        StopatimeEntryresponse response = api.stopTimeEntry(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a time Entry
     *
     * Update the details of a time entry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeEntryDetailsTest() throws ApiException {
        List<Tags6> tags = null;
        Double teamId = null;
        Double timerId = null;
        String description = null;
        String tagAction = null;
        Integer start = null;
        Integer end = null;
        String tid = null;
        Boolean billable = null;
        Integer duration = null;
        Boolean customTaskIds = null;
        Double teamId2 = null;
        Object response = api.updateTimeEntryDetails(tags, teamId, timerId)
                .description(description)
                .tagAction(tagAction)
                .start(start)
                .end(end)
                .tid(tid)
                .billable(billable)
                .duration(duration)
                .customTaskIds(customTaskIds)
                .teamId2(teamId2)
                .execute();
        // TODO: test validations
    }

}
