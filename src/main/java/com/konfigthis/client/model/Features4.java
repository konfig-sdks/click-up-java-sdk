/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Checklists;
import com.konfigthis.client.model.CustomFields;
import com.konfigthis.client.model.DependencyWarning;
import com.konfigthis.client.model.DueDates;
import com.konfigthis.client.model.Portfolios;
import com.konfigthis.client.model.RemapDependencies;
import com.konfigthis.client.model.Tags;
import com.konfigthis.client.model.TimeEstimates;
import com.konfigthis.client.model.TimeTracking;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Features4
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Features4 {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Tags tags;

  public static final String SERIALIZED_NAME_DUE_DATES = "due_dates";
  @SerializedName(SERIALIZED_NAME_DUE_DATES)
  private DueDates dueDates;

  public static final String SERIALIZED_NAME_TIME_TRACKING = "time_tracking";
  @SerializedName(SERIALIZED_NAME_TIME_TRACKING)
  private TimeTracking timeTracking;

  public static final String SERIALIZED_NAME_TIME_ESTIMATES = "time_estimates";
  @SerializedName(SERIALIZED_NAME_TIME_ESTIMATES)
  private TimeEstimates timeEstimates;

  public static final String SERIALIZED_NAME_CHECKLISTS = "checklists";
  @SerializedName(SERIALIZED_NAME_CHECKLISTS)
  private Checklists checklists;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private CustomFields customFields;

  public static final String SERIALIZED_NAME_REMAP_DEPENDENCIES = "remap_dependencies";
  @SerializedName(SERIALIZED_NAME_REMAP_DEPENDENCIES)
  private RemapDependencies remapDependencies;

  public static final String SERIALIZED_NAME_DEPENDENCY_WARNING = "dependency_warning";
  @SerializedName(SERIALIZED_NAME_DEPENDENCY_WARNING)
  private DependencyWarning dependencyWarning;

  public static final String SERIALIZED_NAME_PORTFOLIOS = "portfolios";
  @SerializedName(SERIALIZED_NAME_PORTFOLIOS)
  private Portfolios portfolios;

  public Features4() {
  }

  public Features4 tags(Tags tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Tags getTags() {
    return tags;
  }


  public void setTags(Tags tags) {
    
    
    
    this.tags = tags;
  }


  public Features4 dueDates(DueDates dueDates) {
    
    
    
    
    this.dueDates = dueDates;
    return this;
  }

   /**
   * Get dueDates
   * @return dueDates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DueDates getDueDates() {
    return dueDates;
  }


  public void setDueDates(DueDates dueDates) {
    
    
    
    this.dueDates = dueDates;
  }


  public Features4 timeTracking(TimeTracking timeTracking) {
    
    
    
    
    this.timeTracking = timeTracking;
    return this;
  }

   /**
   * Get timeTracking
   * @return timeTracking
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TimeTracking getTimeTracking() {
    return timeTracking;
  }


  public void setTimeTracking(TimeTracking timeTracking) {
    
    
    
    this.timeTracking = timeTracking;
  }


  public Features4 timeEstimates(TimeEstimates timeEstimates) {
    
    
    
    
    this.timeEstimates = timeEstimates;
    return this;
  }

   /**
   * Get timeEstimates
   * @return timeEstimates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TimeEstimates getTimeEstimates() {
    return timeEstimates;
  }


  public void setTimeEstimates(TimeEstimates timeEstimates) {
    
    
    
    this.timeEstimates = timeEstimates;
  }


  public Features4 checklists(Checklists checklists) {
    
    
    
    
    this.checklists = checklists;
    return this;
  }

   /**
   * Get checklists
   * @return checklists
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Checklists getChecklists() {
    return checklists;
  }


  public void setChecklists(Checklists checklists) {
    
    
    
    this.checklists = checklists;
  }


  public Features4 customFields(CustomFields customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomFields getCustomFields() {
    return customFields;
  }


  public void setCustomFields(CustomFields customFields) {
    
    
    
    this.customFields = customFields;
  }


  public Features4 remapDependencies(RemapDependencies remapDependencies) {
    
    
    
    
    this.remapDependencies = remapDependencies;
    return this;
  }

   /**
   * Get remapDependencies
   * @return remapDependencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RemapDependencies getRemapDependencies() {
    return remapDependencies;
  }


  public void setRemapDependencies(RemapDependencies remapDependencies) {
    
    
    
    this.remapDependencies = remapDependencies;
  }


  public Features4 dependencyWarning(DependencyWarning dependencyWarning) {
    
    
    
    
    this.dependencyWarning = dependencyWarning;
    return this;
  }

   /**
   * Get dependencyWarning
   * @return dependencyWarning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DependencyWarning getDependencyWarning() {
    return dependencyWarning;
  }


  public void setDependencyWarning(DependencyWarning dependencyWarning) {
    
    
    
    this.dependencyWarning = dependencyWarning;
  }


  public Features4 portfolios(Portfolios portfolios) {
    
    
    
    
    this.portfolios = portfolios;
    return this;
  }

   /**
   * Get portfolios
   * @return portfolios
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Portfolios getPortfolios() {
    return portfolios;
  }


  public void setPortfolios(Portfolios portfolios) {
    
    
    
    this.portfolios = portfolios;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Features4 instance itself
   */
  public Features4 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Features4 features4 = (Features4) o;
    return Objects.equals(this.tags, features4.tags) &&
        Objects.equals(this.dueDates, features4.dueDates) &&
        Objects.equals(this.timeTracking, features4.timeTracking) &&
        Objects.equals(this.timeEstimates, features4.timeEstimates) &&
        Objects.equals(this.checklists, features4.checklists) &&
        Objects.equals(this.customFields, features4.customFields) &&
        Objects.equals(this.remapDependencies, features4.remapDependencies) &&
        Objects.equals(this.dependencyWarning, features4.dependencyWarning) &&
        Objects.equals(this.portfolios, features4.portfolios)&&
        Objects.equals(this.additionalProperties, features4.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, dueDates, timeTracking, timeEstimates, checklists, customFields, remapDependencies, dependencyWarning, portfolios, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Features4 {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    dueDates: ").append(toIndentedString(dueDates)).append("\n");
    sb.append("    timeTracking: ").append(toIndentedString(timeTracking)).append("\n");
    sb.append("    timeEstimates: ").append(toIndentedString(timeEstimates)).append("\n");
    sb.append("    checklists: ").append(toIndentedString(checklists)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    remapDependencies: ").append(toIndentedString(remapDependencies)).append("\n");
    sb.append("    dependencyWarning: ").append(toIndentedString(dependencyWarning)).append("\n");
    sb.append("    portfolios: ").append(toIndentedString(portfolios)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("due_dates");
    openapiFields.add("time_tracking");
    openapiFields.add("time_estimates");
    openapiFields.add("checklists");
    openapiFields.add("custom_fields");
    openapiFields.add("remap_dependencies");
    openapiFields.add("dependency_warning");
    openapiFields.add("portfolios");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("due_dates");
    openapiRequiredFields.add("time_tracking");
    openapiRequiredFields.add("time_estimates");
    openapiRequiredFields.add("checklists");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Features4
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Features4.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Features4 is not found in the empty JSON string", Features4.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Features4.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `tags`
      Tags.validateJsonObject(jsonObj.getAsJsonObject("tags"));
      // validate the required field `due_dates`
      DueDates.validateJsonObject(jsonObj.getAsJsonObject("due_dates"));
      // validate the required field `time_tracking`
      TimeTracking.validateJsonObject(jsonObj.getAsJsonObject("time_tracking"));
      // validate the required field `time_estimates`
      TimeEstimates.validateJsonObject(jsonObj.getAsJsonObject("time_estimates"));
      // validate the required field `checklists`
      Checklists.validateJsonObject(jsonObj.getAsJsonObject("checklists"));
      // validate the optional field `custom_fields`
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        CustomFields.validateJsonObject(jsonObj.getAsJsonObject("custom_fields"));
      }
      // validate the optional field `remap_dependencies`
      if (jsonObj.get("remap_dependencies") != null && !jsonObj.get("remap_dependencies").isJsonNull()) {
        RemapDependencies.validateJsonObject(jsonObj.getAsJsonObject("remap_dependencies"));
      }
      // validate the optional field `dependency_warning`
      if (jsonObj.get("dependency_warning") != null && !jsonObj.get("dependency_warning").isJsonNull()) {
        DependencyWarning.validateJsonObject(jsonObj.getAsJsonObject("dependency_warning"));
      }
      // validate the optional field `portfolios`
      if (jsonObj.get("portfolios") != null && !jsonObj.get("portfolios").isJsonNull()) {
        Portfolios.validateJsonObject(jsonObj.getAsJsonObject("portfolios"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Features4.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Features4' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Features4> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Features4.class));

       return (TypeAdapter<T>) new TypeAdapter<Features4>() {
           @Override
           public void write(JsonWriter out, Features4 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Features4 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Features4 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Features4 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Features4
  * @throws IOException if the JSON string is invalid with respect to Features4
  */
  public static Features4 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Features4.class);
  }

 /**
  * Convert an instance of Features4 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

