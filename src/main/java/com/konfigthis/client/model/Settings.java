/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Settings
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Settings {
  public static final String SERIALIZED_NAME_SHOW_TASK_LOCATIONS = "show_task_locations";
  @SerializedName(SERIALIZED_NAME_SHOW_TASK_LOCATIONS)
  private Boolean showTaskLocations;

  public static final String SERIALIZED_NAME_SHOW_SUBTASKS = "show_subtasks";
  @SerializedName(SERIALIZED_NAME_SHOW_SUBTASKS)
  private Integer showSubtasks;

  public static final String SERIALIZED_NAME_SHOW_SUBTASK_PARENT_NAMES = "show_subtask_parent_names";
  @SerializedName(SERIALIZED_NAME_SHOW_SUBTASK_PARENT_NAMES)
  private Boolean showSubtaskParentNames;

  public static final String SERIALIZED_NAME_SHOW_CLOSED_SUBTASKS = "show_closed_subtasks";
  @SerializedName(SERIALIZED_NAME_SHOW_CLOSED_SUBTASKS)
  private Boolean showClosedSubtasks;

  public static final String SERIALIZED_NAME_SHOW_ASSIGNEES = "show_assignees";
  @SerializedName(SERIALIZED_NAME_SHOW_ASSIGNEES)
  private Boolean showAssignees;

  public static final String SERIALIZED_NAME_SHOW_IMAGES = "show_images";
  @SerializedName(SERIALIZED_NAME_SHOW_IMAGES)
  private Boolean showImages;

  public static final String SERIALIZED_NAME_COLLAPSE_EMPTY_COLUMNS = "collapse_empty_columns";
  @SerializedName(SERIALIZED_NAME_COLLAPSE_EMPTY_COLUMNS)
  private Object collapseEmptyColumns = null;

  public static final String SERIALIZED_NAME_ME_COMMENTS = "me_comments";
  @SerializedName(SERIALIZED_NAME_ME_COMMENTS)
  private Boolean meComments;

  public static final String SERIALIZED_NAME_ME_SUBTASKS = "me_subtasks";
  @SerializedName(SERIALIZED_NAME_ME_SUBTASKS)
  private Boolean meSubtasks;

  public static final String SERIALIZED_NAME_ME_CHECKLISTS = "me_checklists";
  @SerializedName(SERIALIZED_NAME_ME_CHECKLISTS)
  private Boolean meChecklists;

  public Settings() {
  }

  public Settings showTaskLocations(Boolean showTaskLocations) {
    
    
    
    
    this.showTaskLocations = showTaskLocations;
    return this;
  }

   /**
   * Get showTaskLocations
   * @return showTaskLocations
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getShowTaskLocations() {
    return showTaskLocations;
  }


  public void setShowTaskLocations(Boolean showTaskLocations) {
    
    
    
    this.showTaskLocations = showTaskLocations;
  }


  public Settings showSubtasks(Integer showSubtasks) {
    
    
    
    
    this.showSubtasks = showSubtasks;
    return this;
  }

   /**
   * Acceptable values are &#x60;1&#x60;, &#x60;2&#x60;, or &#x60;3&#x60;, which show subtasks separate, expanded, or collapsed.
   * @return showSubtasks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "Acceptable values are `1`, `2`, or `3`, which show subtasks separate, expanded, or collapsed.")

  public Integer getShowSubtasks() {
    return showSubtasks;
  }


  public void setShowSubtasks(Integer showSubtasks) {
    
    
    
    this.showSubtasks = showSubtasks;
  }


  public Settings showSubtaskParentNames(Boolean showSubtaskParentNames) {
    
    
    
    
    this.showSubtaskParentNames = showSubtaskParentNames;
    return this;
  }

   /**
   * Get showSubtaskParentNames
   * @return showSubtaskParentNames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getShowSubtaskParentNames() {
    return showSubtaskParentNames;
  }


  public void setShowSubtaskParentNames(Boolean showSubtaskParentNames) {
    
    
    
    this.showSubtaskParentNames = showSubtaskParentNames;
  }


  public Settings showClosedSubtasks(Boolean showClosedSubtasks) {
    
    
    
    
    this.showClosedSubtasks = showClosedSubtasks;
    return this;
  }

   /**
   * Get showClosedSubtasks
   * @return showClosedSubtasks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getShowClosedSubtasks() {
    return showClosedSubtasks;
  }


  public void setShowClosedSubtasks(Boolean showClosedSubtasks) {
    
    
    
    this.showClosedSubtasks = showClosedSubtasks;
  }


  public Settings showAssignees(Boolean showAssignees) {
    
    
    
    
    this.showAssignees = showAssignees;
    return this;
  }

   /**
   * Get showAssignees
   * @return showAssignees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getShowAssignees() {
    return showAssignees;
  }


  public void setShowAssignees(Boolean showAssignees) {
    
    
    
    this.showAssignees = showAssignees;
  }


  public Settings showImages(Boolean showImages) {
    
    
    
    
    this.showImages = showImages;
    return this;
  }

   /**
   * Get showImages
   * @return showImages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getShowImages() {
    return showImages;
  }


  public void setShowImages(Boolean showImages) {
    
    
    
    this.showImages = showImages;
  }


  public Settings collapseEmptyColumns(Object collapseEmptyColumns) {
    
    
    
    
    this.collapseEmptyColumns = collapseEmptyColumns;
    return this;
  }

   /**
   * Get collapseEmptyColumns
   * @return collapseEmptyColumns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getCollapseEmptyColumns() {
    return collapseEmptyColumns;
  }


  public void setCollapseEmptyColumns(Object collapseEmptyColumns) {
    
    
    
    this.collapseEmptyColumns = collapseEmptyColumns;
  }


  public Settings meComments(Boolean meComments) {
    
    
    
    
    this.meComments = meComments;
    return this;
  }

   /**
   * Get meComments
   * @return meComments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getMeComments() {
    return meComments;
  }


  public void setMeComments(Boolean meComments) {
    
    
    
    this.meComments = meComments;
  }


  public Settings meSubtasks(Boolean meSubtasks) {
    
    
    
    
    this.meSubtasks = meSubtasks;
    return this;
  }

   /**
   * Get meSubtasks
   * @return meSubtasks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getMeSubtasks() {
    return meSubtasks;
  }


  public void setMeSubtasks(Boolean meSubtasks) {
    
    
    
    this.meSubtasks = meSubtasks;
  }


  public Settings meChecklists(Boolean meChecklists) {
    
    
    
    
    this.meChecklists = meChecklists;
    return this;
  }

   /**
   * Get meChecklists
   * @return meChecklists
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getMeChecklists() {
    return meChecklists;
  }


  public void setMeChecklists(Boolean meChecklists) {
    
    
    
    this.meChecklists = meChecklists;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Settings instance itself
   */
  public Settings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Settings settings = (Settings) o;
    return Objects.equals(this.showTaskLocations, settings.showTaskLocations) &&
        Objects.equals(this.showSubtasks, settings.showSubtasks) &&
        Objects.equals(this.showSubtaskParentNames, settings.showSubtaskParentNames) &&
        Objects.equals(this.showClosedSubtasks, settings.showClosedSubtasks) &&
        Objects.equals(this.showAssignees, settings.showAssignees) &&
        Objects.equals(this.showImages, settings.showImages) &&
        Objects.equals(this.collapseEmptyColumns, settings.collapseEmptyColumns) &&
        Objects.equals(this.meComments, settings.meComments) &&
        Objects.equals(this.meSubtasks, settings.meSubtasks) &&
        Objects.equals(this.meChecklists, settings.meChecklists)&&
        Objects.equals(this.additionalProperties, settings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showTaskLocations, showSubtasks, showSubtaskParentNames, showClosedSubtasks, showAssignees, showImages, collapseEmptyColumns, meComments, meSubtasks, meChecklists, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Settings {\n");
    sb.append("    showTaskLocations: ").append(toIndentedString(showTaskLocations)).append("\n");
    sb.append("    showSubtasks: ").append(toIndentedString(showSubtasks)).append("\n");
    sb.append("    showSubtaskParentNames: ").append(toIndentedString(showSubtaskParentNames)).append("\n");
    sb.append("    showClosedSubtasks: ").append(toIndentedString(showClosedSubtasks)).append("\n");
    sb.append("    showAssignees: ").append(toIndentedString(showAssignees)).append("\n");
    sb.append("    showImages: ").append(toIndentedString(showImages)).append("\n");
    sb.append("    collapseEmptyColumns: ").append(toIndentedString(collapseEmptyColumns)).append("\n");
    sb.append("    meComments: ").append(toIndentedString(meComments)).append("\n");
    sb.append("    meSubtasks: ").append(toIndentedString(meSubtasks)).append("\n");
    sb.append("    meChecklists: ").append(toIndentedString(meChecklists)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("show_task_locations");
    openapiFields.add("show_subtasks");
    openapiFields.add("show_subtask_parent_names");
    openapiFields.add("show_closed_subtasks");
    openapiFields.add("show_assignees");
    openapiFields.add("show_images");
    openapiFields.add("collapse_empty_columns");
    openapiFields.add("me_comments");
    openapiFields.add("me_subtasks");
    openapiFields.add("me_checklists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("show_task_locations");
    openapiRequiredFields.add("show_subtasks");
    openapiRequiredFields.add("show_subtask_parent_names");
    openapiRequiredFields.add("show_closed_subtasks");
    openapiRequiredFields.add("show_assignees");
    openapiRequiredFields.add("show_images");
    openapiRequiredFields.add("collapse_empty_columns");
    openapiRequiredFields.add("me_comments");
    openapiRequiredFields.add("me_subtasks");
    openapiRequiredFields.add("me_checklists");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Settings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Settings is not found in the empty JSON string", Settings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Settings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<Settings>() {
           @Override
           public void write(JsonWriter out, Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Settings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Settings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Settings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Settings
  * @throws IOException if the JSON string is invalid with respect to Settings
  */
  public static Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Settings.class);
  }

 /**
  * Convert an instance of Settings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

