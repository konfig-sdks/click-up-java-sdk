/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateTaskAttachmentresponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateTaskAttachmentresponse {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Integer date;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private String extension;

  public static final String SERIALIZED_NAME_THUMBNAIL_SMALL = "thumbnail_small";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_SMALL)
  private String thumbnailSmall;

  public static final String SERIALIZED_NAME_THUMBNAIL_LARGE = "thumbnail_large";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_LARGE)
  private String thumbnailLarge;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CreateTaskAttachmentresponse() {
  }

  public CreateTaskAttachmentresponse title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "image.png", required = true, value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CreateTaskAttachmentresponse version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public CreateTaskAttachmentresponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ac434d4e-8b1c-4571-951b-866b6d9f2ee6.pngX", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CreateTaskAttachmentresponse date(Integer date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1569988578766", required = true, value = "")

  public Integer getDate() {
    return date;
  }


  public void setDate(Integer date) {
    
    
    
    this.date = date;
  }


  public CreateTaskAttachmentresponse extension(String extension) {
    
    
    
    
    this.extension = extension;
    return this;
  }

   /**
   * Get extension
   * @return extension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "png", required = true, value = "")

  public String getExtension() {
    return extension;
  }


  public void setExtension(String extension) {
    
    
    
    this.extension = extension;
  }


  public CreateTaskAttachmentresponse thumbnailSmall(String thumbnailSmall) {
    
    
    
    
    this.thumbnailSmall = thumbnailSmall;
    return this;
  }

   /**
   * Get thumbnailSmall
   * @return thumbnailSmall
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://attachments-public.clickup.com/ac434d4e-8b1c-4571-951b-866b6d9f2ee6/logo_small.png", required = true, value = "")

  public String getThumbnailSmall() {
    return thumbnailSmall;
  }


  public void setThumbnailSmall(String thumbnailSmall) {
    
    
    
    this.thumbnailSmall = thumbnailSmall;
  }


  public CreateTaskAttachmentresponse thumbnailLarge(String thumbnailLarge) {
    
    
    
    
    this.thumbnailLarge = thumbnailLarge;
    return this;
  }

   /**
   * Get thumbnailLarge
   * @return thumbnailLarge
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://attachments-public.clickup.com/ac434d4e-8b1c-4571-951b-866b6d9f2ee6/logo_small.png", required = true, value = "")

  public String getThumbnailLarge() {
    return thumbnailLarge;
  }


  public void setThumbnailLarge(String thumbnailLarge) {
    
    
    
    this.thumbnailLarge = thumbnailLarge;
  }


  public CreateTaskAttachmentresponse url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://attachments-public.clickup.com/ac434d4e-8b1c-4571-951b-866b6d9f2ee6/logo_small.png", required = true, value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateTaskAttachmentresponse instance itself
   */
  public CreateTaskAttachmentresponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTaskAttachmentresponse createTaskAttachmentresponse = (CreateTaskAttachmentresponse) o;
    return Objects.equals(this.title, createTaskAttachmentresponse.title) &&
        Objects.equals(this.version, createTaskAttachmentresponse.version) &&
        Objects.equals(this.id, createTaskAttachmentresponse.id) &&
        Objects.equals(this.date, createTaskAttachmentresponse.date) &&
        Objects.equals(this.extension, createTaskAttachmentresponse.extension) &&
        Objects.equals(this.thumbnailSmall, createTaskAttachmentresponse.thumbnailSmall) &&
        Objects.equals(this.thumbnailLarge, createTaskAttachmentresponse.thumbnailLarge) &&
        Objects.equals(this.url, createTaskAttachmentresponse.url)&&
        Objects.equals(this.additionalProperties, createTaskAttachmentresponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, version, id, date, extension, thumbnailSmall, thumbnailLarge, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTaskAttachmentresponse {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    thumbnailSmall: ").append(toIndentedString(thumbnailSmall)).append("\n");
    sb.append("    thumbnailLarge: ").append(toIndentedString(thumbnailLarge)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("version");
    openapiFields.add("id");
    openapiFields.add("date");
    openapiFields.add("extension");
    openapiFields.add("thumbnail_small");
    openapiFields.add("thumbnail_large");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("extension");
    openapiRequiredFields.add("thumbnail_small");
    openapiRequiredFields.add("thumbnail_large");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateTaskAttachmentresponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateTaskAttachmentresponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTaskAttachmentresponse is not found in the empty JSON string", CreateTaskAttachmentresponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTaskAttachmentresponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extension").toString()));
      }
      if (!jsonObj.get("thumbnail_small").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail_small` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail_small").toString()));
      }
      if (!jsonObj.get("thumbnail_large").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail_large` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail_large").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTaskAttachmentresponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTaskAttachmentresponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTaskAttachmentresponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTaskAttachmentresponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTaskAttachmentresponse>() {
           @Override
           public void write(JsonWriter out, CreateTaskAttachmentresponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTaskAttachmentresponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateTaskAttachmentresponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateTaskAttachmentresponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateTaskAttachmentresponse
  * @throws IOException if the JSON string is invalid with respect to CreateTaskAttachmentresponse
  */
  public static CreateTaskAttachmentresponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTaskAttachmentresponse.class);
  }

 /**
  * Convert an instance of CreateTaskAttachmentresponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

