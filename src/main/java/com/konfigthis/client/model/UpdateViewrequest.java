/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Columns;
import com.konfigthis.client.model.Divide;
import com.konfigthis.client.model.Filters;
import com.konfigthis.client.model.Grouping;
import com.konfigthis.client.model.Parent;
import com.konfigthis.client.model.Settings;
import com.konfigthis.client.model.Sorting;
import com.konfigthis.client.model.TeamSidebar;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateViewrequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateViewrequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private Parent parent;

  public static final String SERIALIZED_NAME_GROUPING = "grouping";
  @SerializedName(SERIALIZED_NAME_GROUPING)
  private Grouping grouping;

  public static final String SERIALIZED_NAME_DIVIDE = "divide";
  @SerializedName(SERIALIZED_NAME_DIVIDE)
  private Divide divide;

  public static final String SERIALIZED_NAME_SORTING = "sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private Sorting sorting;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Filters filters;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private Columns columns;

  public static final String SERIALIZED_NAME_TEAM_SIDEBAR = "team_sidebar";
  @SerializedName(SERIALIZED_NAME_TEAM_SIDEBAR)
  private TeamSidebar teamSidebar;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Settings settings;

  public UpdateViewrequest() {
  }

  public UpdateViewrequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "New View Name", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UpdateViewrequest type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "list", required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public UpdateViewrequest parent(Parent parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Parent getParent() {
    return parent;
  }


  public void setParent(Parent parent) {
    
    
    
    this.parent = parent;
  }


  public UpdateViewrequest grouping(Grouping grouping) {
    
    
    
    
    this.grouping = grouping;
    return this;
  }

   /**
   * Get grouping
   * @return grouping
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Grouping getGrouping() {
    return grouping;
  }


  public void setGrouping(Grouping grouping) {
    
    
    
    this.grouping = grouping;
  }


  public UpdateViewrequest divide(Divide divide) {
    
    
    
    
    this.divide = divide;
    return this;
  }

   /**
   * Get divide
   * @return divide
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Divide getDivide() {
    return divide;
  }


  public void setDivide(Divide divide) {
    
    
    
    this.divide = divide;
  }


  public UpdateViewrequest sorting(Sorting sorting) {
    
    
    
    
    this.sorting = sorting;
    return this;
  }

   /**
   * Get sorting
   * @return sorting
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Sorting getSorting() {
    return sorting;
  }


  public void setSorting(Sorting sorting) {
    
    
    
    this.sorting = sorting;
  }


  public UpdateViewrequest filters(Filters filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Filters getFilters() {
    return filters;
  }


  public void setFilters(Filters filters) {
    
    
    
    this.filters = filters;
  }


  public UpdateViewrequest columns(Columns columns) {
    
    
    
    
    this.columns = columns;
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Columns getColumns() {
    return columns;
  }


  public void setColumns(Columns columns) {
    
    
    
    this.columns = columns;
  }


  public UpdateViewrequest teamSidebar(TeamSidebar teamSidebar) {
    
    
    
    
    this.teamSidebar = teamSidebar;
    return this;
  }

   /**
   * Get teamSidebar
   * @return teamSidebar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TeamSidebar getTeamSidebar() {
    return teamSidebar;
  }


  public void setTeamSidebar(TeamSidebar teamSidebar) {
    
    
    
    this.teamSidebar = teamSidebar;
  }


  public UpdateViewrequest settings(Settings settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Settings getSettings() {
    return settings;
  }


  public void setSettings(Settings settings) {
    
    
    
    this.settings = settings;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateViewrequest instance itself
   */
  public UpdateViewrequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateViewrequest updateViewrequest = (UpdateViewrequest) o;
    return Objects.equals(this.name, updateViewrequest.name) &&
        Objects.equals(this.type, updateViewrequest.type) &&
        Objects.equals(this.parent, updateViewrequest.parent) &&
        Objects.equals(this.grouping, updateViewrequest.grouping) &&
        Objects.equals(this.divide, updateViewrequest.divide) &&
        Objects.equals(this.sorting, updateViewrequest.sorting) &&
        Objects.equals(this.filters, updateViewrequest.filters) &&
        Objects.equals(this.columns, updateViewrequest.columns) &&
        Objects.equals(this.teamSidebar, updateViewrequest.teamSidebar) &&
        Objects.equals(this.settings, updateViewrequest.settings)&&
        Objects.equals(this.additionalProperties, updateViewrequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, parent, grouping, divide, sorting, filters, columns, teamSidebar, settings, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateViewrequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    grouping: ").append(toIndentedString(grouping)).append("\n");
    sb.append("    divide: ").append(toIndentedString(divide)).append("\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    teamSidebar: ").append(toIndentedString(teamSidebar)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("parent");
    openapiFields.add("grouping");
    openapiFields.add("divide");
    openapiFields.add("sorting");
    openapiFields.add("filters");
    openapiFields.add("columns");
    openapiFields.add("team_sidebar");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("parent");
    openapiRequiredFields.add("grouping");
    openapiRequiredFields.add("divide");
    openapiRequiredFields.add("sorting");
    openapiRequiredFields.add("filters");
    openapiRequiredFields.add("columns");
    openapiRequiredFields.add("team_sidebar");
    openapiRequiredFields.add("settings");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateViewrequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateViewrequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateViewrequest is not found in the empty JSON string", UpdateViewrequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateViewrequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `parent`
      Parent.validateJsonObject(jsonObj.getAsJsonObject("parent"));
      // validate the required field `grouping`
      Grouping.validateJsonObject(jsonObj.getAsJsonObject("grouping"));
      // validate the required field `divide`
      Divide.validateJsonObject(jsonObj.getAsJsonObject("divide"));
      // validate the required field `sorting`
      Sorting.validateJsonObject(jsonObj.getAsJsonObject("sorting"));
      // validate the required field `filters`
      Filters.validateJsonObject(jsonObj.getAsJsonObject("filters"));
      // validate the required field `columns`
      Columns.validateJsonObject(jsonObj.getAsJsonObject("columns"));
      // validate the required field `team_sidebar`
      TeamSidebar.validateJsonObject(jsonObj.getAsJsonObject("team_sidebar"));
      // validate the required field `settings`
      Settings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateViewrequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateViewrequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateViewrequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateViewrequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateViewrequest>() {
           @Override
           public void write(JsonWriter out, UpdateViewrequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateViewrequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateViewrequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateViewrequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateViewrequest
  * @throws IOException if the JSON string is invalid with respect to UpdateViewrequest
  */
  public static UpdateViewrequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateViewrequest.class);
  }

 /**
  * Convert an instance of UpdateViewrequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

