/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Owner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Goal
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Goal {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Object startDate = null;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_PRIVATE = "private";
  @SerializedName(SERIALIZED_NAME_PRIVATE)
  private Boolean _private;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private Integer creator;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_PRETTY_ID = "pretty_id";
  @SerializedName(SERIALIZED_NAME_PRETTY_ID)
  private String prettyId;

  public static final String SERIALIZED_NAME_MULTIPLE_OWNERS = "multiple_owners";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_OWNERS)
  private Boolean multipleOwners;

  public static final String SERIALIZED_NAME_FOLDER_ID = "folder_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_ID)
  private Object folderId = null;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<String> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<Owner> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_RESULTS = "key_results";
  @SerializedName(SERIALIZED_NAME_KEY_RESULTS)
  private List<String> keyResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENT_COMPLETED = "percent_completed";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETED)
  private Integer percentCompleted;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<String> history = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRETTY_URL = "pretty_url";
  @SerializedName(SERIALIZED_NAME_PRETTY_URL)
  private String prettyUrl;

  public Goal() {
  }

  public Goal description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Goal Description", required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Goal id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "e53a033c-900e-462d-a849-4a216b06d930X", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Goal name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Goal Name", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Goal teamId(String teamId) {
    
    
    
    
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "512", required = true, value = "")

  public String getTeamId() {
    return teamId;
  }


  public void setTeamId(String teamId) {
    
    
    
    this.teamId = teamId;
  }


  public Goal dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1568044355026", required = true, value = "")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public Goal startDate(Object startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getStartDate() {
    return startDate;
  }


  public void setStartDate(Object startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Goal dueDate(String dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1568036964079", required = true, value = "")

  public String getDueDate() {
    return dueDate;
  }


  public void setDueDate(String dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public Goal _private(Boolean _private) {
    
    
    
    
    this._private = _private;
    return this;
  }

   /**
   * Get _private
   * @return _private
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getPrivate() {
    return _private;
  }


  public void setPrivate(Boolean _private) {
    
    
    
    this._private = _private;
  }


  public Goal archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * Get archived
   * @return archived
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }


  public Goal creator(Integer creator) {
    
    
    
    
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "183", required = true, value = "")

  public Integer getCreator() {
    return creator;
  }


  public void setCreator(Integer creator) {
    
    
    
    this.creator = creator;
  }


  public Goal color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "#32a852", required = true, value = "")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public Goal prettyId(String prettyId) {
    
    
    
    
    this.prettyId = prettyId;
    return this;
  }

   /**
   * Get prettyId
   * @return prettyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "6", required = true, value = "")

  public String getPrettyId() {
    return prettyId;
  }


  public void setPrettyId(String prettyId) {
    
    
    
    this.prettyId = prettyId;
  }


  public Goal multipleOwners(Boolean multipleOwners) {
    
    
    
    
    this.multipleOwners = multipleOwners;
    return this;
  }

   /**
   * Get multipleOwners
   * @return multipleOwners
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getMultipleOwners() {
    return multipleOwners;
  }


  public void setMultipleOwners(Boolean multipleOwners) {
    
    
    
    this.multipleOwners = multipleOwners;
  }


  public Goal folderId(Object folderId) {
    
    
    
    
    this.folderId = folderId;
    return this;
  }

   /**
   * Get folderId
   * @return folderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFolderId() {
    return folderId;
  }


  public void setFolderId(Object folderId) {
    
    
    
    this.folderId = folderId;
  }


  public Goal members(List<String> members) {
    
    
    
    
    this.members = members;
    return this;
  }

  public Goal addMembersItem(String membersItem) {
    this.members.add(membersItem);
    return this;
  }

   /**
   * 
   * @return members
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getMembers() {
    return members;
  }


  public void setMembers(List<String> members) {
    
    
    
    this.members = members;
  }


  public Goal owners(List<Owner> owners) {
    
    
    
    
    this.owners = owners;
    return this;
  }

  public Goal addOwnersItem(Owner ownersItem) {
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * 
   * @return owners
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Owner> getOwners() {
    return owners;
  }


  public void setOwners(List<Owner> owners) {
    
    
    
    this.owners = owners;
  }


  public Goal keyResults(List<String> keyResults) {
    
    
    
    
    this.keyResults = keyResults;
    return this;
  }

  public Goal addKeyResultsItem(String keyResultsItem) {
    this.keyResults.add(keyResultsItem);
    return this;
  }

   /**
   * 
   * @return keyResults
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getKeyResults() {
    return keyResults;
  }


  public void setKeyResults(List<String> keyResults) {
    
    
    
    this.keyResults = keyResults;
  }


  public Goal percentCompleted(Integer percentCompleted) {
    
    
    
    
    this.percentCompleted = percentCompleted;
    return this;
  }

   /**
   * Get percentCompleted
   * @return percentCompleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "")

  public Integer getPercentCompleted() {
    return percentCompleted;
  }


  public void setPercentCompleted(Integer percentCompleted) {
    
    
    
    this.percentCompleted = percentCompleted;
  }


  public Goal history(List<String> history) {
    
    
    
    
    this.history = history;
    return this;
  }

  public Goal addHistoryItem(String historyItem) {
    this.history.add(historyItem);
    return this;
  }

   /**
   * 
   * @return history
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getHistory() {
    return history;
  }


  public void setHistory(List<String> history) {
    
    
    
    this.history = history;
  }


  public Goal prettyUrl(String prettyUrl) {
    
    
    
    
    this.prettyUrl = prettyUrl;
    return this;
  }

   /**
   * Get prettyUrl
   * @return prettyUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://app.clickup.com/512/goals/6", required = true, value = "")

  public String getPrettyUrl() {
    return prettyUrl;
  }


  public void setPrettyUrl(String prettyUrl) {
    
    
    
    this.prettyUrl = prettyUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Goal instance itself
   */
  public Goal putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Goal goal = (Goal) o;
    return Objects.equals(this.description, goal.description) &&
        Objects.equals(this.id, goal.id) &&
        Objects.equals(this.name, goal.name) &&
        Objects.equals(this.teamId, goal.teamId) &&
        Objects.equals(this.dateCreated, goal.dateCreated) &&
        Objects.equals(this.startDate, goal.startDate) &&
        Objects.equals(this.dueDate, goal.dueDate) &&
        Objects.equals(this._private, goal._private) &&
        Objects.equals(this.archived, goal.archived) &&
        Objects.equals(this.creator, goal.creator) &&
        Objects.equals(this.color, goal.color) &&
        Objects.equals(this.prettyId, goal.prettyId) &&
        Objects.equals(this.multipleOwners, goal.multipleOwners) &&
        Objects.equals(this.folderId, goal.folderId) &&
        Objects.equals(this.members, goal.members) &&
        Objects.equals(this.owners, goal.owners) &&
        Objects.equals(this.keyResults, goal.keyResults) &&
        Objects.equals(this.percentCompleted, goal.percentCompleted) &&
        Objects.equals(this.history, goal.history) &&
        Objects.equals(this.prettyUrl, goal.prettyUrl)&&
        Objects.equals(this.additionalProperties, goal.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, teamId, dateCreated, startDate, dueDate, _private, archived, creator, color, prettyId, multipleOwners, folderId, members, owners, keyResults, percentCompleted, history, prettyUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Goal {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    prettyId: ").append(toIndentedString(prettyId)).append("\n");
    sb.append("    multipleOwners: ").append(toIndentedString(multipleOwners)).append("\n");
    sb.append("    folderId: ").append(toIndentedString(folderId)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    keyResults: ").append(toIndentedString(keyResults)).append("\n");
    sb.append("    percentCompleted: ").append(toIndentedString(percentCompleted)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    prettyUrl: ").append(toIndentedString(prettyUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("team_id");
    openapiFields.add("date_created");
    openapiFields.add("start_date");
    openapiFields.add("due_date");
    openapiFields.add("private");
    openapiFields.add("archived");
    openapiFields.add("creator");
    openapiFields.add("color");
    openapiFields.add("pretty_id");
    openapiFields.add("multiple_owners");
    openapiFields.add("folder_id");
    openapiFields.add("members");
    openapiFields.add("owners");
    openapiFields.add("key_results");
    openapiFields.add("percent_completed");
    openapiFields.add("history");
    openapiFields.add("pretty_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("team_id");
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("due_date");
    openapiRequiredFields.add("private");
    openapiRequiredFields.add("archived");
    openapiRequiredFields.add("creator");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("pretty_id");
    openapiRequiredFields.add("multiple_owners");
    openapiRequiredFields.add("folder_id");
    openapiRequiredFields.add("members");
    openapiRequiredFields.add("owners");
    openapiRequiredFields.add("key_results");
    openapiRequiredFields.add("percent_completed");
    openapiRequiredFields.add("history");
    openapiRequiredFields.add("pretty_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Goal
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Goal.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Goal is not found in the empty JSON string", Goal.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Goal.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("team_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_id").toString()));
      }
      if (!jsonObj.get("date_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_created").toString()));
      }
      if (!jsonObj.get("due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_date").toString()));
      }
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (!jsonObj.get("pretty_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pretty_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pretty_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("members") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("owners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
      }

      JsonArray jsonArrayowners = jsonObj.getAsJsonArray("owners");
      // validate the required field `owners` (array)
      for (int i = 0; i < jsonArrayowners.size(); i++) {
        Owner.validateJsonObject(jsonArrayowners.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("key_results") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("key_results").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_results` to be an array in the JSON string but got `%s`", jsonObj.get("key_results").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("history") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("history").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
      }
      if (!jsonObj.get("pretty_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pretty_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pretty_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Goal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Goal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Goal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Goal.class));

       return (TypeAdapter<T>) new TypeAdapter<Goal>() {
           @Override
           public void write(JsonWriter out, Goal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Goal read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Goal instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Goal given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Goal
  * @throws IOException if the JSON string is invalid with respect to Goal
  */
  public static Goal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Goal.class);
  }

 /**
  * Convert an instance of Goal to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

