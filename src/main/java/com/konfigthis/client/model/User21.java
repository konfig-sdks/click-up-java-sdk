/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CustomRole;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * User21
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class User21 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private Object color = null;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE = "profilePicture";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE)
  private Object profilePicture = null;

  public static final String SERIALIZED_NAME_INITIALS = "initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  private String initials;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private Integer role;

  public static final String SERIALIZED_NAME_CUSTOM_ROLE = "custom_role";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ROLE)
  private CustomRole customRole;

  public static final String SERIALIZED_NAME_LAST_ACTIVE = "last_active";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVE)
  private Object lastActive = null;

  public static final String SERIALIZED_NAME_DATE_JOINED = "date_joined";
  @SerializedName(SERIALIZED_NAME_DATE_JOINED)
  private Object dateJoined = null;

  public static final String SERIALIZED_NAME_DATE_INVITED = "date_invited";
  @SerializedName(SERIALIZED_NAME_DATE_INVITED)
  private String dateInvited;

  public User21() {
  }

  public User21 id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "184", value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public User21 username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "User Name", value = "")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }


  public User21 email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "user@example.com", value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public User21 color(Object color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getColor() {
    return color;
  }


  public void setColor(Object color) {
    
    
    
    this.color = color;
  }


  public User21 profilePicture(Object profilePicture) {
    
    
    
    
    this.profilePicture = profilePicture;
    return this;
  }

   /**
   * Get profilePicture
   * @return profilePicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getProfilePicture() {
    return profilePicture;
  }


  public void setProfilePicture(Object profilePicture) {
    
    
    
    this.profilePicture = profilePicture;
  }


  public User21 initials(String initials) {
    
    
    
    
    this.initials = initials;
    return this;
  }

   /**
   * Get initials
   * @return initials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "G", value = "")

  public String getInitials() {
    return initials;
  }


  public void setInitials(String initials) {
    
    
    
    this.initials = initials;
  }


  public User21 role(Integer role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * Owner &#x3D; 1, Admin &#x3D; 2, Member &#x3D; 3, Guest &#x3D; 4
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "Owner = 1, Admin = 2, Member = 3, Guest = 4")

  public Integer getRole() {
    return role;
  }


  public void setRole(Integer role) {
    
    
    
    this.role = role;
  }


  public User21 customRole(CustomRole customRole) {
    
    
    
    
    this.customRole = customRole;
    return this;
  }

   /**
   * Get customRole
   * @return customRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomRole getCustomRole() {
    return customRole;
  }


  public void setCustomRole(CustomRole customRole) {
    
    
    
    this.customRole = customRole;
  }


  public User21 lastActive(Object lastActive) {
    
    
    
    
    this.lastActive = lastActive;
    return this;
  }

   /**
   * Get lastActive
   * @return lastActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getLastActive() {
    return lastActive;
  }


  public void setLastActive(Object lastActive) {
    
    
    
    this.lastActive = lastActive;
  }


  public User21 dateJoined(Object dateJoined) {
    
    
    
    
    this.dateJoined = dateJoined;
    return this;
  }

   /**
   * Get dateJoined
   * @return dateJoined
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDateJoined() {
    return dateJoined;
  }


  public void setDateJoined(Object dateJoined) {
    
    
    
    this.dateJoined = dateJoined;
  }


  public User21 dateInvited(String dateInvited) {
    
    
    
    
    this.dateInvited = dateInvited;
    return this;
  }

   /**
   * Get dateInvited
   * @return dateInvited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1583358383412", value = "")

  public String getDateInvited() {
    return dateInvited;
  }


  public void setDateInvited(String dateInvited) {
    
    
    
    this.dateInvited = dateInvited;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the User21 instance itself
   */
  public User21 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User21 user21 = (User21) o;
    return Objects.equals(this.id, user21.id) &&
        Objects.equals(this.username, user21.username) &&
        Objects.equals(this.email, user21.email) &&
        Objects.equals(this.color, user21.color) &&
        Objects.equals(this.profilePicture, user21.profilePicture) &&
        Objects.equals(this.initials, user21.initials) &&
        Objects.equals(this.role, user21.role) &&
        Objects.equals(this.customRole, user21.customRole) &&
        Objects.equals(this.lastActive, user21.lastActive) &&
        Objects.equals(this.dateJoined, user21.dateJoined) &&
        Objects.equals(this.dateInvited, user21.dateInvited)&&
        Objects.equals(this.additionalProperties, user21.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, email, color, profilePicture, initials, role, customRole, lastActive, dateJoined, dateInvited, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User21 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    profilePicture: ").append(toIndentedString(profilePicture)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    customRole: ").append(toIndentedString(customRole)).append("\n");
    sb.append("    lastActive: ").append(toIndentedString(lastActive)).append("\n");
    sb.append("    dateJoined: ").append(toIndentedString(dateJoined)).append("\n");
    sb.append("    dateInvited: ").append(toIndentedString(dateInvited)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("email");
    openapiFields.add("color");
    openapiFields.add("profilePicture");
    openapiFields.add("initials");
    openapiFields.add("role");
    openapiFields.add("custom_role");
    openapiFields.add("last_active");
    openapiFields.add("date_joined");
    openapiFields.add("date_invited");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to User21
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!User21.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User21 is not found in the empty JSON string", User21.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("initials") != null && !jsonObj.get("initials").isJsonNull()) && !jsonObj.get("initials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initials").toString()));
      }
      // validate the optional field `custom_role`
      if (jsonObj.get("custom_role") != null && !jsonObj.get("custom_role").isJsonNull()) {
        CustomRole.validateJsonObject(jsonObj.getAsJsonObject("custom_role"));
      }
      if ((jsonObj.get("date_invited") != null && !jsonObj.get("date_invited").isJsonNull()) && !jsonObj.get("date_invited").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_invited` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_invited").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User21.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User21' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User21> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User21.class));

       return (TypeAdapter<T>) new TypeAdapter<User21>() {
           @Override
           public void write(JsonWriter out, User21 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public User21 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             User21 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of User21 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of User21
  * @throws IOException if the JSON string is invalid with respect to User21
  */
  public static User21 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User21.class);
  }

 /**
  * Convert an instance of User21 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

