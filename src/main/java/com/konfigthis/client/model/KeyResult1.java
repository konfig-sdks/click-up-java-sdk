/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LastAction1;
import com.konfigthis.client.model.Owner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * KeyResult1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class KeyResult1 {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GOAL_ID = "goal_id";
  @SerializedName(SERIALIZED_NAME_GOAL_ID)
  private String goalId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private Integer creator;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_GOAL_PRETTY_ID = "goal_pretty_id";
  @SerializedName(SERIALIZED_NAME_GOAL_PRETTY_ID)
  private String goalPrettyId;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETED = "percent_completed";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETED)
  private Object percentCompleted = null;

  public static final String SERIALIZED_NAME_COMPLETED = "completed";
  @SerializedName(SERIALIZED_NAME_COMPLETED)
  private Boolean completed;

  public static final String SERIALIZED_NAME_TASK_IDS = "task_ids";
  @SerializedName(SERIALIZED_NAME_TASK_IDS)
  private List<String> taskIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBCATEGORY_IDS = "subcategory_ids";
  @SerializedName(SERIALIZED_NAME_SUBCATEGORY_IDS)
  private List<String> subcategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_OWNERS = "owners";
  @SerializedName(SERIALIZED_NAME_OWNERS)
  private List<Owner> owners = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_ACTION = "last_action";
  @SerializedName(SERIALIZED_NAME_LAST_ACTION)
  private LastAction1 lastAction;

  public KeyResult1() {
  }

  public KeyResult1 id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "947d46ed-8480-49bc-8c57-e569747efe93X", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public KeyResult1 goalId(String goalId) {
    
    
    
    
    this.goalId = goalId;
    return this;
  }

   /**
   * Get goalId
   * @return goalId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "e53a033c-900e-462d-a849-4a216b06d930", required = true, value = "")

  public String getGoalId() {
    return goalId;
  }


  public void setGoalId(String goalId) {
    
    
    
    this.goalId = goalId;
  }


  public KeyResult1 name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "New Key Result Name", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public KeyResult1 type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "number", required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public KeyResult1 unit(String unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "km", required = true, value = "")

  public String getUnit() {
    return unit;
  }


  public void setUnit(String unit) {
    
    
    
    this.unit = unit;
  }


  public KeyResult1 creator(Integer creator) {
    
    
    
    
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "183", required = true, value = "")

  public Integer getCreator() {
    return creator;
  }


  public void setCreator(Integer creator) {
    
    
    
    this.creator = creator;
  }


  public KeyResult1 dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1568062902048", required = true, value = "")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public KeyResult1 goalPrettyId(String goalPrettyId) {
    
    
    
    
    this.goalPrettyId = goalPrettyId;
    return this;
  }

   /**
   * Get goalPrettyId
   * @return goalPrettyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "6", required = true, value = "")

  public String getGoalPrettyId() {
    return goalPrettyId;
  }


  public void setGoalPrettyId(String goalPrettyId) {
    
    
    
    this.goalPrettyId = goalPrettyId;
  }


  public KeyResult1 percentCompleted(Object percentCompleted) {
    
    
    
    
    this.percentCompleted = percentCompleted;
    return this;
  }

   /**
   * Get percentCompleted
   * @return percentCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getPercentCompleted() {
    return percentCompleted;
  }


  public void setPercentCompleted(Object percentCompleted) {
    
    
    
    this.percentCompleted = percentCompleted;
  }


  public KeyResult1 completed(Boolean completed) {
    
    
    
    
    this.completed = completed;
    return this;
  }

   /**
   * Get completed
   * @return completed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getCompleted() {
    return completed;
  }


  public void setCompleted(Boolean completed) {
    
    
    
    this.completed = completed;
  }


  public KeyResult1 taskIds(List<String> taskIds) {
    
    
    
    
    this.taskIds = taskIds;
    return this;
  }

  public KeyResult1 addTaskIdsItem(String taskIdsItem) {
    this.taskIds.add(taskIdsItem);
    return this;
  }

   /**
   * 
   * @return taskIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTaskIds() {
    return taskIds;
  }


  public void setTaskIds(List<String> taskIds) {
    
    
    
    this.taskIds = taskIds;
  }


  public KeyResult1 subcategoryIds(List<String> subcategoryIds) {
    
    
    
    
    this.subcategoryIds = subcategoryIds;
    return this;
  }

  public KeyResult1 addSubcategoryIdsItem(String subcategoryIdsItem) {
    this.subcategoryIds.add(subcategoryIdsItem);
    return this;
  }

   /**
   * 
   * @return subcategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getSubcategoryIds() {
    return subcategoryIds;
  }


  public void setSubcategoryIds(List<String> subcategoryIds) {
    
    
    
    this.subcategoryIds = subcategoryIds;
  }


  public KeyResult1 owners(List<Owner> owners) {
    
    
    
    
    this.owners = owners;
    return this;
  }

  public KeyResult1 addOwnersItem(Owner ownersItem) {
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * 
   * @return owners
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Owner> getOwners() {
    return owners;
  }


  public void setOwners(List<Owner> owners) {
    
    
    
    this.owners = owners;
  }


  public KeyResult1 lastAction(LastAction1 lastAction) {
    
    
    
    
    this.lastAction = lastAction;
    return this;
  }

   /**
   * Get lastAction
   * @return lastAction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LastAction1 getLastAction() {
    return lastAction;
  }


  public void setLastAction(LastAction1 lastAction) {
    
    
    
    this.lastAction = lastAction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the KeyResult1 instance itself
   */
  public KeyResult1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeyResult1 keyResult1 = (KeyResult1) o;
    return Objects.equals(this.id, keyResult1.id) &&
        Objects.equals(this.goalId, keyResult1.goalId) &&
        Objects.equals(this.name, keyResult1.name) &&
        Objects.equals(this.type, keyResult1.type) &&
        Objects.equals(this.unit, keyResult1.unit) &&
        Objects.equals(this.creator, keyResult1.creator) &&
        Objects.equals(this.dateCreated, keyResult1.dateCreated) &&
        Objects.equals(this.goalPrettyId, keyResult1.goalPrettyId) &&
        Objects.equals(this.percentCompleted, keyResult1.percentCompleted) &&
        Objects.equals(this.completed, keyResult1.completed) &&
        Objects.equals(this.taskIds, keyResult1.taskIds) &&
        Objects.equals(this.subcategoryIds, keyResult1.subcategoryIds) &&
        Objects.equals(this.owners, keyResult1.owners) &&
        Objects.equals(this.lastAction, keyResult1.lastAction)&&
        Objects.equals(this.additionalProperties, keyResult1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, goalId, name, type, unit, creator, dateCreated, goalPrettyId, percentCompleted, completed, taskIds, subcategoryIds, owners, lastAction, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeyResult1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    goalId: ").append(toIndentedString(goalId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    goalPrettyId: ").append(toIndentedString(goalPrettyId)).append("\n");
    sb.append("    percentCompleted: ").append(toIndentedString(percentCompleted)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    taskIds: ").append(toIndentedString(taskIds)).append("\n");
    sb.append("    subcategoryIds: ").append(toIndentedString(subcategoryIds)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    lastAction: ").append(toIndentedString(lastAction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("goal_id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("unit");
    openapiFields.add("creator");
    openapiFields.add("date_created");
    openapiFields.add("goal_pretty_id");
    openapiFields.add("percent_completed");
    openapiFields.add("completed");
    openapiFields.add("task_ids");
    openapiFields.add("subcategory_ids");
    openapiFields.add("owners");
    openapiFields.add("last_action");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("goal_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("unit");
    openapiRequiredFields.add("creator");
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("goal_pretty_id");
    openapiRequiredFields.add("percent_completed");
    openapiRequiredFields.add("completed");
    openapiRequiredFields.add("task_ids");
    openapiRequiredFields.add("subcategory_ids");
    openapiRequiredFields.add("owners");
    openapiRequiredFields.add("last_action");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KeyResult1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KeyResult1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeyResult1 is not found in the empty JSON string", KeyResult1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KeyResult1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("goal_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if (!jsonObj.get("date_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_created").toString()));
      }
      if (!jsonObj.get("goal_pretty_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal_pretty_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal_pretty_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("task_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("task_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_ids` to be an array in the JSON string but got `%s`", jsonObj.get("task_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("subcategory_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subcategory_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subcategory_ids` to be an array in the JSON string but got `%s`", jsonObj.get("subcategory_ids").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("owners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owners` to be an array in the JSON string but got `%s`", jsonObj.get("owners").toString()));
      }

      JsonArray jsonArrayowners = jsonObj.getAsJsonArray("owners");
      // validate the required field `owners` (array)
      for (int i = 0; i < jsonArrayowners.size(); i++) {
        Owner.validateJsonObject(jsonArrayowners.get(i).getAsJsonObject());
      };
      // validate the required field `last_action`
      LastAction1.validateJsonObject(jsonObj.getAsJsonObject("last_action"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeyResult1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeyResult1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeyResult1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeyResult1.class));

       return (TypeAdapter<T>) new TypeAdapter<KeyResult1>() {
           @Override
           public void write(JsonWriter out, KeyResult1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public KeyResult1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             KeyResult1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeyResult1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeyResult1
  * @throws IOException if the JSON string is invalid with respect to KeyResult1
  */
  public static KeyResult1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeyResult1.class);
  }

 /**
  * Convert an instance of KeyResult1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

