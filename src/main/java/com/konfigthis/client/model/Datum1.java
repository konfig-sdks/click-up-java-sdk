/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Task4;
import com.konfigthis.client.model.TaskLocation;
import com.konfigthis.client.model.TaskTag;
import com.konfigthis.client.model.User2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Datum1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Datum1 {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TASK = "task";
  @SerializedName(SERIALIZED_NAME_TASK)
  private Task4 task;

  public static final String SERIALIZED_NAME_WID = "wid";
  @SerializedName(SERIALIZED_NAME_WID)
  private String wid;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User2 user;

  public static final String SERIALIZED_NAME_BILLABLE = "billable";
  @SerializedName(SERIALIZED_NAME_BILLABLE)
  private Boolean billable;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_AT = "at";
  @SerializedName(SERIALIZED_NAME_AT)
  private String at;

  public static final String SERIALIZED_NAME_TASK_LOCATION = "task_location";
  @SerializedName(SERIALIZED_NAME_TASK_LOCATION)
  private TaskLocation taskLocation;

  public static final String SERIALIZED_NAME_TASK_TAGS = "task_tags";
  @SerializedName(SERIALIZED_NAME_TASK_TAGS)
  private List<TaskTag> taskTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_URL = "task_url";
  @SerializedName(SERIALIZED_NAME_TASK_URL)
  private String taskUrl;

  public Datum1() {
  }

  public Datum1 tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public Datum1 addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * 
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public Datum1 description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "", required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Datum1 id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1963465985517105840X", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Datum1 task(Task4 task) {
    
    
    
    
    this.task = task;
    return this;
  }

   /**
   * Get task
   * @return task
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Task4 getTask() {
    return task;
  }


  public void setTask(Task4 task) {
    
    
    
    this.task = task;
  }


  public Datum1 wid(String wid) {
    
    
    
    
    this.wid = wid;
    return this;
  }

   /**
   * Get wid
   * @return wid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "300702", required = true, value = "")

  public String getWid() {
    return wid;
  }


  public void setWid(String wid) {
    
    
    
    this.wid = wid;
  }


  public Datum1 user(User2 user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public User2 getUser() {
    return user;
  }


  public void setUser(User2 user) {
    
    
    
    this.user = user;
  }


  public Datum1 billable(Boolean billable) {
    
    
    
    
    this.billable = billable;
    return this;
  }

   /**
   * Get billable
   * @return billable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getBillable() {
    return billable;
  }


  public void setBillable(Boolean billable) {
    
    
    
    this.billable = billable;
  }


  public Datum1 start(String start) {
    
    
    
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1592841559129", required = true, value = "")

  public String getStart() {
    return start;
  }


  public void setStart(String start) {
    
    
    
    this.start = start;
  }


  public Datum1 end(String end) {
    
    
    
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1592845899021", required = true, value = "")

  public String getEnd() {
    return end;
  }


  public void setEnd(String end) {
    
    
    
    this.end = end;
  }


  public Datum1 duration(String duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Get duration
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4339892", required = true, value = "")

  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    
    
    
    this.duration = duration;
  }


  public Datum1 source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "clickup", required = true, value = "")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public Datum1 at(String at) {
    
    
    
    
    this.at = at;
    return this;
  }

   /**
   * Get at
   * @return at
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1592845899021", required = true, value = "")

  public String getAt() {
    return at;
  }


  public void setAt(String at) {
    
    
    
    this.at = at;
  }


  public Datum1 taskLocation(TaskLocation taskLocation) {
    
    
    
    
    this.taskLocation = taskLocation;
    return this;
  }

   /**
   * Get taskLocation
   * @return taskLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TaskLocation getTaskLocation() {
    return taskLocation;
  }


  public void setTaskLocation(TaskLocation taskLocation) {
    
    
    
    this.taskLocation = taskLocation;
  }


  public Datum1 taskTags(List<TaskTag> taskTags) {
    
    
    
    
    this.taskTags = taskTags;
    return this;
  }

  public Datum1 addTaskTagsItem(TaskTag taskTagsItem) {
    this.taskTags.add(taskTagsItem);
    return this;
  }

   /**
   * 
   * @return taskTags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<TaskTag> getTaskTags() {
    return taskTags;
  }


  public void setTaskTags(List<TaskTag> taskTags) {
    
    
    
    this.taskTags = taskTags;
  }


  public Datum1 taskUrl(String taskUrl) {
    
    
    
    
    this.taskUrl = taskUrl;
    return this;
  }

   /**
   * Get taskUrl
   * @return taskUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://staging.clickup.com/t/1vwwavv", required = true, value = "")

  public String getTaskUrl() {
    return taskUrl;
  }


  public void setTaskUrl(String taskUrl) {
    
    
    
    this.taskUrl = taskUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Datum1 instance itself
   */
  public Datum1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datum1 datum1 = (Datum1) o;
    return Objects.equals(this.tags, datum1.tags) &&
        Objects.equals(this.description, datum1.description) &&
        Objects.equals(this.id, datum1.id) &&
        Objects.equals(this.task, datum1.task) &&
        Objects.equals(this.wid, datum1.wid) &&
        Objects.equals(this.user, datum1.user) &&
        Objects.equals(this.billable, datum1.billable) &&
        Objects.equals(this.start, datum1.start) &&
        Objects.equals(this.end, datum1.end) &&
        Objects.equals(this.duration, datum1.duration) &&
        Objects.equals(this.source, datum1.source) &&
        Objects.equals(this.at, datum1.at) &&
        Objects.equals(this.taskLocation, datum1.taskLocation) &&
        Objects.equals(this.taskTags, datum1.taskTags) &&
        Objects.equals(this.taskUrl, datum1.taskUrl)&&
        Objects.equals(this.additionalProperties, datum1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, id, task, wid, user, billable, start, end, duration, source, at, taskLocation, taskTags, taskUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datum1 {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    task: ").append(toIndentedString(task)).append("\n");
    sb.append("    wid: ").append(toIndentedString(wid)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    billable: ").append(toIndentedString(billable)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    at: ").append(toIndentedString(at)).append("\n");
    sb.append("    taskLocation: ").append(toIndentedString(taskLocation)).append("\n");
    sb.append("    taskTags: ").append(toIndentedString(taskTags)).append("\n");
    sb.append("    taskUrl: ").append(toIndentedString(taskUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("task");
    openapiFields.add("wid");
    openapiFields.add("user");
    openapiFields.add("billable");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("duration");
    openapiFields.add("source");
    openapiFields.add("at");
    openapiFields.add("task_location");
    openapiFields.add("task_tags");
    openapiFields.add("task_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("task");
    openapiRequiredFields.add("wid");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("billable");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("at");
    openapiRequiredFields.add("task_location");
    openapiRequiredFields.add("task_tags");
    openapiRequiredFields.add("task_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Datum1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Datum1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Datum1 is not found in the empty JSON string", Datum1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Datum1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `task`
      Task4.validateJsonObject(jsonObj.getAsJsonObject("task"));
      if (!jsonObj.get("wid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wid").toString()));
      }
      // validate the required field `user`
      User2.validateJsonObject(jsonObj.getAsJsonObject("user"));
      if (!jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if (!jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("at").toString()));
      }
      // validate the required field `task_location`
      TaskLocation.validateJsonObject(jsonObj.getAsJsonObject("task_location"));
      // ensure the json data is an array
      if (!jsonObj.get("task_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_tags` to be an array in the JSON string but got `%s`", jsonObj.get("task_tags").toString()));
      }

      JsonArray jsonArraytaskTags = jsonObj.getAsJsonArray("task_tags");
      // validate the required field `task_tags` (array)
      for (int i = 0; i < jsonArraytaskTags.size(); i++) {
        TaskTag.validateJsonObject(jsonArraytaskTags.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("task_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Datum1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Datum1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Datum1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Datum1.class));

       return (TypeAdapter<T>) new TypeAdapter<Datum1>() {
           @Override
           public void write(JsonWriter out, Datum1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Datum1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Datum1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Datum1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Datum1
  * @throws IOException if the JSON string is invalid with respect to Datum1
  */
  public static Datum1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Datum1.class);
  }

 /**
  * Convert an instance of Datum1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

