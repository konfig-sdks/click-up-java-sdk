/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Assignees1;
import com.konfigthis.client.model.Checklists6;
import com.konfigthis.client.model.Creator5;
import com.konfigthis.client.model.CustomFields9;
import com.konfigthis.client.model.Folder3;
import com.konfigthis.client.model.List2;
import com.konfigthis.client.model.Project;
import com.konfigthis.client.model.Space;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.Tags6;
import com.konfigthis.client.model.Watchers1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Task3
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Task3 {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tags6> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CUSTOM_ID = "custom_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private Object customId = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TEXT_CONTENT = "text_content";
  @SerializedName(SERIALIZED_NAME_TEXT_CONTENT)
  private String textContent;

  public static final String SERIALIZED_NAME_MARKDOWN_DESCRIPTION = "markdown_description";
  @SerializedName(SERIALIZED_NAME_MARKDOWN_DESCRIPTION)
  private String markdownDescription;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_ORDERINDEX = "orderindex";
  @SerializedName(SERIALIZED_NAME_ORDERINDEX)
  private String orderindex;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "date_updated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private String dateUpdated;

  public static final String SERIALIZED_NAME_DATE_CLOSED = "date_closed";
  @SerializedName(SERIALIZED_NAME_DATE_CLOSED)
  private String dateClosed;

  public static final String SERIALIZED_NAME_DATE_DONE = "date_done";
  @SerializedName(SERIALIZED_NAME_DATE_DONE)
  private Object dateDone = null;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private Creator5 creator;

  public static final String SERIALIZED_NAME_ASSIGNEES = "assignees";
  @SerializedName(SERIALIZED_NAME_ASSIGNEES)
  private List<Assignees1> assignees = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private List<Watchers1> watchers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKLISTS = "checklists";
  @SerializedName(SERIALIZED_NAME_CHECKLISTS)
  private List<Checklists6> checklists = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_POINTS = "points";
  @SerializedName(SERIALIZED_NAME_POINTS)
  private Double points;

  public static final String SERIALIZED_NAME_TIME_ESTIMATE = "time_estimate";
  @SerializedName(SERIALIZED_NAME_TIME_ESTIMATE)
  private Double timeEstimate;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFields9> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<String> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_TASKS = "linked_tasks";
  @SerializedName(SERIALIZED_NAME_LINKED_TASKS)
  private List<String> linkedTasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PERMISSION_LEVEL = "permission_level";
  @SerializedName(SERIALIZED_NAME_PERMISSION_LEVEL)
  private String permissionLevel;

  public static final String SERIALIZED_NAME_LIST = "list";
  @SerializedName(SERIALIZED_NAME_LIST)
  private List2 list;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private Project project;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private Folder3 folder;

  public static final String SERIALIZED_NAME_SPACE = "space";
  @SerializedName(SERIALIZED_NAME_SPACE)
  private Space space;

  public Task3() {
  }

  public Task3 tags(List<Tags6> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public Task3 addTagsItem(Tags6 tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * 
   * @return tags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Tags6> getTags() {
    return tags;
  }


  public void setTags(List<Tags6> tags) {
    
    
    
    this.tags = tags;
  }


  public Task3 description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Task description", required = true, value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Task3 id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "av1X", required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Task3 customId(Object customId) {
    
    
    
    
    this.customId = customId;
    return this;
  }

   /**
   * Get customId
   * @return customId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getCustomId() {
    return customId;
  }


  public void setCustomId(Object customId) {
    
    
    
    this.customId = customId;
  }


  public Task3 name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "My First Task", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Task3 textContent(String textContent) {
    
    
    
    
    this.textContent = textContent;
    return this;
  }

   /**
   * Get textContent
   * @return textContent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Task description", required = true, value = "")

  public String getTextContent() {
    return textContent;
  }


  public void setTextContent(String textContent) {
    
    
    
    this.textContent = textContent;
  }


  public Task3 markdownDescription(String markdownDescription) {
    
    
    
    
    this.markdownDescription = markdownDescription;
    return this;
  }

   /**
   * Get markdownDescription
   * @return markdownDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Task description", value = "")

  public String getMarkdownDescription() {
    return markdownDescription;
  }


  public void setMarkdownDescription(String markdownDescription) {
    
    
    
    this.markdownDescription = markdownDescription;
  }


  public Task3 status(Status status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Status getStatus() {
    return status;
  }


  public void setStatus(Status status) {
    
    
    
    this.status = status;
  }


  public Task3 orderindex(String orderindex) {
    
    
    
    
    this.orderindex = orderindex;
    return this;
  }

   /**
   * Get orderindex
   * @return orderindex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.0000", required = true, value = "")

  public String getOrderindex() {
    return orderindex;
  }


  public void setOrderindex(String orderindex) {
    
    
    
    this.orderindex = orderindex;
  }


  public Task3 dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1508369194377", required = true, value = "")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public Task3 dateUpdated(String dateUpdated) {
    
    
    
    
    this.dateUpdated = dateUpdated;
    return this;
  }

   /**
   * Get dateUpdated
   * @return dateUpdated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1508369194377", required = true, value = "")

  public String getDateUpdated() {
    return dateUpdated;
  }


  public void setDateUpdated(String dateUpdated) {
    
    
    
    this.dateUpdated = dateUpdated;
  }


  public Task3 dateClosed(String dateClosed) {
    
    
    
    
    this.dateClosed = dateClosed;
    return this;
  }

   /**
   * Get dateClosed
   * @return dateClosed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1508369194377", required = true, value = "")

  public String getDateClosed() {
    return dateClosed;
  }


  public void setDateClosed(String dateClosed) {
    
    
    
    this.dateClosed = dateClosed;
  }


  public Task3 dateDone(Object dateDone) {
    
    
    
    
    this.dateDone = dateDone;
    return this;
  }

   /**
   * Get dateDone
   * @return dateDone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getDateDone() {
    return dateDone;
  }


  public void setDateDone(Object dateDone) {
    
    
    
    this.dateDone = dateDone;
  }


  public Task3 creator(Creator5 creator) {
    
    
    
    
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Creator5 getCreator() {
    return creator;
  }


  public void setCreator(Creator5 creator) {
    
    
    
    this.creator = creator;
  }


  public Task3 assignees(List<Assignees1> assignees) {
    
    
    
    
    this.assignees = assignees;
    return this;
  }

  public Task3 addAssigneesItem(Assignees1 assigneesItem) {
    this.assignees.add(assigneesItem);
    return this;
  }

   /**
   * 
   * @return assignees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Assignees1> getAssignees() {
    return assignees;
  }


  public void setAssignees(List<Assignees1> assignees) {
    
    
    
    this.assignees = assignees;
  }


  public Task3 watchers(List<Watchers1> watchers) {
    
    
    
    
    this.watchers = watchers;
    return this;
  }

  public Task3 addWatchersItem(Watchers1 watchersItem) {
    this.watchers.add(watchersItem);
    return this;
  }

   /**
   * 
   * @return watchers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Watchers1> getWatchers() {
    return watchers;
  }


  public void setWatchers(List<Watchers1> watchers) {
    
    
    
    this.watchers = watchers;
  }


  public Task3 checklists(List<Checklists6> checklists) {
    
    
    
    
    this.checklists = checklists;
    return this;
  }

  public Task3 addChecklistsItem(Checklists6 checklistsItem) {
    this.checklists.add(checklistsItem);
    return this;
  }

   /**
   * 
   * @return checklists
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Checklists6> getChecklists() {
    return checklists;
  }


  public void setChecklists(List<Checklists6> checklists) {
    
    
    
    this.checklists = checklists;
  }


  public Task3 parent(String parent) {
    
    
    
    
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "av2", required = true, value = "")

  public String getParent() {
    return parent;
  }


  public void setParent(String parent) {
    
    
    
    this.parent = parent;
  }


  public Task3 priority(Integer priority) {
    
    
    
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "")

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    
    
    
    this.priority = priority;
  }


  public Task3 dueDate(String dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1508369194377", required = true, value = "")

  public String getDueDate() {
    return dueDate;
  }


  public void setDueDate(String dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public Task3 startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1508369194377", required = true, value = "")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Task3 points(Double points) {
    
    
    
    
    this.points = points;
    return this;
  }

  public Task3 points(Integer points) {
    
    
    
    
    this.points = points.doubleValue();
    return this;
  }

   /**
   * Get points
   * @return points
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.3", required = true, value = "")

  public Double getPoints() {
    return points;
  }


  public void setPoints(Double points) {
    
    
    
    this.points = points;
  }


  public Task3 timeEstimate(Double timeEstimate) {
    
    
    
    
    this.timeEstimate = timeEstimate;
    return this;
  }

  public Task3 timeEstimate(Integer timeEstimate) {
    
    
    
    
    this.timeEstimate = timeEstimate.doubleValue();
    return this;
  }

   /**
   * Get timeEstimate
   * @return timeEstimate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1.2", required = true, value = "")

  public Double getTimeEstimate() {
    return timeEstimate;
  }


  public void setTimeEstimate(Double timeEstimate) {
    
    
    
    this.timeEstimate = timeEstimate;
  }


  public Task3 customFields(List<CustomFields9> customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

  public Task3 addCustomFieldsItem(CustomFields9 customFieldsItem) {
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * 
   * @return customFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<CustomFields9> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(List<CustomFields9> customFields) {
    
    
    
    this.customFields = customFields;
  }


  public Task3 dependencies(List<String> dependencies) {
    
    
    
    
    this.dependencies = dependencies;
    return this;
  }

  public Task3 addDependenciesItem(String dependenciesItem) {
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * 
   * @return dependencies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getDependencies() {
    return dependencies;
  }


  public void setDependencies(List<String> dependencies) {
    
    
    
    this.dependencies = dependencies;
  }


  public Task3 linkedTasks(List<String> linkedTasks) {
    
    
    
    
    this.linkedTasks = linkedTasks;
    return this;
  }

  public Task3 addLinkedTasksItem(String linkedTasksItem) {
    this.linkedTasks.add(linkedTasksItem);
    return this;
  }

   /**
   * 
   * @return linkedTasks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getLinkedTasks() {
    return linkedTasks;
  }


  public void setLinkedTasks(List<String> linkedTasks) {
    
    
    
    this.linkedTasks = linkedTasks;
  }


  public Task3 teamId(String teamId) {
    
    
    
    
    this.teamId = teamId;
    return this;
  }

   /**
   * Get teamId
   * @return teamId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1234", required = true, value = "")

  public String getTeamId() {
    return teamId;
  }


  public void setTeamId(String teamId) {
    
    
    
    this.teamId = teamId;
  }


  public Task3 url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://app.clickup.com/t/av1", required = true, value = "")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public Task3 permissionLevel(String permissionLevel) {
    
    
    
    
    this.permissionLevel = permissionLevel;
    return this;
  }

   /**
   * Get permissionLevel
   * @return permissionLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "create", required = true, value = "")

  public String getPermissionLevel() {
    return permissionLevel;
  }


  public void setPermissionLevel(String permissionLevel) {
    
    
    
    this.permissionLevel = permissionLevel;
  }


  public Task3 list(List2 list) {
    
    
    
    
    this.list = list;
    return this;
  }

   /**
   * Get list
   * @return list
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List2 getList() {
    return list;
  }


  public void setList(List2 list) {
    
    
    
    this.list = list;
  }


  public Task3 project(Project project) {
    
    
    
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Project getProject() {
    return project;
  }


  public void setProject(Project project) {
    
    
    
    this.project = project;
  }


  public Task3 folder(Folder3 folder) {
    
    
    
    
    this.folder = folder;
    return this;
  }

   /**
   * Get folder
   * @return folder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Folder3 getFolder() {
    return folder;
  }


  public void setFolder(Folder3 folder) {
    
    
    
    this.folder = folder;
  }


  public Task3 space(Space space) {
    
    
    
    
    this.space = space;
    return this;
  }

   /**
   * Get space
   * @return space
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Space getSpace() {
    return space;
  }


  public void setSpace(Space space) {
    
    
    
    this.space = space;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Task3 instance itself
   */
  public Task3 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task3 task3 = (Task3) o;
    return Objects.equals(this.tags, task3.tags) &&
        Objects.equals(this.description, task3.description) &&
        Objects.equals(this.id, task3.id) &&
        Objects.equals(this.customId, task3.customId) &&
        Objects.equals(this.name, task3.name) &&
        Objects.equals(this.textContent, task3.textContent) &&
        Objects.equals(this.markdownDescription, task3.markdownDescription) &&
        Objects.equals(this.status, task3.status) &&
        Objects.equals(this.orderindex, task3.orderindex) &&
        Objects.equals(this.dateCreated, task3.dateCreated) &&
        Objects.equals(this.dateUpdated, task3.dateUpdated) &&
        Objects.equals(this.dateClosed, task3.dateClosed) &&
        Objects.equals(this.dateDone, task3.dateDone) &&
        Objects.equals(this.creator, task3.creator) &&
        Objects.equals(this.assignees, task3.assignees) &&
        Objects.equals(this.watchers, task3.watchers) &&
        Objects.equals(this.checklists, task3.checklists) &&
        Objects.equals(this.parent, task3.parent) &&
        Objects.equals(this.priority, task3.priority) &&
        Objects.equals(this.dueDate, task3.dueDate) &&
        Objects.equals(this.startDate, task3.startDate) &&
        Objects.equals(this.points, task3.points) &&
        Objects.equals(this.timeEstimate, task3.timeEstimate) &&
        Objects.equals(this.customFields, task3.customFields) &&
        Objects.equals(this.dependencies, task3.dependencies) &&
        Objects.equals(this.linkedTasks, task3.linkedTasks) &&
        Objects.equals(this.teamId, task3.teamId) &&
        Objects.equals(this.url, task3.url) &&
        Objects.equals(this.permissionLevel, task3.permissionLevel) &&
        Objects.equals(this.list, task3.list) &&
        Objects.equals(this.project, task3.project) &&
        Objects.equals(this.folder, task3.folder) &&
        Objects.equals(this.space, task3.space)&&
        Objects.equals(this.additionalProperties, task3.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, description, id, customId, name, textContent, markdownDescription, status, orderindex, dateCreated, dateUpdated, dateClosed, dateDone, creator, assignees, watchers, checklists, parent, priority, dueDate, startDate, points, timeEstimate, customFields, dependencies, linkedTasks, teamId, url, permissionLevel, list, project, folder, space, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task3 {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    textContent: ").append(toIndentedString(textContent)).append("\n");
    sb.append("    markdownDescription: ").append(toIndentedString(markdownDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    orderindex: ").append(toIndentedString(orderindex)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    dateClosed: ").append(toIndentedString(dateClosed)).append("\n");
    sb.append("    dateDone: ").append(toIndentedString(dateDone)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    assignees: ").append(toIndentedString(assignees)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("    checklists: ").append(toIndentedString(checklists)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    points: ").append(toIndentedString(points)).append("\n");
    sb.append("    timeEstimate: ").append(toIndentedString(timeEstimate)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    linkedTasks: ").append(toIndentedString(linkedTasks)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    permissionLevel: ").append(toIndentedString(permissionLevel)).append("\n");
    sb.append("    list: ").append(toIndentedString(list)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("custom_id");
    openapiFields.add("name");
    openapiFields.add("text_content");
    openapiFields.add("markdown_description");
    openapiFields.add("status");
    openapiFields.add("orderindex");
    openapiFields.add("date_created");
    openapiFields.add("date_updated");
    openapiFields.add("date_closed");
    openapiFields.add("date_done");
    openapiFields.add("creator");
    openapiFields.add("assignees");
    openapiFields.add("watchers");
    openapiFields.add("checklists");
    openapiFields.add("parent");
    openapiFields.add("priority");
    openapiFields.add("due_date");
    openapiFields.add("start_date");
    openapiFields.add("points");
    openapiFields.add("time_estimate");
    openapiFields.add("custom_fields");
    openapiFields.add("dependencies");
    openapiFields.add("linked_tasks");
    openapiFields.add("team_id");
    openapiFields.add("url");
    openapiFields.add("permission_level");
    openapiFields.add("list");
    openapiFields.add("project");
    openapiFields.add("folder");
    openapiFields.add("space");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tags");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("custom_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("text_content");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("orderindex");
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("date_updated");
    openapiRequiredFields.add("date_closed");
    openapiRequiredFields.add("date_done");
    openapiRequiredFields.add("creator");
    openapiRequiredFields.add("assignees");
    openapiRequiredFields.add("watchers");
    openapiRequiredFields.add("checklists");
    openapiRequiredFields.add("parent");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("due_date");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("points");
    openapiRequiredFields.add("time_estimate");
    openapiRequiredFields.add("custom_fields");
    openapiRequiredFields.add("dependencies");
    openapiRequiredFields.add("linked_tasks");
    openapiRequiredFields.add("team_id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("permission_level");
    openapiRequiredFields.add("list");
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("folder");
    openapiRequiredFields.add("space");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Task3
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Task3.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Task3 is not found in the empty JSON string", Task3.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Task3.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }

      JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
      // validate the required field `tags` (array)
      for (int i = 0; i < jsonArraytags.size(); i++) {
        Tags6.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("text_content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_content").toString()));
      }
      if ((jsonObj.get("markdown_description") != null && !jsonObj.get("markdown_description").isJsonNull()) && !jsonObj.get("markdown_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `markdown_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("markdown_description").toString()));
      }
      // validate the required field `status`
      Status.validateJsonObject(jsonObj.getAsJsonObject("status"));
      if (!jsonObj.get("orderindex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderindex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderindex").toString()));
      }
      if (!jsonObj.get("date_created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_created").toString()));
      }
      if (!jsonObj.get("date_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_updated").toString()));
      }
      if (!jsonObj.get("date_closed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_closed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_closed").toString()));
      }
      // validate the required field `creator`
      Creator5.validateJsonObject(jsonObj.getAsJsonObject("creator"));
      // ensure the json data is an array
      if (!jsonObj.get("assignees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignees` to be an array in the JSON string but got `%s`", jsonObj.get("assignees").toString()));
      }

      JsonArray jsonArrayassignees = jsonObj.getAsJsonArray("assignees");
      // validate the required field `assignees` (array)
      for (int i = 0; i < jsonArrayassignees.size(); i++) {
        Assignees1.validateJsonObject(jsonArrayassignees.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("watchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchers` to be an array in the JSON string but got `%s`", jsonObj.get("watchers").toString()));
      }

      JsonArray jsonArraywatchers = jsonObj.getAsJsonArray("watchers");
      // validate the required field `watchers` (array)
      for (int i = 0; i < jsonArraywatchers.size(); i++) {
        Watchers1.validateJsonObject(jsonArraywatchers.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("checklists").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checklists` to be an array in the JSON string but got `%s`", jsonObj.get("checklists").toString()));
      }

      JsonArray jsonArraychecklists = jsonObj.getAsJsonArray("checklists");
      // validate the required field `checklists` (array)
      for (int i = 0; i < jsonArraychecklists.size(); i++) {
        Checklists6.validateJsonObject(jsonArraychecklists.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if (!jsonObj.get("due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_date").toString()));
      }
      if (!jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("custom_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
      }

      JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
      // validate the required field `custom_fields` (array)
      for (int i = 0; i < jsonArraycustomFields.size(); i++) {
        CustomFields9.validateJsonObject(jsonArraycustomFields.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("dependencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dependencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("linked_tasks") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("linked_tasks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linked_tasks` to be an array in the JSON string but got `%s`", jsonObj.get("linked_tasks").toString()));
      }
      if (!jsonObj.get("team_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("permission_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission_level").toString()));
      }
      // validate the required field `list`
      List2.validateJsonObject(jsonObj.getAsJsonObject("list"));
      // validate the required field `project`
      Project.validateJsonObject(jsonObj.getAsJsonObject("project"));
      // validate the required field `folder`
      Folder3.validateJsonObject(jsonObj.getAsJsonObject("folder"));
      // validate the required field `space`
      Space.validateJsonObject(jsonObj.getAsJsonObject("space"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Task3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Task3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Task3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Task3.class));

       return (TypeAdapter<T>) new TypeAdapter<Task3>() {
           @Override
           public void write(JsonWriter out, Task3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Task3 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Task3 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Task3 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Task3
  * @throws IOException if the JSON string is invalid with respect to Task3
  */
  public static Task3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Task3.class);
  }

 /**
  * Convert an instance of Task3 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

