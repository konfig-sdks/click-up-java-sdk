/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateChecklistItemrequest;
import com.konfigthis.client.model.CreateChecklistItemresponse;
import com.konfigthis.client.model.CreateChecklistrequest;
import com.konfigthis.client.model.CreateChecklistresponse;
import com.konfigthis.client.model.EditChecklistItemrequest;
import com.konfigthis.client.model.EditChecklistItemresponse;
import com.konfigthis.client.model.EditChecklistrequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskChecklistsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskChecklistsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskChecklistsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addLineItemCall(String checklistId, CreateChecklistItemrequest createChecklistItemrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChecklistItemrequest;

        // create path and map variables
        String localVarPath = "/checklist/{checklist_id}/checklist_item"
            .replace("{" + "checklist_id" + "}", localVarApiClient.escapeString(checklistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLineItemValidateBeforeCall(String checklistId, CreateChecklistItemrequest createChecklistItemrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checklistId' is set
        if (checklistId == null) {
            throw new ApiException("Missing the required parameter 'checklistId' when calling addLineItem(Async)");
        }

        // verify the required parameter 'createChecklistItemrequest' is set
        if (createChecklistItemrequest == null) {
            throw new ApiException("Missing the required parameter 'createChecklistItemrequest' when calling addLineItem(Async)");
        }

        return addLineItemCall(checklistId, createChecklistItemrequest, _callback);

    }


    private ApiResponse<CreateChecklistItemresponse> addLineItemWithHttpInfo(String checklistId, CreateChecklistItemrequest createChecklistItemrequest) throws ApiException {
        okhttp3.Call localVarCall = addLineItemValidateBeforeCall(checklistId, createChecklistItemrequest, null);
        Type localVarReturnType = new TypeToken<CreateChecklistItemresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addLineItemAsync(String checklistId, CreateChecklistItemrequest createChecklistItemrequest, final ApiCallback<CreateChecklistItemresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLineItemValidateBeforeCall(checklistId, createChecklistItemrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateChecklistItemresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddLineItemRequestBuilder {
        private final String checklistId;
        private String name;
        private Integer assignee;

        private AddLineItemRequestBuilder(String checklistId) {
            this.checklistId = checklistId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return AddLineItemRequestBuilder
         */
        public AddLineItemRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee  (optional)
         * @return AddLineItemRequestBuilder
         */
        public AddLineItemRequestBuilder assignee(Integer assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Build call for addLineItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChecklistItemrequest createChecklistItemrequest = buildBodyParams();
            return addLineItemCall(checklistId, createChecklistItemrequest, _callback);
        }

        private CreateChecklistItemrequest buildBodyParams() {
            CreateChecklistItemrequest createChecklistItemrequest = new CreateChecklistItemrequest();
            createChecklistItemrequest.name(this.name);
            createChecklistItemrequest.assignee(this.assignee);
            return createChecklistItemrequest;
        }

        /**
         * Execute addLineItem request
         * @return CreateChecklistItemresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateChecklistItemresponse execute() throws ApiException {
            CreateChecklistItemrequest createChecklistItemrequest = buildBodyParams();
            ApiResponse<CreateChecklistItemresponse> localVarResp = addLineItemWithHttpInfo(checklistId, createChecklistItemrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addLineItem request with HTTP info returned
         * @return ApiResponse&lt;CreateChecklistItemresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateChecklistItemresponse> executeWithHttpInfo() throws ApiException {
            CreateChecklistItemrequest createChecklistItemrequest = buildBodyParams();
            return addLineItemWithHttpInfo(checklistId, createChecklistItemrequest);
        }

        /**
         * Execute addLineItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateChecklistItemresponse> _callback) throws ApiException {
            CreateChecklistItemrequest createChecklistItemrequest = buildBodyParams();
            return addLineItemAsync(checklistId, createChecklistItemrequest, _callback);
        }
    }

    /**
     * Create Checklist Item
     * Add a line item to a task checklist.
     * @param checklistId b8a8-48d8-a0c6-b4200788a683 (uuid) (required)
     * @param createChecklistItemrequest  (required)
     * @return AddLineItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddLineItemRequestBuilder addLineItem(String checklistId) throws IllegalArgumentException {
        if (checklistId == null) throw new IllegalArgumentException("\"checklistId\" is required but got null");
            

        return new AddLineItemRequestBuilder(checklistId);
    }
    private okhttp3.Call createNewChecklistCall(String taskId, CreateChecklistrequest createChecklistrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChecklistrequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/checklist"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewChecklistValidateBeforeCall(String taskId, CreateChecklistrequest createChecklistrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createNewChecklist(Async)");
        }

        // verify the required parameter 'createChecklistrequest' is set
        if (createChecklistrequest == null) {
            throw new ApiException("Missing the required parameter 'createChecklistrequest' when calling createNewChecklist(Async)");
        }

        return createNewChecklistCall(taskId, createChecklistrequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<CreateChecklistresponse> createNewChecklistWithHttpInfo(String taskId, CreateChecklistrequest createChecklistrequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = createNewChecklistValidateBeforeCall(taskId, createChecklistrequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<CreateChecklistresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewChecklistAsync(String taskId, CreateChecklistrequest createChecklistrequest, Boolean customTaskIds, Double teamId, final ApiCallback<CreateChecklistresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewChecklistValidateBeforeCall(taskId, createChecklistrequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<CreateChecklistresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewChecklistRequestBuilder {
        private final String name;
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;

        private CreateNewChecklistRequestBuilder(String name, String taskId) {
            this.name = name;
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return CreateNewChecklistRequestBuilder
         */
        public CreateNewChecklistRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return CreateNewChecklistRequestBuilder
         */
        public CreateNewChecklistRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for createNewChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChecklistrequest createChecklistrequest = buildBodyParams();
            return createNewChecklistCall(taskId, createChecklistrequest, customTaskIds, teamId, _callback);
        }

        private CreateChecklistrequest buildBodyParams() {
            CreateChecklistrequest createChecklistrequest = new CreateChecklistrequest();
            createChecklistrequest.name(this.name);
            return createChecklistrequest;
        }

        /**
         * Execute createNewChecklist request
         * @return CreateChecklistresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateChecklistresponse execute() throws ApiException {
            CreateChecklistrequest createChecklistrequest = buildBodyParams();
            ApiResponse<CreateChecklistresponse> localVarResp = createNewChecklistWithHttpInfo(taskId, createChecklistrequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewChecklist request with HTTP info returned
         * @return ApiResponse&lt;CreateChecklistresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateChecklistresponse> executeWithHttpInfo() throws ApiException {
            CreateChecklistrequest createChecklistrequest = buildBodyParams();
            return createNewChecklistWithHttpInfo(taskId, createChecklistrequest, customTaskIds, teamId);
        }

        /**
         * Execute createNewChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateChecklistresponse> _callback) throws ApiException {
            CreateChecklistrequest createChecklistrequest = buildBodyParams();
            return createNewChecklistAsync(taskId, createChecklistrequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Create Checklist
     * Add a new checklist to a task.
     * @param taskId  (required)
     * @param createChecklistrequest  (required)
     * @return CreateNewChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewChecklistRequestBuilder createNewChecklist(String name, String taskId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new CreateNewChecklistRequestBuilder(name, taskId);
    }
    private okhttp3.Call removeChecklistCall(String checklistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklist/{checklist_id}"
            .replace("{" + "checklist_id" + "}", localVarApiClient.escapeString(checklistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChecklistValidateBeforeCall(String checklistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checklistId' is set
        if (checklistId == null) {
            throw new ApiException("Missing the required parameter 'checklistId' when calling removeChecklist(Async)");
        }

        return removeChecklistCall(checklistId, _callback);

    }


    private ApiResponse<Object> removeChecklistWithHttpInfo(String checklistId) throws ApiException {
        okhttp3.Call localVarCall = removeChecklistValidateBeforeCall(checklistId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeChecklistAsync(String checklistId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChecklistValidateBeforeCall(checklistId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveChecklistRequestBuilder {
        private final String checklistId;

        private RemoveChecklistRequestBuilder(String checklistId) {
            this.checklistId = checklistId;
        }

        /**
         * Build call for removeChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeChecklistCall(checklistId, _callback);
        }


        /**
         * Execute removeChecklist request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeChecklistWithHttpInfo(checklistId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeChecklist request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeChecklistWithHttpInfo(checklistId);
        }

        /**
         * Execute removeChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeChecklistAsync(checklistId, _callback);
        }
    }

    /**
     * Delete Checklist
     * Delete a checklist from a task.
     * @param checklistId b8a8-48d8-a0c6-b4200788a683 (uuid) (required)
     * @return RemoveChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveChecklistRequestBuilder removeChecklist(String checklistId) throws IllegalArgumentException {
        if (checklistId == null) throw new IllegalArgumentException("\"checklistId\" is required but got null");
            

        return new RemoveChecklistRequestBuilder(checklistId);
    }
    private okhttp3.Call removeChecklistItemCall(String checklistId, String checklistItemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checklist/{checklist_id}/checklist_item/{checklist_item_id}"
            .replace("{" + "checklist_id" + "}", localVarApiClient.escapeString(checklistId.toString()))
            .replace("{" + "checklist_item_id" + "}", localVarApiClient.escapeString(checklistItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChecklistItemValidateBeforeCall(String checklistId, String checklistItemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checklistId' is set
        if (checklistId == null) {
            throw new ApiException("Missing the required parameter 'checklistId' when calling removeChecklistItem(Async)");
        }

        // verify the required parameter 'checklistItemId' is set
        if (checklistItemId == null) {
            throw new ApiException("Missing the required parameter 'checklistItemId' when calling removeChecklistItem(Async)");
        }

        return removeChecklistItemCall(checklistId, checklistItemId, _callback);

    }


    private ApiResponse<Object> removeChecklistItemWithHttpInfo(String checklistId, String checklistItemId) throws ApiException {
        okhttp3.Call localVarCall = removeChecklistItemValidateBeforeCall(checklistId, checklistItemId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeChecklistItemAsync(String checklistId, String checklistItemId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChecklistItemValidateBeforeCall(checklistId, checklistItemId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveChecklistItemRequestBuilder {
        private final String checklistId;
        private final String checklistItemId;

        private RemoveChecklistItemRequestBuilder(String checklistId, String checklistItemId) {
            this.checklistId = checklistId;
            this.checklistItemId = checklistItemId;
        }

        /**
         * Build call for removeChecklistItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeChecklistItemCall(checklistId, checklistItemId, _callback);
        }


        /**
         * Execute removeChecklistItem request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeChecklistItemWithHttpInfo(checklistId, checklistItemId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeChecklistItem request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeChecklistItemWithHttpInfo(checklistId, checklistItemId);
        }

        /**
         * Execute removeChecklistItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeChecklistItemAsync(checklistId, checklistItemId, _callback);
        }
    }

    /**
     * Delete Checklist Item
     * Delete a line item from a task checklist.
     * @param checklistId b8a8-48d8-a0c6-b4200788a683 (uuid) (required)
     * @param checklistItemId e491-47f5-9fd8-d1dc4cedcc6f (uuid) (required)
     * @return RemoveChecklistItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveChecklistItemRequestBuilder removeChecklistItem(String checklistId, String checklistItemId) throws IllegalArgumentException {
        if (checklistId == null) throw new IllegalArgumentException("\"checklistId\" is required but got null");
            

        if (checklistItemId == null) throw new IllegalArgumentException("\"checklistItemId\" is required but got null");
            

        return new RemoveChecklistItemRequestBuilder(checklistId, checklistItemId);
    }
    private okhttp3.Call updateChecklistCall(String checklistId, EditChecklistrequest editChecklistrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editChecklistrequest;

        // create path and map variables
        String localVarPath = "/checklist/{checklist_id}"
            .replace("{" + "checklist_id" + "}", localVarApiClient.escapeString(checklistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChecklistValidateBeforeCall(String checklistId, EditChecklistrequest editChecklistrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checklistId' is set
        if (checklistId == null) {
            throw new ApiException("Missing the required parameter 'checklistId' when calling updateChecklist(Async)");
        }

        // verify the required parameter 'editChecklistrequest' is set
        if (editChecklistrequest == null) {
            throw new ApiException("Missing the required parameter 'editChecklistrequest' when calling updateChecklist(Async)");
        }

        return updateChecklistCall(checklistId, editChecklistrequest, _callback);

    }


    private ApiResponse<Object> updateChecklistWithHttpInfo(String checklistId, EditChecklistrequest editChecklistrequest) throws ApiException {
        okhttp3.Call localVarCall = updateChecklistValidateBeforeCall(checklistId, editChecklistrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateChecklistAsync(String checklistId, EditChecklistrequest editChecklistrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChecklistValidateBeforeCall(checklistId, editChecklistrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateChecklistRequestBuilder {
        private final String checklistId;
        private String name;
        private Integer position;

        private UpdateChecklistRequestBuilder(String checklistId) {
            this.checklistId = checklistId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateChecklistRequestBuilder
         */
        public UpdateChecklistRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set position
         * @param position Position refers to the order of appearance of checklists on a task.\\\\  \\\\ To set a checklist to appear at the top of the checklists section of a task, use &#x60;\\\&quot;position\\\&quot;: 0&#x60;. (optional)
         * @return UpdateChecklistRequestBuilder
         */
        public UpdateChecklistRequestBuilder position(Integer position) {
            this.position = position;
            return this;
        }
        
        /**
         * Build call for updateChecklist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditChecklistrequest editChecklistrequest = buildBodyParams();
            return updateChecklistCall(checklistId, editChecklistrequest, _callback);
        }

        private EditChecklistrequest buildBodyParams() {
            EditChecklistrequest editChecklistrequest = new EditChecklistrequest();
            editChecklistrequest.name(this.name);
            editChecklistrequest.position(this.position);
            return editChecklistrequest;
        }

        /**
         * Execute updateChecklist request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            EditChecklistrequest editChecklistrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateChecklistWithHttpInfo(checklistId, editChecklistrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateChecklist request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            EditChecklistrequest editChecklistrequest = buildBodyParams();
            return updateChecklistWithHttpInfo(checklistId, editChecklistrequest);
        }

        /**
         * Execute updateChecklist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            EditChecklistrequest editChecklistrequest = buildBodyParams();
            return updateChecklistAsync(checklistId, editChecklistrequest, _callback);
        }
    }

    /**
     * Edit Checklist
     * Rename a task checklist, or reorder a checklist so it appears above or below other checklists on a task.
     * @param checklistId b8a8-48d8-a0c6-b4200788a683 (uuid) (required)
     * @param editChecklistrequest  (required)
     * @return UpdateChecklistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChecklistRequestBuilder updateChecklist(String checklistId) throws IllegalArgumentException {
        if (checklistId == null) throw new IllegalArgumentException("\"checklistId\" is required but got null");
            

        return new UpdateChecklistRequestBuilder(checklistId);
    }
    private okhttp3.Call updateChecklistItemCall(String checklistId, String checklistItemId, EditChecklistItemrequest editChecklistItemrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editChecklistItemrequest;

        // create path and map variables
        String localVarPath = "/checklist/{checklist_id}/checklist_item/{checklist_item_id}"
            .replace("{" + "checklist_id" + "}", localVarApiClient.escapeString(checklistId.toString()))
            .replace("{" + "checklist_item_id" + "}", localVarApiClient.escapeString(checklistItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChecklistItemValidateBeforeCall(String checklistId, String checklistItemId, EditChecklistItemrequest editChecklistItemrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checklistId' is set
        if (checklistId == null) {
            throw new ApiException("Missing the required parameter 'checklistId' when calling updateChecklistItem(Async)");
        }

        // verify the required parameter 'checklistItemId' is set
        if (checklistItemId == null) {
            throw new ApiException("Missing the required parameter 'checklistItemId' when calling updateChecklistItem(Async)");
        }

        // verify the required parameter 'editChecklistItemrequest' is set
        if (editChecklistItemrequest == null) {
            throw new ApiException("Missing the required parameter 'editChecklistItemrequest' when calling updateChecklistItem(Async)");
        }

        return updateChecklistItemCall(checklistId, checklistItemId, editChecklistItemrequest, _callback);

    }


    private ApiResponse<EditChecklistItemresponse> updateChecklistItemWithHttpInfo(String checklistId, String checklistItemId, EditChecklistItemrequest editChecklistItemrequest) throws ApiException {
        okhttp3.Call localVarCall = updateChecklistItemValidateBeforeCall(checklistId, checklistItemId, editChecklistItemrequest, null);
        Type localVarReturnType = new TypeToken<EditChecklistItemresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateChecklistItemAsync(String checklistId, String checklistItemId, EditChecklistItemrequest editChecklistItemrequest, final ApiCallback<EditChecklistItemresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChecklistItemValidateBeforeCall(checklistId, checklistItemId, editChecklistItemrequest, _callback);
        Type localVarReturnType = new TypeToken<EditChecklistItemresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateChecklistItemRequestBuilder {
        private final String checklistId;
        private final String checklistItemId;
        private String name;
        private Object assignee;
        private Boolean resolved;
        private Object parent;

        private UpdateChecklistItemRequestBuilder(String checklistId, String checklistItemId) {
            this.checklistId = checklistId;
            this.checklistItemId = checklistItemId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateChecklistItemRequestBuilder
         */
        public UpdateChecklistItemRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee  (optional)
         * @return UpdateChecklistItemRequestBuilder
         */
        public UpdateChecklistItemRequestBuilder assignee(Object assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set resolved
         * @param resolved  (optional)
         * @return UpdateChecklistItemRequestBuilder
         */
        public UpdateChecklistItemRequestBuilder resolved(Boolean resolved) {
            this.resolved = resolved;
            return this;
        }
        
        /**
         * Set parent
         * @param parent To nest a checklist item under another checklist item, include the other item&#39;s &#x60;checklist_item_id&#x60;. (optional)
         * @return UpdateChecklistItemRequestBuilder
         */
        public UpdateChecklistItemRequestBuilder parent(Object parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Build call for updateChecklistItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditChecklistItemrequest editChecklistItemrequest = buildBodyParams();
            return updateChecklistItemCall(checklistId, checklistItemId, editChecklistItemrequest, _callback);
        }

        private EditChecklistItemrequest buildBodyParams() {
            EditChecklistItemrequest editChecklistItemrequest = new EditChecklistItemrequest();
            editChecklistItemrequest.name(this.name);
            editChecklistItemrequest.assignee(this.assignee);
            editChecklistItemrequest.resolved(this.resolved);
            editChecklistItemrequest.parent(this.parent);
            return editChecklistItemrequest;
        }

        /**
         * Execute updateChecklistItem request
         * @return EditChecklistItemresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EditChecklistItemresponse execute() throws ApiException {
            EditChecklistItemrequest editChecklistItemrequest = buildBodyParams();
            ApiResponse<EditChecklistItemresponse> localVarResp = updateChecklistItemWithHttpInfo(checklistId, checklistItemId, editChecklistItemrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateChecklistItem request with HTTP info returned
         * @return ApiResponse&lt;EditChecklistItemresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditChecklistItemresponse> executeWithHttpInfo() throws ApiException {
            EditChecklistItemrequest editChecklistItemrequest = buildBodyParams();
            return updateChecklistItemWithHttpInfo(checklistId, checklistItemId, editChecklistItemrequest);
        }

        /**
         * Execute updateChecklistItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditChecklistItemresponse> _callback) throws ApiException {
            EditChecklistItemrequest editChecklistItemrequest = buildBodyParams();
            return updateChecklistItemAsync(checklistId, checklistItemId, editChecklistItemrequest, _callback);
        }
    }

    /**
     * Edit Checklist Item
     * Update an individual line item in a task checklist. \\  \\ You can rename it, set the assignee, mark it as resolved, or nest it under another checklist item.
     * @param checklistId b8a8-48d8-a0c6-b4200788a683 (uuid) (required)
     * @param checklistItemId e491-47f5-9fd8-d1dc4cedcc6f (uuid) (required)
     * @param editChecklistItemrequest  (required)
     * @return UpdateChecklistItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChecklistItemRequestBuilder updateChecklistItem(String checklistId, String checklistItemId) throws IllegalArgumentException {
        if (checklistId == null) throw new IllegalArgumentException("\"checklistId\" is required but got null");
            

        if (checklistItemId == null) throw new IllegalArgumentException("\"checklistItemId\" is required but got null");
            

        return new UpdateChecklistItemRequestBuilder(checklistId, checklistItemId);
    }
}
