/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateFolderrequest;
import com.konfigthis.client.model.CreateFolderresponse;
import com.konfigthis.client.model.GetFolderresponse;
import com.konfigthis.client.model.GetFoldersresponse;
import com.konfigthis.client.model.UpdateFolderrequest;
import com.konfigthis.client.model.UpdateFolderresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewFolderCall(Double spaceId, CreateFolderrequest createFolderrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFolderrequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}/folder"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFolderValidateBeforeCall(Double spaceId, CreateFolderrequest createFolderrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createNewFolder(Async)");
        }

        // verify the required parameter 'createFolderrequest' is set
        if (createFolderrequest == null) {
            throw new ApiException("Missing the required parameter 'createFolderrequest' when calling createNewFolder(Async)");
        }

        return createNewFolderCall(spaceId, createFolderrequest, _callback);

    }


    private ApiResponse<CreateFolderresponse> createNewFolderWithHttpInfo(Double spaceId, CreateFolderrequest createFolderrequest) throws ApiException {
        okhttp3.Call localVarCall = createNewFolderValidateBeforeCall(spaceId, createFolderrequest, null);
        Type localVarReturnType = new TypeToken<CreateFolderresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFolderAsync(Double spaceId, CreateFolderrequest createFolderrequest, final ApiCallback<CreateFolderresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFolderValidateBeforeCall(spaceId, createFolderrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFolderresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFolderRequestBuilder {
        private final String name;
        private final Double spaceId;

        private CreateNewFolderRequestBuilder(String name, double spaceId) {
            this.name = name;
            this.spaceId = spaceId;
        }

        /**
         * Build call for createNewFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateFolderrequest createFolderrequest = buildBodyParams();
            return createNewFolderCall(spaceId, createFolderrequest, _callback);
        }

        private CreateFolderrequest buildBodyParams() {
            CreateFolderrequest createFolderrequest = new CreateFolderrequest();
            createFolderrequest.name(this.name);
            return createFolderrequest;
        }

        /**
         * Execute createNewFolder request
         * @return CreateFolderresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateFolderresponse execute() throws ApiException {
            CreateFolderrequest createFolderrequest = buildBodyParams();
            ApiResponse<CreateFolderresponse> localVarResp = createNewFolderWithHttpInfo(spaceId, createFolderrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFolder request with HTTP info returned
         * @return ApiResponse&lt;CreateFolderresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFolderresponse> executeWithHttpInfo() throws ApiException {
            CreateFolderrequest createFolderrequest = buildBodyParams();
            return createNewFolderWithHttpInfo(spaceId, createFolderrequest);
        }

        /**
         * Execute createNewFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFolderresponse> _callback) throws ApiException {
            CreateFolderrequest createFolderrequest = buildBodyParams();
            return createNewFolderAsync(spaceId, createFolderrequest, _callback);
        }
    }

    /**
     * Create Folder
     * Add a new Folder to a Space.
     * @param spaceId  (required)
     * @param createFolderrequest  (required)
     * @return CreateNewFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFolderRequestBuilder createNewFolder(String name, double spaceId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new CreateNewFolderRequestBuilder(name, spaceId);
    }
    private okhttp3.Call getContentsOfCall(Double spaceId, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/space/{space_id}/folder"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentsOfValidateBeforeCall(Double spaceId, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getContentsOf(Async)");
        }

        return getContentsOfCall(spaceId, archived, _callback);

    }


    private ApiResponse<GetFoldersresponse> getContentsOfWithHttpInfo(Double spaceId, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getContentsOfValidateBeforeCall(spaceId, archived, null);
        Type localVarReturnType = new TypeToken<GetFoldersresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentsOfAsync(Double spaceId, Boolean archived, final ApiCallback<GetFoldersresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentsOfValidateBeforeCall(spaceId, archived, _callback);
        Type localVarReturnType = new TypeToken<GetFoldersresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentsOfRequestBuilder {
        private final Double spaceId;
        private Boolean archived;

        private GetContentsOfRequestBuilder(double spaceId) {
            this.spaceId = spaceId;
        }

        /**
         * Set archived
         * @param archived  (optional)
         * @return GetContentsOfRequestBuilder
         */
        public GetContentsOfRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Build call for getContentsOf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentsOfCall(spaceId, archived, _callback);
        }


        /**
         * Execute getContentsOf request
         * @return GetFoldersresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetFoldersresponse execute() throws ApiException {
            ApiResponse<GetFoldersresponse> localVarResp = getContentsOfWithHttpInfo(spaceId, archived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentsOf request with HTTP info returned
         * @return ApiResponse&lt;GetFoldersresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFoldersresponse> executeWithHttpInfo() throws ApiException {
            return getContentsOfWithHttpInfo(spaceId, archived);
        }

        /**
         * Execute getContentsOf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFoldersresponse> _callback) throws ApiException {
            return getContentsOfAsync(spaceId, archived, _callback);
        }
    }

    /**
     * Get Folders
     * View the Folders in a Space.
     * @param spaceId  (required)
     * @return GetContentsOfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetContentsOfRequestBuilder getContentsOf(double spaceId) throws IllegalArgumentException {
        
        return new GetContentsOfRequestBuilder(spaceId);
    }
    private okhttp3.Call getFolderContentCall(Double folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderContentValidateBeforeCall(Double folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderContent(Async)");
        }

        return getFolderContentCall(folderId, _callback);

    }


    private ApiResponse<GetFolderresponse> getFolderContentWithHttpInfo(Double folderId) throws ApiException {
        okhttp3.Call localVarCall = getFolderContentValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<GetFolderresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderContentAsync(Double folderId, final ApiCallback<GetFolderresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderContentValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<GetFolderresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderContentRequestBuilder {
        private final Double folderId;

        private GetFolderContentRequestBuilder(double folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for getFolderContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderContentCall(folderId, _callback);
        }


        /**
         * Execute getFolderContent request
         * @return GetFolderresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetFolderresponse execute() throws ApiException {
            ApiResponse<GetFolderresponse> localVarResp = getFolderContentWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderContent request with HTTP info returned
         * @return ApiResponse&lt;GetFolderresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFolderresponse> executeWithHttpInfo() throws ApiException {
            return getFolderContentWithHttpInfo(folderId);
        }

        /**
         * Execute getFolderContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFolderresponse> _callback) throws ApiException {
            return getFolderContentAsync(folderId, _callback);
        }
    }

    /**
     * Get Folder
     * View the Lists within a Folder.
     * @param folderId  (required)
     * @return GetFolderContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderContentRequestBuilder getFolderContent(double folderId) throws IllegalArgumentException {
        
        return new GetFolderContentRequestBuilder(folderId);
    }
    private okhttp3.Call removeFolderCall(Double folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFolderValidateBeforeCall(Double folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling removeFolder(Async)");
        }

        return removeFolderCall(folderId, _callback);

    }


    private ApiResponse<Object> removeFolderWithHttpInfo(Double folderId) throws ApiException {
        okhttp3.Call localVarCall = removeFolderValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFolderAsync(Double folderId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFolderValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFolderRequestBuilder {
        private final Double folderId;

        private RemoveFolderRequestBuilder(double folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for removeFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFolderCall(folderId, _callback);
        }


        /**
         * Execute removeFolder request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeFolderWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFolder request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeFolderWithHttpInfo(folderId);
        }

        /**
         * Execute removeFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeFolderAsync(folderId, _callback);
        }
    }

    /**
     * Delete Folder
     * Delete a Folder from your Workspace.
     * @param folderId  (required)
     * @return RemoveFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFolderRequestBuilder removeFolder(double folderId) throws IllegalArgumentException {
        
        return new RemoveFolderRequestBuilder(folderId);
    }
    private okhttp3.Call renameFolderCall(Double folderId, UpdateFolderrequest updateFolderrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFolderrequest;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameFolderValidateBeforeCall(Double folderId, UpdateFolderrequest updateFolderrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling renameFolder(Async)");
        }

        // verify the required parameter 'updateFolderrequest' is set
        if (updateFolderrequest == null) {
            throw new ApiException("Missing the required parameter 'updateFolderrequest' when calling renameFolder(Async)");
        }

        return renameFolderCall(folderId, updateFolderrequest, _callback);

    }


    private ApiResponse<UpdateFolderresponse> renameFolderWithHttpInfo(Double folderId, UpdateFolderrequest updateFolderrequest) throws ApiException {
        okhttp3.Call localVarCall = renameFolderValidateBeforeCall(folderId, updateFolderrequest, null);
        Type localVarReturnType = new TypeToken<UpdateFolderresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameFolderAsync(Double folderId, UpdateFolderrequest updateFolderrequest, final ApiCallback<UpdateFolderresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameFolderValidateBeforeCall(folderId, updateFolderrequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateFolderresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameFolderRequestBuilder {
        private final String name;
        private final Double folderId;

        private RenameFolderRequestBuilder(String name, double folderId) {
            this.name = name;
            this.folderId = folderId;
        }

        /**
         * Build call for renameFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateFolderrequest updateFolderrequest = buildBodyParams();
            return renameFolderCall(folderId, updateFolderrequest, _callback);
        }

        private UpdateFolderrequest buildBodyParams() {
            UpdateFolderrequest updateFolderrequest = new UpdateFolderrequest();
            updateFolderrequest.name(this.name);
            return updateFolderrequest;
        }

        /**
         * Execute renameFolder request
         * @return UpdateFolderresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateFolderresponse execute() throws ApiException {
            UpdateFolderrequest updateFolderrequest = buildBodyParams();
            ApiResponse<UpdateFolderresponse> localVarResp = renameFolderWithHttpInfo(folderId, updateFolderrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameFolder request with HTTP info returned
         * @return ApiResponse&lt;UpdateFolderresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateFolderresponse> executeWithHttpInfo() throws ApiException {
            UpdateFolderrequest updateFolderrequest = buildBodyParams();
            return renameFolderWithHttpInfo(folderId, updateFolderrequest);
        }

        /**
         * Execute renameFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateFolderresponse> _callback) throws ApiException {
            UpdateFolderrequest updateFolderrequest = buildBodyParams();
            return renameFolderAsync(folderId, updateFolderrequest, _callback);
        }
    }

    /**
     * Update Folder
     * Rename a Folder.
     * @param folderId  (required)
     * @param updateFolderrequest  (required)
     * @return RenameFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RenameFolderRequestBuilder renameFolder(String name, double folderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new RenameFolderRequestBuilder(name, folderId);
    }
}
