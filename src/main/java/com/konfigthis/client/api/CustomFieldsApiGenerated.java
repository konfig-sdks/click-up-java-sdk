/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GetAccessibleCustomFieldsresponse;
import com.konfigthis.client.model.SetCustomFieldValuerequest;
import com.konfigthis.client.model.SetCustomFieldValuerequestValueOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getListFieldsCall(Double listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/field"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListFieldsValidateBeforeCall(Double listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListFields(Async)");
        }

        return getListFieldsCall(listId, _callback);

    }


    private ApiResponse<GetAccessibleCustomFieldsresponse> getListFieldsWithHttpInfo(Double listId) throws ApiException {
        okhttp3.Call localVarCall = getListFieldsValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<GetAccessibleCustomFieldsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListFieldsAsync(Double listId, final ApiCallback<GetAccessibleCustomFieldsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListFieldsValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<GetAccessibleCustomFieldsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListFieldsRequestBuilder {
        private final Double listId;

        private GetListFieldsRequestBuilder(double listId) {
            this.listId = listId;
        }

        /**
         * Build call for getListFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListFieldsCall(listId, _callback);
        }


        /**
         * Execute getListFields request
         * @return GetAccessibleCustomFieldsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetAccessibleCustomFieldsresponse execute() throws ApiException {
            ApiResponse<GetAccessibleCustomFieldsresponse> localVarResp = getListFieldsWithHttpInfo(listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListFields request with HTTP info returned
         * @return ApiResponse&lt;GetAccessibleCustomFieldsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAccessibleCustomFieldsresponse> executeWithHttpInfo() throws ApiException {
            return getListFieldsWithHttpInfo(listId);
        }

        /**
         * Execute getListFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAccessibleCustomFieldsresponse> _callback) throws ApiException {
            return getListFieldsAsync(listId, _callback);
        }
    }

    /**
     * Get Accessible Custom Fields
     * View the Custom Fields available on tasks in a specific List.
     * @param listId  (required)
     * @return GetListFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListFieldsRequestBuilder getListFields(double listId) throws IllegalArgumentException {
        
        return new GetListFieldsRequestBuilder(listId);
    }
    private okhttp3.Call removeFieldValueCall(String taskId, String fieldId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/field/{field_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "field_id" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFieldValueValidateBeforeCall(String taskId, String fieldId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeFieldValue(Async)");
        }

        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling removeFieldValue(Async)");
        }

        return removeFieldValueCall(taskId, fieldId, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> removeFieldValueWithHttpInfo(String taskId, String fieldId, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = removeFieldValueValidateBeforeCall(taskId, fieldId, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFieldValueAsync(String taskId, String fieldId, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFieldValueValidateBeforeCall(taskId, fieldId, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFieldValueRequestBuilder {
        private final String taskId;
        private final String fieldId;
        private Boolean customTaskIds;
        private Double teamId;

        private RemoveFieldValueRequestBuilder(String taskId, String fieldId) {
            this.taskId = taskId;
            this.fieldId = fieldId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RemoveFieldValueRequestBuilder
         */
        public RemoveFieldValueRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RemoveFieldValueRequestBuilder
         */
        public RemoveFieldValueRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for removeFieldValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFieldValueCall(taskId, fieldId, customTaskIds, teamId, _callback);
        }


        /**
         * Execute removeFieldValue request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeFieldValueWithHttpInfo(taskId, fieldId, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFieldValue request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeFieldValueWithHttpInfo(taskId, fieldId, customTaskIds, teamId);
        }

        /**
         * Execute removeFieldValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeFieldValueAsync(taskId, fieldId, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Remove Custom Field Value
     * Remove the data from a Custom Field on a task. This does not delete the option from the Custom Field.
     * @param taskId  (required)
     * @param fieldId b8a8-48d8-a0c6-b4200788a683 (uuid) (required)
     * @return RemoveFieldValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFieldValueRequestBuilder removeFieldValue(String taskId, String fieldId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new RemoveFieldValueRequestBuilder(taskId, fieldId);
    }
    private okhttp3.Call setFieldValueCall(String taskId, String fieldId, SetCustomFieldValuerequest setCustomFieldValuerequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setCustomFieldValuerequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/field/{field_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "field_id" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setFieldValueValidateBeforeCall(String taskId, String fieldId, SetCustomFieldValuerequest setCustomFieldValuerequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling setFieldValue(Async)");
        }

        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling setFieldValue(Async)");
        }

        // verify the required parameter 'setCustomFieldValuerequest' is set
        if (setCustomFieldValuerequest == null) {
            throw new ApiException("Missing the required parameter 'setCustomFieldValuerequest' when calling setFieldValue(Async)");
        }

        return setFieldValueCall(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> setFieldValueWithHttpInfo(String taskId, String fieldId, SetCustomFieldValuerequest setCustomFieldValuerequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = setFieldValueValidateBeforeCall(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setFieldValueAsync(String taskId, String fieldId, SetCustomFieldValuerequest setCustomFieldValuerequest, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setFieldValueValidateBeforeCall(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetFieldValueRequestBuilder {
        private final String taskId;
        private final String fieldId;
        private Object value;
        private SetCustomFieldValuerequestValueOptions valueOptions;
        private Boolean customTaskIds;
        private Double teamId;

        private SetFieldValueRequestBuilder(String taskId, String fieldId) {
            this.taskId = taskId;
            this.fieldId = fieldId;
        }

        /**
         * Set value
         * @param value  (optional)
         * @return SetFieldValueRequestBuilder
         */
        public SetFieldValueRequestBuilder value(Object value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set valueOptions
         * @param valueOptions  (optional)
         * @return SetFieldValueRequestBuilder
         */
        public SetFieldValueRequestBuilder valueOptions(SetCustomFieldValuerequestValueOptions valueOptions) {
            this.valueOptions = valueOptions;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by its Custom Task ID, this value must be &#x60;true&#x60;. (optional)
         * @return SetFieldValueRequestBuilder
         */
        public SetFieldValueRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return SetFieldValueRequestBuilder
         */
        public SetFieldValueRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for setFieldValue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SetCustomFieldValuerequest setCustomFieldValuerequest = buildBodyParams();
            return setFieldValueCall(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId, _callback);
        }

        private SetCustomFieldValuerequest buildBodyParams() {
            SetCustomFieldValuerequest setCustomFieldValuerequest = new SetCustomFieldValuerequest();
            setCustomFieldValuerequest.value(this.value);
            setCustomFieldValuerequest.valueOptions(this.valueOptions);
            return setCustomFieldValuerequest;
        }

        /**
         * Execute setFieldValue request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            SetCustomFieldValuerequest setCustomFieldValuerequest = buildBodyParams();
            ApiResponse<Object> localVarResp = setFieldValueWithHttpInfo(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setFieldValue request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            SetCustomFieldValuerequest setCustomFieldValuerequest = buildBodyParams();
            return setFieldValueWithHttpInfo(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId);
        }

        /**
         * Execute setFieldValue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            SetCustomFieldValuerequest setCustomFieldValuerequest = buildBodyParams();
            return setFieldValueAsync(taskId, fieldId, setCustomFieldValuerequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Set Custom Field Value
     * Add data to a Custom field on a task. \\  \\ You&#39;ll need to know the &#x60;task_id&#x60; of the task you want to update, and the universal unique identifier (UUID) &#x60;field_id&#x60; of the Custom Field you want to set. \\  \\ You can use [Get Accessible Custom Fields](https://clickup.com/api) or the [Get Task](https://clickup.com/api) endpoint to find the &#x60;field_id&#x60;.
     * @param taskId Enter the task ID of the task you want to update. (required)
     * @param fieldId Enter the universal unique identifier (UUID) of the Custom Field you want to set. (required)
     * @param setCustomFieldValuerequest  (required)
     * @return SetFieldValueRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SetFieldValueRequestBuilder setFieldValue(String taskId, String fieldId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new SetFieldValueRequestBuilder(taskId, fieldId);
    }
}
