/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Columns;
import com.konfigthis.client.model.CreateFolderViewrequest;
import com.konfigthis.client.model.CreateFolderViewresponse;
import com.konfigthis.client.model.CreateListViewrequest;
import com.konfigthis.client.model.CreateListViewresponse;
import com.konfigthis.client.model.CreateSpaceViewrequest;
import com.konfigthis.client.model.CreateSpaceViewresponse;
import com.konfigthis.client.model.CreateTeamViewrequest;
import com.konfigthis.client.model.CreateTeamViewresponse;
import com.konfigthis.client.model.Divide;
import com.konfigthis.client.model.Filters;
import com.konfigthis.client.model.GetFolderViewsresponse;
import com.konfigthis.client.model.GetListViewsresponse;
import com.konfigthis.client.model.GetSpaceViewsresponse;
import com.konfigthis.client.model.GetTeamViewsresponse;
import com.konfigthis.client.model.GetViewTasksresponse;
import com.konfigthis.client.model.GetViewresponse;
import com.konfigthis.client.model.Grouping;
import com.konfigthis.client.model.Parent;
import com.konfigthis.client.model.Settings;
import com.konfigthis.client.model.Sorting;
import com.konfigthis.client.model.TeamSidebar;
import com.konfigthis.client.model.UpdateViewrequest;
import com.konfigthis.client.model.UpdateViewresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ViewsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ViewsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ViewsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addViewToFolderCall(Double folderId, CreateFolderViewrequest createFolderViewrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFolderViewrequest;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}/view"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addViewToFolderValidateBeforeCall(Double folderId, CreateFolderViewrequest createFolderViewrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling addViewToFolder(Async)");
        }

        // verify the required parameter 'createFolderViewrequest' is set
        if (createFolderViewrequest == null) {
            throw new ApiException("Missing the required parameter 'createFolderViewrequest' when calling addViewToFolder(Async)");
        }

        return addViewToFolderCall(folderId, createFolderViewrequest, _callback);

    }


    private ApiResponse<CreateFolderViewresponse> addViewToFolderWithHttpInfo(Double folderId, CreateFolderViewrequest createFolderViewrequest) throws ApiException {
        okhttp3.Call localVarCall = addViewToFolderValidateBeforeCall(folderId, createFolderViewrequest, null);
        Type localVarReturnType = new TypeToken<CreateFolderViewresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addViewToFolderAsync(Double folderId, CreateFolderViewrequest createFolderViewrequest, final ApiCallback<CreateFolderViewresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addViewToFolderValidateBeforeCall(folderId, createFolderViewrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFolderViewresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddViewToFolderRequestBuilder {
        private final String name;
        private final String type;
        private final Grouping grouping;
        private final Divide divide;
        private final Sorting sorting;
        private final Filters filters;
        private final Columns columns;
        private final TeamSidebar teamSidebar;
        private final Settings settings;
        private final Double folderId;

        private AddViewToFolderRequestBuilder(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double folderId) {
            this.name = name;
            this.type = type;
            this.grouping = grouping;
            this.divide = divide;
            this.sorting = sorting;
            this.filters = filters;
            this.columns = columns;
            this.teamSidebar = teamSidebar;
            this.settings = settings;
            this.folderId = folderId;
        }

        /**
         * Build call for addViewToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateFolderViewrequest createFolderViewrequest = buildBodyParams();
            return addViewToFolderCall(folderId, createFolderViewrequest, _callback);
        }

        private CreateFolderViewrequest buildBodyParams() {
            CreateFolderViewrequest createFolderViewrequest = new CreateFolderViewrequest();
            createFolderViewrequest.name(this.name);
            createFolderViewrequest.type(this.type);
            createFolderViewrequest.grouping(this.grouping);
            createFolderViewrequest.divide(this.divide);
            createFolderViewrequest.sorting(this.sorting);
            createFolderViewrequest.filters(this.filters);
            createFolderViewrequest.columns(this.columns);
            createFolderViewrequest.teamSidebar(this.teamSidebar);
            createFolderViewrequest.settings(this.settings);
            return createFolderViewrequest;
        }

        /**
         * Execute addViewToFolder request
         * @return CreateFolderViewresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateFolderViewresponse execute() throws ApiException {
            CreateFolderViewrequest createFolderViewrequest = buildBodyParams();
            ApiResponse<CreateFolderViewresponse> localVarResp = addViewToFolderWithHttpInfo(folderId, createFolderViewrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addViewToFolder request with HTTP info returned
         * @return ApiResponse&lt;CreateFolderViewresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFolderViewresponse> executeWithHttpInfo() throws ApiException {
            CreateFolderViewrequest createFolderViewrequest = buildBodyParams();
            return addViewToFolderWithHttpInfo(folderId, createFolderViewrequest);
        }

        /**
         * Execute addViewToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFolderViewresponse> _callback) throws ApiException {
            CreateFolderViewrequest createFolderViewrequest = buildBodyParams();
            return addViewToFolderAsync(folderId, createFolderViewrequest, _callback);
        }
    }

    /**
     * Create Folder View
     * Add a List, Board, Calendar, Table, Timeline, Workload, Activity, Map, Chat, or Gantt view to a Folder.
     * @param folderId  (required)
     * @param createFolderViewrequest  (required)
     * @return AddViewToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddViewToFolderRequestBuilder addViewToFolder(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double folderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (grouping == null) throw new IllegalArgumentException("\"grouping\" is required but got null");
        if (divide == null) throw new IllegalArgumentException("\"divide\" is required but got null");
        if (sorting == null) throw new IllegalArgumentException("\"sorting\" is required but got null");
        if (filters == null) throw new IllegalArgumentException("\"filters\" is required but got null");
        if (columns == null) throw new IllegalArgumentException("\"columns\" is required but got null");
        if (teamSidebar == null) throw new IllegalArgumentException("\"teamSidebar\" is required but got null");
        if (settings == null) throw new IllegalArgumentException("\"settings\" is required but got null");
        
        return new AddViewToFolderRequestBuilder(name, type, grouping, divide, sorting, filters, columns, teamSidebar, settings, folderId);
    }
    private okhttp3.Call addViewToListCall(Double listId, CreateListViewrequest createListViewrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createListViewrequest;

        // create path and map variables
        String localVarPath = "/list/{list_id}/view"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addViewToListValidateBeforeCall(Double listId, CreateListViewrequest createListViewrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addViewToList(Async)");
        }

        // verify the required parameter 'createListViewrequest' is set
        if (createListViewrequest == null) {
            throw new ApiException("Missing the required parameter 'createListViewrequest' when calling addViewToList(Async)");
        }

        return addViewToListCall(listId, createListViewrequest, _callback);

    }


    private ApiResponse<CreateListViewresponse> addViewToListWithHttpInfo(Double listId, CreateListViewrequest createListViewrequest) throws ApiException {
        okhttp3.Call localVarCall = addViewToListValidateBeforeCall(listId, createListViewrequest, null);
        Type localVarReturnType = new TypeToken<CreateListViewresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addViewToListAsync(Double listId, CreateListViewrequest createListViewrequest, final ApiCallback<CreateListViewresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addViewToListValidateBeforeCall(listId, createListViewrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateListViewresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddViewToListRequestBuilder {
        private final String name;
        private final String type;
        private final Grouping grouping;
        private final Divide divide;
        private final Sorting sorting;
        private final Filters filters;
        private final Columns columns;
        private final TeamSidebar teamSidebar;
        private final Settings settings;
        private final Double listId;

        private AddViewToListRequestBuilder(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double listId) {
            this.name = name;
            this.type = type;
            this.grouping = grouping;
            this.divide = divide;
            this.sorting = sorting;
            this.filters = filters;
            this.columns = columns;
            this.teamSidebar = teamSidebar;
            this.settings = settings;
            this.listId = listId;
        }

        /**
         * Build call for addViewToList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateListViewrequest createListViewrequest = buildBodyParams();
            return addViewToListCall(listId, createListViewrequest, _callback);
        }

        private CreateListViewrequest buildBodyParams() {
            CreateListViewrequest createListViewrequest = new CreateListViewrequest();
            createListViewrequest.name(this.name);
            createListViewrequest.type(this.type);
            createListViewrequest.grouping(this.grouping);
            createListViewrequest.divide(this.divide);
            createListViewrequest.sorting(this.sorting);
            createListViewrequest.filters(this.filters);
            createListViewrequest.columns(this.columns);
            createListViewrequest.teamSidebar(this.teamSidebar);
            createListViewrequest.settings(this.settings);
            return createListViewrequest;
        }

        /**
         * Execute addViewToList request
         * @return CreateListViewresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateListViewresponse execute() throws ApiException {
            CreateListViewrequest createListViewrequest = buildBodyParams();
            ApiResponse<CreateListViewresponse> localVarResp = addViewToListWithHttpInfo(listId, createListViewrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addViewToList request with HTTP info returned
         * @return ApiResponse&lt;CreateListViewresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateListViewresponse> executeWithHttpInfo() throws ApiException {
            CreateListViewrequest createListViewrequest = buildBodyParams();
            return addViewToListWithHttpInfo(listId, createListViewrequest);
        }

        /**
         * Execute addViewToList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateListViewresponse> _callback) throws ApiException {
            CreateListViewrequest createListViewrequest = buildBodyParams();
            return addViewToListAsync(listId, createListViewrequest, _callback);
        }
    }

    /**
     * Create List View
     * Add a List, Board, Calendar, Table, Timeline, Workload, Activity, Map, Chat, or Gantt view to a List.
     * @param listId  (required)
     * @param createListViewrequest  (required)
     * @return AddViewToListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddViewToListRequestBuilder addViewToList(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double listId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (grouping == null) throw new IllegalArgumentException("\"grouping\" is required but got null");
        if (divide == null) throw new IllegalArgumentException("\"divide\" is required but got null");
        if (sorting == null) throw new IllegalArgumentException("\"sorting\" is required but got null");
        if (filters == null) throw new IllegalArgumentException("\"filters\" is required but got null");
        if (columns == null) throw new IllegalArgumentException("\"columns\" is required but got null");
        if (teamSidebar == null) throw new IllegalArgumentException("\"teamSidebar\" is required but got null");
        if (settings == null) throw new IllegalArgumentException("\"settings\" is required but got null");
        
        return new AddViewToListRequestBuilder(name, type, grouping, divide, sorting, filters, columns, teamSidebar, settings, listId);
    }
    private okhttp3.Call addViewToSpaceCall(Double spaceId, CreateSpaceViewrequest createSpaceViewrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSpaceViewrequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}/view"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addViewToSpaceValidateBeforeCall(Double spaceId, CreateSpaceViewrequest createSpaceViewrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling addViewToSpace(Async)");
        }

        // verify the required parameter 'createSpaceViewrequest' is set
        if (createSpaceViewrequest == null) {
            throw new ApiException("Missing the required parameter 'createSpaceViewrequest' when calling addViewToSpace(Async)");
        }

        return addViewToSpaceCall(spaceId, createSpaceViewrequest, _callback);

    }


    private ApiResponse<CreateSpaceViewresponse> addViewToSpaceWithHttpInfo(Double spaceId, CreateSpaceViewrequest createSpaceViewrequest) throws ApiException {
        okhttp3.Call localVarCall = addViewToSpaceValidateBeforeCall(spaceId, createSpaceViewrequest, null);
        Type localVarReturnType = new TypeToken<CreateSpaceViewresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addViewToSpaceAsync(Double spaceId, CreateSpaceViewrequest createSpaceViewrequest, final ApiCallback<CreateSpaceViewresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addViewToSpaceValidateBeforeCall(spaceId, createSpaceViewrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateSpaceViewresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddViewToSpaceRequestBuilder {
        private final String name;
        private final String type;
        private final Grouping grouping;
        private final Divide divide;
        private final Sorting sorting;
        private final Filters filters;
        private final Columns columns;
        private final TeamSidebar teamSidebar;
        private final Settings settings;
        private final Double spaceId;

        private AddViewToSpaceRequestBuilder(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double spaceId) {
            this.name = name;
            this.type = type;
            this.grouping = grouping;
            this.divide = divide;
            this.sorting = sorting;
            this.filters = filters;
            this.columns = columns;
            this.teamSidebar = teamSidebar;
            this.settings = settings;
            this.spaceId = spaceId;
        }

        /**
         * Build call for addViewToSpace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSpaceViewrequest createSpaceViewrequest = buildBodyParams();
            return addViewToSpaceCall(spaceId, createSpaceViewrequest, _callback);
        }

        private CreateSpaceViewrequest buildBodyParams() {
            CreateSpaceViewrequest createSpaceViewrequest = new CreateSpaceViewrequest();
            createSpaceViewrequest.name(this.name);
            createSpaceViewrequest.type(this.type);
            createSpaceViewrequest.grouping(this.grouping);
            createSpaceViewrequest.divide(this.divide);
            createSpaceViewrequest.sorting(this.sorting);
            createSpaceViewrequest.filters(this.filters);
            createSpaceViewrequest.columns(this.columns);
            createSpaceViewrequest.teamSidebar(this.teamSidebar);
            createSpaceViewrequest.settings(this.settings);
            return createSpaceViewrequest;
        }

        /**
         * Execute addViewToSpace request
         * @return CreateSpaceViewresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateSpaceViewresponse execute() throws ApiException {
            CreateSpaceViewrequest createSpaceViewrequest = buildBodyParams();
            ApiResponse<CreateSpaceViewresponse> localVarResp = addViewToSpaceWithHttpInfo(spaceId, createSpaceViewrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addViewToSpace request with HTTP info returned
         * @return ApiResponse&lt;CreateSpaceViewresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateSpaceViewresponse> executeWithHttpInfo() throws ApiException {
            CreateSpaceViewrequest createSpaceViewrequest = buildBodyParams();
            return addViewToSpaceWithHttpInfo(spaceId, createSpaceViewrequest);
        }

        /**
         * Execute addViewToSpace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateSpaceViewresponse> _callback) throws ApiException {
            CreateSpaceViewrequest createSpaceViewrequest = buildBodyParams();
            return addViewToSpaceAsync(spaceId, createSpaceViewrequest, _callback);
        }
    }

    /**
     * Create Space View
     * Add a List, Board, Calendar, Table, Timeline, Workload, Activity, Map, Chat, or Gantt view to a Space.
     * @param spaceId  (required)
     * @param createSpaceViewrequest  (required)
     * @return AddViewToSpaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddViewToSpaceRequestBuilder addViewToSpace(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double spaceId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (grouping == null) throw new IllegalArgumentException("\"grouping\" is required but got null");
        if (divide == null) throw new IllegalArgumentException("\"divide\" is required but got null");
        if (sorting == null) throw new IllegalArgumentException("\"sorting\" is required but got null");
        if (filters == null) throw new IllegalArgumentException("\"filters\" is required but got null");
        if (columns == null) throw new IllegalArgumentException("\"columns\" is required but got null");
        if (teamSidebar == null) throw new IllegalArgumentException("\"teamSidebar\" is required but got null");
        if (settings == null) throw new IllegalArgumentException("\"settings\" is required but got null");
        
        return new AddViewToSpaceRequestBuilder(name, type, grouping, divide, sorting, filters, columns, teamSidebar, settings, spaceId);
    }
    private okhttp3.Call createWorkspaceViewEverythingLevelCall(Double teamId, CreateTeamViewrequest createTeamViewrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamViewrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/view"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkspaceViewEverythingLevelValidateBeforeCall(Double teamId, CreateTeamViewrequest createTeamViewrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createWorkspaceViewEverythingLevel(Async)");
        }

        // verify the required parameter 'createTeamViewrequest' is set
        if (createTeamViewrequest == null) {
            throw new ApiException("Missing the required parameter 'createTeamViewrequest' when calling createWorkspaceViewEverythingLevel(Async)");
        }

        return createWorkspaceViewEverythingLevelCall(teamId, createTeamViewrequest, _callback);

    }


    private ApiResponse<CreateTeamViewresponse> createWorkspaceViewEverythingLevelWithHttpInfo(Double teamId, CreateTeamViewrequest createTeamViewrequest) throws ApiException {
        okhttp3.Call localVarCall = createWorkspaceViewEverythingLevelValidateBeforeCall(teamId, createTeamViewrequest, null);
        Type localVarReturnType = new TypeToken<CreateTeamViewresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWorkspaceViewEverythingLevelAsync(Double teamId, CreateTeamViewrequest createTeamViewrequest, final ApiCallback<CreateTeamViewresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkspaceViewEverythingLevelValidateBeforeCall(teamId, createTeamViewrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTeamViewresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWorkspaceViewEverythingLevelRequestBuilder {
        private final String name;
        private final String type;
        private final Grouping grouping;
        private final Divide divide;
        private final Sorting sorting;
        private final Filters filters;
        private final Columns columns;
        private final TeamSidebar teamSidebar;
        private final Settings settings;
        private final Double teamId;

        private CreateWorkspaceViewEverythingLevelRequestBuilder(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double teamId) {
            this.name = name;
            this.type = type;
            this.grouping = grouping;
            this.divide = divide;
            this.sorting = sorting;
            this.filters = filters;
            this.columns = columns;
            this.teamSidebar = teamSidebar;
            this.settings = settings;
            this.teamId = teamId;
        }

        /**
         * Build call for createWorkspaceViewEverythingLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTeamViewrequest createTeamViewrequest = buildBodyParams();
            return createWorkspaceViewEverythingLevelCall(teamId, createTeamViewrequest, _callback);
        }

        private CreateTeamViewrequest buildBodyParams() {
            CreateTeamViewrequest createTeamViewrequest = new CreateTeamViewrequest();
            createTeamViewrequest.name(this.name);
            createTeamViewrequest.type(this.type);
            createTeamViewrequest.grouping(this.grouping);
            createTeamViewrequest.divide(this.divide);
            createTeamViewrequest.sorting(this.sorting);
            createTeamViewrequest.filters(this.filters);
            createTeamViewrequest.columns(this.columns);
            createTeamViewrequest.teamSidebar(this.teamSidebar);
            createTeamViewrequest.settings(this.settings);
            return createTeamViewrequest;
        }

        /**
         * Execute createWorkspaceViewEverythingLevel request
         * @return CreateTeamViewresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateTeamViewresponse execute() throws ApiException {
            CreateTeamViewrequest createTeamViewrequest = buildBodyParams();
            ApiResponse<CreateTeamViewresponse> localVarResp = createWorkspaceViewEverythingLevelWithHttpInfo(teamId, createTeamViewrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWorkspaceViewEverythingLevel request with HTTP info returned
         * @return ApiResponse&lt;CreateTeamViewresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTeamViewresponse> executeWithHttpInfo() throws ApiException {
            CreateTeamViewrequest createTeamViewrequest = buildBodyParams();
            return createWorkspaceViewEverythingLevelWithHttpInfo(teamId, createTeamViewrequest);
        }

        /**
         * Execute createWorkspaceViewEverythingLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTeamViewresponse> _callback) throws ApiException {
            CreateTeamViewrequest createTeamViewrequest = buildBodyParams();
            return createWorkspaceViewEverythingLevelAsync(teamId, createTeamViewrequest, _callback);
        }
    }

    /**
     * Create Workspace (Everything level) View
     * Add a List, Board, Calendar, Table, Timeline, Workload, Activity, Map, Chat, or Gantt view at the Everything Level of a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @param createTeamViewrequest  (required)
     * @return CreateWorkspaceViewEverythingLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateWorkspaceViewEverythingLevelRequestBuilder createWorkspaceViewEverythingLevel(String name, String type, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, double teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (grouping == null) throw new IllegalArgumentException("\"grouping\" is required but got null");
        if (divide == null) throw new IllegalArgumentException("\"divide\" is required but got null");
        if (sorting == null) throw new IllegalArgumentException("\"sorting\" is required but got null");
        if (filters == null) throw new IllegalArgumentException("\"filters\" is required but got null");
        if (columns == null) throw new IllegalArgumentException("\"columns\" is required but got null");
        if (teamSidebar == null) throw new IllegalArgumentException("\"teamSidebar\" is required but got null");
        if (settings == null) throw new IllegalArgumentException("\"settings\" is required but got null");
        
        return new CreateWorkspaceViewEverythingLevelRequestBuilder(name, type, grouping, divide, sorting, filters, columns, teamSidebar, settings, teamId);
    }
    private okhttp3.Call deleteViewByIdCall(String viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/view/{view_id}"
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteViewByIdValidateBeforeCall(String viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling deleteViewById(Async)");
        }

        return deleteViewByIdCall(viewId, _callback);

    }


    private ApiResponse<Object> deleteViewByIdWithHttpInfo(String viewId) throws ApiException {
        okhttp3.Call localVarCall = deleteViewByIdValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteViewByIdAsync(String viewId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteViewByIdValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteViewByIdRequestBuilder {
        private final String viewId;

        private DeleteViewByIdRequestBuilder(String viewId) {
            this.viewId = viewId;
        }

        /**
         * Build call for deleteViewById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteViewByIdCall(viewId, _callback);
        }


        /**
         * Execute deleteViewById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteViewByIdWithHttpInfo(viewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteViewById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteViewByIdWithHttpInfo(viewId);
        }

        /**
         * Execute deleteViewById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteViewByIdAsync(viewId, _callback);
        }
    }

    /**
     * Delete View
     * 
     * @param viewId 105 (string) (required)
     * @return DeleteViewByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteViewByIdRequestBuilder deleteViewById(String viewId) throws IllegalArgumentException {
        if (viewId == null) throw new IllegalArgumentException("\"viewId\" is required but got null");
            

        return new DeleteViewByIdRequestBuilder(viewId);
    }
    private okhttp3.Call folderViewsGetCall(Double folderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}/view"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call folderViewsGetValidateBeforeCall(Double folderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling folderViewsGet(Async)");
        }

        return folderViewsGetCall(folderId, _callback);

    }


    private ApiResponse<GetFolderViewsresponse> folderViewsGetWithHttpInfo(Double folderId) throws ApiException {
        okhttp3.Call localVarCall = folderViewsGetValidateBeforeCall(folderId, null);
        Type localVarReturnType = new TypeToken<GetFolderViewsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call folderViewsGetAsync(Double folderId, final ApiCallback<GetFolderViewsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = folderViewsGetValidateBeforeCall(folderId, _callback);
        Type localVarReturnType = new TypeToken<GetFolderViewsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FolderViewsGetRequestBuilder {
        private final Double folderId;

        private FolderViewsGetRequestBuilder(double folderId) {
            this.folderId = folderId;
        }

        /**
         * Build call for folderViewsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return folderViewsGetCall(folderId, _callback);
        }


        /**
         * Execute folderViewsGet request
         * @return GetFolderViewsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetFolderViewsresponse execute() throws ApiException {
            ApiResponse<GetFolderViewsresponse> localVarResp = folderViewsGetWithHttpInfo(folderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute folderViewsGet request with HTTP info returned
         * @return ApiResponse&lt;GetFolderViewsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFolderViewsresponse> executeWithHttpInfo() throws ApiException {
            return folderViewsGetWithHttpInfo(folderId);
        }

        /**
         * Execute folderViewsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFolderViewsresponse> _callback) throws ApiException {
            return folderViewsGetAsync(folderId, _callback);
        }
    }

    /**
     * Get Folder Views
     * View the task and page views available for a Folder.
     * @param folderId  (required)
     * @return FolderViewsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FolderViewsGetRequestBuilder folderViewsGet(double folderId) throws IllegalArgumentException {
        
        return new FolderViewsGetRequestBuilder(folderId);
    }
    private okhttp3.Call getEverythingLevelCall(Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/view"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEverythingLevelValidateBeforeCall(Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getEverythingLevel(Async)");
        }

        return getEverythingLevelCall(teamId, _callback);

    }


    private ApiResponse<GetTeamViewsresponse> getEverythingLevelWithHttpInfo(Double teamId) throws ApiException {
        okhttp3.Call localVarCall = getEverythingLevelValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<GetTeamViewsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEverythingLevelAsync(Double teamId, final ApiCallback<GetTeamViewsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEverythingLevelValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<GetTeamViewsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEverythingLevelRequestBuilder {
        private final Double teamId;

        private GetEverythingLevelRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for getEverythingLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEverythingLevelCall(teamId, _callback);
        }


        /**
         * Execute getEverythingLevel request
         * @return GetTeamViewsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetTeamViewsresponse execute() throws ApiException {
            ApiResponse<GetTeamViewsresponse> localVarResp = getEverythingLevelWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEverythingLevel request with HTTP info returned
         * @return ApiResponse&lt;GetTeamViewsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTeamViewsresponse> executeWithHttpInfo() throws ApiException {
            return getEverythingLevelWithHttpInfo(teamId);
        }

        /**
         * Execute getEverythingLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTeamViewsresponse> _callback) throws ApiException {
            return getEverythingLevelAsync(teamId, _callback);
        }
    }

    /**
     * Get Workspace (Everything level) Views
     * View the task and page views available at the Everything Level of a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @return GetEverythingLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEverythingLevelRequestBuilder getEverythingLevel(double teamId) throws IllegalArgumentException {
        
        return new GetEverythingLevelRequestBuilder(teamId);
    }
    private okhttp3.Call getListViewsCall(Double listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/view"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListViewsValidateBeforeCall(Double listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListViews(Async)");
        }

        return getListViewsCall(listId, _callback);

    }


    private ApiResponse<GetListViewsresponse> getListViewsWithHttpInfo(Double listId) throws ApiException {
        okhttp3.Call localVarCall = getListViewsValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<GetListViewsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListViewsAsync(Double listId, final ApiCallback<GetListViewsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListViewsValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<GetListViewsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListViewsRequestBuilder {
        private final Double listId;

        private GetListViewsRequestBuilder(double listId) {
            this.listId = listId;
        }

        /**
         * Build call for getListViews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListViewsCall(listId, _callback);
        }


        /**
         * Execute getListViews request
         * @return GetListViewsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetListViewsresponse execute() throws ApiException {
            ApiResponse<GetListViewsresponse> localVarResp = getListViewsWithHttpInfo(listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListViews request with HTTP info returned
         * @return ApiResponse&lt;GetListViewsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetListViewsresponse> executeWithHttpInfo() throws ApiException {
            return getListViewsWithHttpInfo(listId);
        }

        /**
         * Execute getListViews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetListViewsresponse> _callback) throws ApiException {
            return getListViewsAsync(listId, _callback);
        }
    }

    /**
     * Get List Views
     * View the task and page views available for a List.&lt;br&gt; Views and required views are separate responses.
     * @param listId  (required)
     * @return GetListViewsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListViewsRequestBuilder getListViews(double listId) throws IllegalArgumentException {
        
        return new GetListViewsRequestBuilder(listId);
    }
    private okhttp3.Call getTasksInViewCall(String viewId, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/view/{view_id}/task"
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTasksInViewValidateBeforeCall(String viewId, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getTasksInView(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getTasksInView(Async)");
        }

        return getTasksInViewCall(viewId, page, _callback);

    }


    private ApiResponse<GetViewTasksresponse> getTasksInViewWithHttpInfo(String viewId, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getTasksInViewValidateBeforeCall(viewId, page, null);
        Type localVarReturnType = new TypeToken<GetViewTasksresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTasksInViewAsync(String viewId, Integer page, final ApiCallback<GetViewTasksresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTasksInViewValidateBeforeCall(viewId, page, _callback);
        Type localVarReturnType = new TypeToken<GetViewTasksresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTasksInViewRequestBuilder {
        private final String viewId;
        private final Integer page;

        private GetTasksInViewRequestBuilder(String viewId, Integer page) {
            this.viewId = viewId;
            this.page = page;
        }

        /**
         * Build call for getTasksInView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTasksInViewCall(viewId, page, _callback);
        }


        /**
         * Execute getTasksInView request
         * @return GetViewTasksresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetViewTasksresponse execute() throws ApiException {
            ApiResponse<GetViewTasksresponse> localVarResp = getTasksInViewWithHttpInfo(viewId, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTasksInView request with HTTP info returned
         * @return ApiResponse&lt;GetViewTasksresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetViewTasksresponse> executeWithHttpInfo() throws ApiException {
            return getTasksInViewWithHttpInfo(viewId, page);
        }

        /**
         * Execute getTasksInView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetViewTasksresponse> _callback) throws ApiException {
            return getTasksInViewAsync(viewId, page, _callback);
        }
    }

    /**
     * Get View Tasks
     * See all visible tasks in a view in ClickUp.
     * @param viewId 105 (string) (required)
     * @param page  (required)
     * @return GetTasksInViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTasksInViewRequestBuilder getTasksInView(String viewId, Integer page) throws IllegalArgumentException {
        if (viewId == null) throw new IllegalArgumentException("\"viewId\" is required but got null");
            

        if (page == null) throw new IllegalArgumentException("\"page\" is required but got null");
        return new GetTasksInViewRequestBuilder(viewId, page);
    }
    private okhttp3.Call getViewInfoCall(String viewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/view/{view_id}"
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewInfoValidateBeforeCall(String viewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getViewInfo(Async)");
        }

        return getViewInfoCall(viewId, _callback);

    }


    private ApiResponse<GetViewresponse> getViewInfoWithHttpInfo(String viewId) throws ApiException {
        okhttp3.Call localVarCall = getViewInfoValidateBeforeCall(viewId, null);
        Type localVarReturnType = new TypeToken<GetViewresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getViewInfoAsync(String viewId, final ApiCallback<GetViewresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewInfoValidateBeforeCall(viewId, _callback);
        Type localVarReturnType = new TypeToken<GetViewresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetViewInfoRequestBuilder {
        private final String viewId;

        private GetViewInfoRequestBuilder(String viewId) {
            this.viewId = viewId;
        }

        /**
         * Build call for getViewInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getViewInfoCall(viewId, _callback);
        }


        /**
         * Execute getViewInfo request
         * @return GetViewresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetViewresponse execute() throws ApiException {
            ApiResponse<GetViewresponse> localVarResp = getViewInfoWithHttpInfo(viewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getViewInfo request with HTTP info returned
         * @return ApiResponse&lt;GetViewresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetViewresponse> executeWithHttpInfo() throws ApiException {
            return getViewInfoWithHttpInfo(viewId);
        }

        /**
         * Execute getViewInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetViewresponse> _callback) throws ApiException {
            return getViewInfoAsync(viewId, _callback);
        }
    }

    /**
     * Get View
     * View information about a specific task or page view.
     * @param viewId  (required)
     * @return GetViewInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetViewInfoRequestBuilder getViewInfo(String viewId) throws IllegalArgumentException {
        if (viewId == null) throw new IllegalArgumentException("\"viewId\" is required but got null");
            

        return new GetViewInfoRequestBuilder(viewId);
    }
    private okhttp3.Call spaceViewsGetCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/space/{space_id}/view"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call spaceViewsGetValidateBeforeCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceViewsGet(Async)");
        }

        return spaceViewsGetCall(spaceId, _callback);

    }


    private ApiResponse<GetSpaceViewsresponse> spaceViewsGetWithHttpInfo(Double spaceId) throws ApiException {
        okhttp3.Call localVarCall = spaceViewsGetValidateBeforeCall(spaceId, null);
        Type localVarReturnType = new TypeToken<GetSpaceViewsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call spaceViewsGetAsync(Double spaceId, final ApiCallback<GetSpaceViewsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = spaceViewsGetValidateBeforeCall(spaceId, _callback);
        Type localVarReturnType = new TypeToken<GetSpaceViewsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpaceViewsGetRequestBuilder {
        private final Double spaceId;

        private SpaceViewsGetRequestBuilder(double spaceId) {
            this.spaceId = spaceId;
        }

        /**
         * Build call for spaceViewsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return spaceViewsGetCall(spaceId, _callback);
        }


        /**
         * Execute spaceViewsGet request
         * @return GetSpaceViewsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetSpaceViewsresponse execute() throws ApiException {
            ApiResponse<GetSpaceViewsresponse> localVarResp = spaceViewsGetWithHttpInfo(spaceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute spaceViewsGet request with HTTP info returned
         * @return ApiResponse&lt;GetSpaceViewsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSpaceViewsresponse> executeWithHttpInfo() throws ApiException {
            return spaceViewsGetWithHttpInfo(spaceId);
        }

        /**
         * Execute spaceViewsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSpaceViewsresponse> _callback) throws ApiException {
            return spaceViewsGetAsync(spaceId, _callback);
        }
    }

    /**
     * Get Space Views
     * View the task and page views available for a Space.
     * @param spaceId  (required)
     * @return SpaceViewsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SpaceViewsGetRequestBuilder spaceViewsGet(double spaceId) throws IllegalArgumentException {
        
        return new SpaceViewsGetRequestBuilder(spaceId);
    }
    private okhttp3.Call updateViewDetailsCall(String viewId, UpdateViewrequest updateViewrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateViewrequest;

        // create path and map variables
        String localVarPath = "/view/{view_id}"
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateViewDetailsValidateBeforeCall(String viewId, UpdateViewrequest updateViewrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling updateViewDetails(Async)");
        }

        // verify the required parameter 'updateViewrequest' is set
        if (updateViewrequest == null) {
            throw new ApiException("Missing the required parameter 'updateViewrequest' when calling updateViewDetails(Async)");
        }

        return updateViewDetailsCall(viewId, updateViewrequest, _callback);

    }


    private ApiResponse<UpdateViewresponse> updateViewDetailsWithHttpInfo(String viewId, UpdateViewrequest updateViewrequest) throws ApiException {
        okhttp3.Call localVarCall = updateViewDetailsValidateBeforeCall(viewId, updateViewrequest, null);
        Type localVarReturnType = new TypeToken<UpdateViewresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateViewDetailsAsync(String viewId, UpdateViewrequest updateViewrequest, final ApiCallback<UpdateViewresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateViewDetailsValidateBeforeCall(viewId, updateViewrequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateViewresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateViewDetailsRequestBuilder {
        private final String name;
        private final String type;
        private final Parent parent;
        private final Grouping grouping;
        private final Divide divide;
        private final Sorting sorting;
        private final Filters filters;
        private final Columns columns;
        private final TeamSidebar teamSidebar;
        private final Settings settings;
        private final String viewId;

        private UpdateViewDetailsRequestBuilder(String name, String type, Parent parent, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, String viewId) {
            this.name = name;
            this.type = type;
            this.parent = parent;
            this.grouping = grouping;
            this.divide = divide;
            this.sorting = sorting;
            this.filters = filters;
            this.columns = columns;
            this.teamSidebar = teamSidebar;
            this.settings = settings;
            this.viewId = viewId;
        }

        /**
         * Build call for updateViewDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateViewrequest updateViewrequest = buildBodyParams();
            return updateViewDetailsCall(viewId, updateViewrequest, _callback);
        }

        private UpdateViewrequest buildBodyParams() {
            UpdateViewrequest updateViewrequest = new UpdateViewrequest();
            updateViewrequest.name(this.name);
            updateViewrequest.type(this.type);
            updateViewrequest.parent(this.parent);
            updateViewrequest.grouping(this.grouping);
            updateViewrequest.divide(this.divide);
            updateViewrequest.sorting(this.sorting);
            updateViewrequest.filters(this.filters);
            updateViewrequest.columns(this.columns);
            updateViewrequest.teamSidebar(this.teamSidebar);
            updateViewrequest.settings(this.settings);
            return updateViewrequest;
        }

        /**
         * Execute updateViewDetails request
         * @return UpdateViewresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateViewresponse execute() throws ApiException {
            UpdateViewrequest updateViewrequest = buildBodyParams();
            ApiResponse<UpdateViewresponse> localVarResp = updateViewDetailsWithHttpInfo(viewId, updateViewrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateViewDetails request with HTTP info returned
         * @return ApiResponse&lt;UpdateViewresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateViewresponse> executeWithHttpInfo() throws ApiException {
            UpdateViewrequest updateViewrequest = buildBodyParams();
            return updateViewDetailsWithHttpInfo(viewId, updateViewrequest);
        }

        /**
         * Execute updateViewDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateViewresponse> _callback) throws ApiException {
            UpdateViewrequest updateViewrequest = buildBodyParams();
            return updateViewDetailsAsync(viewId, updateViewrequest, _callback);
        }
    }

    /**
     * Update View
     * Rename a view, update the grouping, sorting, filters, columns, and settings of a view.
     * @param viewId  (required)
     * @param updateViewrequest  (required)
     * @return UpdateViewDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateViewDetailsRequestBuilder updateViewDetails(String name, String type, Parent parent, Grouping grouping, Divide divide, Sorting sorting, Filters filters, Columns columns, TeamSidebar teamSidebar, Settings settings, String viewId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (parent == null) throw new IllegalArgumentException("\"parent\" is required but got null");
        if (grouping == null) throw new IllegalArgumentException("\"grouping\" is required but got null");
        if (divide == null) throw new IllegalArgumentException("\"divide\" is required but got null");
        if (sorting == null) throw new IllegalArgumentException("\"sorting\" is required but got null");
        if (filters == null) throw new IllegalArgumentException("\"filters\" is required but got null");
        if (columns == null) throw new IllegalArgumentException("\"columns\" is required but got null");
        if (teamSidebar == null) throw new IllegalArgumentException("\"teamSidebar\" is required but got null");
        if (settings == null) throw new IllegalArgumentException("\"settings\" is required but got null");
        if (viewId == null) throw new IllegalArgumentException("\"viewId\" is required but got null");
            

        return new UpdateViewDetailsRequestBuilder(name, type, parent, grouping, divide, sorting, filters, columns, teamSidebar, settings, viewId);
    }
}
