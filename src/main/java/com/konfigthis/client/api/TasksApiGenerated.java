/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Assignees;
import com.konfigthis.client.model.CreateTaskrequest;
import com.konfigthis.client.model.CreateTaskresponse;
import com.konfigthis.client.model.CustomFields6;
import com.konfigthis.client.model.GetBulkTasksTimeinStatusresponse;
import com.konfigthis.client.model.GetFilteredTeamTasksresponse;
import com.konfigthis.client.model.GetTaskresponse;
import com.konfigthis.client.model.GetTasksTimeinStatusresponse;
import com.konfigthis.client.model.GetTasksresponse;
import com.konfigthis.client.model.UpdateTaskrequest;
import com.konfigthis.client.model.UpdateTaskresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TasksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTaskCall(Double listId, CreateTaskrequest createTaskrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskrequest;

        // create path and map variables
        String localVarPath = "/list/{list_id}/task"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskValidateBeforeCall(Double listId, CreateTaskrequest createTaskrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling createNewTask(Async)");
        }

        // verify the required parameter 'createTaskrequest' is set
        if (createTaskrequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskrequest' when calling createNewTask(Async)");
        }

        return createNewTaskCall(listId, createTaskrequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<CreateTaskresponse> createNewTaskWithHttpInfo(Double listId, CreateTaskrequest createTaskrequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(listId, createTaskrequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<CreateTaskresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskAsync(Double listId, CreateTaskrequest createTaskrequest, Boolean customTaskIds, Double teamId, final ApiCallback<CreateTaskresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskValidateBeforeCall(listId, createTaskrequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<CreateTaskresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskRequestBuilder {
        private final String name;
        private final Double listId;
        private List<String> tags;
        private String description;
        private List<Integer> assignees;
        private String status;
        private Object priority;
        private Integer dueDate;
        private Boolean dueDateTime;
        private Integer timeEstimate;
        private Integer startDate;
        private Boolean startDateTime;
        private Boolean notifyAll;
        private Object parent;
        private Object linksTo;
        private Boolean checkRequiredCustomFields;
        private List<CustomFields6> customFields;
        private Double customItemId;
        private Boolean customTaskIds;
        private Double teamId;

        private CreateNewTaskRequestBuilder(String name, double listId) {
            this.name = name;
            this.listId = listId;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set assignees
         * @param assignees  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder assignees(List<Integer> assignees) {
            this.assignees = assignees;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder priority(Object priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder dueDate(Integer dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set dueDateTime
         * @param dueDateTime  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder dueDateTime(Boolean dueDateTime) {
            this.dueDateTime = dueDateTime;
            return this;
        }
        
        /**
         * Set timeEstimate
         * @param timeEstimate  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder timeEstimate(Integer timeEstimate) {
            this.timeEstimate = timeEstimate;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder startDate(Integer startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set startDateTime
         * @param startDateTime  (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder startDateTime(Boolean startDateTime) {
            this.startDateTime = startDateTime;
            return this;
        }
        
        /**
         * Set notifyAll
         * @param notifyAll If &#x60;notify_all&#x60; is true, notifications will be sent to everyone including the creator of the comment. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder notifyAll(Boolean notifyAll) {
            this.notifyAll = notifyAll;
            return this;
        }
        
        /**
         * Set parent
         * @param parent You can create a subtask by including an existing task ID.\\\\  \\\\ The &#x60;parent&#x60; task ID you include cannot be a subtask, and must be in the same List specified in the path parameter. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder parent(Object parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set linksTo
         * @param linksTo Include a task ID to create a linked dependency with your new task. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder linksTo(Object linksTo) {
            this.linksTo = linksTo;
            return this;
        }
        
        /**
         * Set checkRequiredCustomFields
         * @param checkRequiredCustomFields When creating a task via API any required Custom Fields are ignored by default (&#x60;false&#x60;).\\\\  \\\\ You can enforce required Custom Fields by including &#x60;check_required_custom_fields: true&#x60;. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder checkRequiredCustomFields(Boolean checkRequiredCustomFields) {
            this.checkRequiredCustomFields = checkRequiredCustomFields;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields [Filter by Custom Fields.](https://clickup.com/api) (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder customFields(List<CustomFields6> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set customItemId
         * @param customItemId To create a task that doesn&#39;t use a custom task type, either don&#39;t include this field in the request body, or send &#x60;&#39;null&#39;&#x60;. \\\\  \\\\ To create this task as a Milestone, send a value of &#x60;1&#x60;.\\\\  \\\\ To use a custom task type, send the custom task type ID as defined in your Workspace, such as &#x60;2&#x60;. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder customItemId(Double customItemId) {
            this.customItemId = customItemId;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return CreateNewTaskRequestBuilder
         */
        public CreateNewTaskRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for createNewTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTaskrequest createTaskrequest = buildBodyParams();
            return createNewTaskCall(listId, createTaskrequest, customTaskIds, teamId, _callback);
        }

        private CreateTaskrequest buildBodyParams() {
            CreateTaskrequest createTaskrequest = new CreateTaskrequest();
            createTaskrequest.tags(this.tags);
            createTaskrequest.description(this.description);
            createTaskrequest.name(this.name);
            createTaskrequest.assignees(this.assignees);
            createTaskrequest.status(this.status);
            createTaskrequest.priority(this.priority);
            createTaskrequest.dueDate(this.dueDate);
            createTaskrequest.dueDateTime(this.dueDateTime);
            createTaskrequest.timeEstimate(this.timeEstimate);
            createTaskrequest.startDate(this.startDate);
            createTaskrequest.startDateTime(this.startDateTime);
            createTaskrequest.notifyAll(this.notifyAll);
            createTaskrequest.parent(this.parent);
            createTaskrequest.linksTo(this.linksTo);
            createTaskrequest.checkRequiredCustomFields(this.checkRequiredCustomFields);
            createTaskrequest.customFields(this.customFields);
            createTaskrequest.customItemId(this.customItemId);
            return createTaskrequest;
        }

        /**
         * Execute createNewTask request
         * @return CreateTaskresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateTaskresponse execute() throws ApiException {
            CreateTaskrequest createTaskrequest = buildBodyParams();
            ApiResponse<CreateTaskresponse> localVarResp = createNewTaskWithHttpInfo(listId, createTaskrequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTask request with HTTP info returned
         * @return ApiResponse&lt;CreateTaskresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTaskresponse> executeWithHttpInfo() throws ApiException {
            CreateTaskrequest createTaskrequest = buildBodyParams();
            return createNewTaskWithHttpInfo(listId, createTaskrequest, customTaskIds, teamId);
        }

        /**
         * Execute createNewTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTaskresponse> _callback) throws ApiException {
            CreateTaskrequest createTaskrequest = buildBodyParams();
            return createNewTaskAsync(listId, createTaskrequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Create Task
     * Create a new task.
     * @param listId  (required)
     * @param createTaskrequest  (required)
     * @return CreateNewTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskRequestBuilder createNewTask(String name, double listId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new CreateNewTaskRequestBuilder(name, listId);
    }
    private okhttp3.Call filterTeamTasksCall(Double teamId, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> spaceIds, List<String> projectIds, List<String> listIds, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, Boolean customTaskIds, Double teamId2, String parent, Boolean includeMarkdownDescription, List<Double> customItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_Id}/task"
            .replace("{" + "team_Id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse", reverse));
        }

        if (subtasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subtasks", subtasks));
        }

        if (spaceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "space_ids", spaceIds));
        }

        if (projectIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project_ids", projectIds));
        }

        if (listIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "list_ids", listIds));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (includeClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_closed", includeClosed));
        }

        if (assignees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "assignees", assignees));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (dueDateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_date_gt", dueDateGt));
        }

        if (dueDateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_date_lt", dueDateLt));
        }

        if (dateCreatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created_gt", dateCreatedGt));
        }

        if (dateCreatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created_lt", dateCreatedLt));
        }

        if (dateUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_gt", dateUpdatedGt));
        }

        if (dateUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_lt", dateUpdatedLt));
        }

        if (dateDoneGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_done_gt", dateDoneGt));
        }

        if (dateDoneLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_done_lt", dateDoneLt));
        }

        if (customFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "custom_fields", customFields));
        }

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId2));
        }

        if (parent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent", parent));
        }

        if (includeMarkdownDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_markdown_description", includeMarkdownDescription));
        }

        if (customItems != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "custom_items", customItems));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterTeamTasksValidateBeforeCall(Double teamId, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> spaceIds, List<String> projectIds, List<String> listIds, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, Boolean customTaskIds, Double teamId2, String parent, Boolean includeMarkdownDescription, List<Double> customItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling filterTeamTasks(Async)");
        }

        return filterTeamTasksCall(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems, _callback);

    }


    private ApiResponse<GetFilteredTeamTasksresponse> filterTeamTasksWithHttpInfo(Double teamId, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> spaceIds, List<String> projectIds, List<String> listIds, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, Boolean customTaskIds, Double teamId2, String parent, Boolean includeMarkdownDescription, List<Double> customItems) throws ApiException {
        okhttp3.Call localVarCall = filterTeamTasksValidateBeforeCall(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems, null);
        Type localVarReturnType = new TypeToken<GetFilteredTeamTasksresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call filterTeamTasksAsync(Double teamId, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> spaceIds, List<String> projectIds, List<String> listIds, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, Boolean customTaskIds, Double teamId2, String parent, Boolean includeMarkdownDescription, List<Double> customItems, final ApiCallback<GetFilteredTeamTasksresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterTeamTasksValidateBeforeCall(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems, _callback);
        Type localVarReturnType = new TypeToken<GetFilteredTeamTasksresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FilterTeamTasksRequestBuilder {
        private final Double teamId;
        private Integer page;
        private String orderBy;
        private Boolean reverse;
        private Boolean subtasks;
        private List<String> spaceIds;
        private List<String> projectIds;
        private List<String> listIds;
        private List<String> statuses;
        private Boolean includeClosed;
        private List<String> assignees;
        private List<String> tags;
        private Integer dueDateGt;
        private Integer dueDateLt;
        private Integer dateCreatedGt;
        private Integer dateCreatedLt;
        private Integer dateUpdatedGt;
        private Integer dateUpdatedLt;
        private Integer dateDoneGt;
        private Integer dateDoneLt;
        private List<String> customFields;
        private Boolean customTaskIds;
        private Double teamId2;
        private String parent;
        private Boolean includeMarkdownDescription;
        private List<Double> customItems;

        private FilterTeamTasksRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Set page
         * @param page Page to fetch (starts at 0). (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Order by a particular field. By default, tasks are ordered by &#x60;created&#x60;.\\  \\ Options include: &#x60;id&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, and &#x60;due_date&#x60;. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set reverse
         * @param reverse Tasks are displayed in reverse order. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder reverse(Boolean reverse) {
            this.reverse = reverse;
            return this;
        }
        
        /**
         * Set subtasks
         * @param subtasks Include or exclude subtasks. By default, subtasks are excluded. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder subtasks(Boolean subtasks) {
            this.subtasks = subtasks;
            return this;
        }
        
        /**
         * Set spaceIds
         * @param spaceIds Filter by Spaces. For example: \\  \\ &#x60;?space_ids[]&#x3D;1234&amp;space_ids[]&#x3D;6789&#x60; (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder spaceIds(List<String> spaceIds) {
            this.spaceIds = spaceIds;
            return this;
        }
        
        /**
         * Set projectIds
         * @param projectIds Filter by Folders. For example: \\  \\ &#x60;?project_ids[]&#x3D;1234&amp;project_ids[]&#x3D;6789&#x60; (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder projectIds(List<String> projectIds) {
            this.projectIds = projectIds;
            return this;
        }
        
        /**
         * Set listIds
         * @param listIds Filter by Lists. For example: \\  \\ &#x60;?list_ids[]&#x3D;1234&amp;list_ids[]&#x3D;6789&#x60; (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder listIds(List<String> listIds) {
            this.listIds = listIds;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Filter by statuses. Use &#x60;%20&#x60; to represent a space character. To include closed tasks, use the &#x60;include_closed&#x60; parameter. \\  \\ For example: \\  \\ &#x60;?statuses[]&#x3D;to%20do&amp;statuses[]&#x3D;in%20progress&#x60; (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder statuses(List<String> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set includeClosed
         * @param includeClosed Include or excluse closed tasks. By default, they are excluded.\\  \\ To include closed tasks, use &#x60;include_closed: true&#x60;. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder includeClosed(Boolean includeClosed) {
            this.includeClosed = includeClosed;
            return this;
        }
        
        /**
         * Set assignees
         * @param assignees Filter by Assignees using people&#39;s ClickUp user id. For example: \\  \\ &#x60;?assignees[]&#x3D;1234&amp;assignees[]&#x3D;5678&#x60; (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder assignees(List<String> assignees) {
            this.assignees = assignees;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Filter by tags. User &#x60;%20&#x60; to represent a space character. For example: \\  \\ &#x60;?tags[]&#x3D;tag1&amp;tags[]&#x3D;this%20tag&#x60; (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set dueDateGt
         * @param dueDateGt Filter by due date greater than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dueDateGt(Integer dueDateGt) {
            this.dueDateGt = dueDateGt;
            return this;
        }
        
        /**
         * Set dueDateLt
         * @param dueDateLt Filter by due date less than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dueDateLt(Integer dueDateLt) {
            this.dueDateLt = dueDateLt;
            return this;
        }
        
        /**
         * Set dateCreatedGt
         * @param dateCreatedGt Filter by date created greater than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dateCreatedGt(Integer dateCreatedGt) {
            this.dateCreatedGt = dateCreatedGt;
            return this;
        }
        
        /**
         * Set dateCreatedLt
         * @param dateCreatedLt Filter by date created less than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dateCreatedLt(Integer dateCreatedLt) {
            this.dateCreatedLt = dateCreatedLt;
            return this;
        }
        
        /**
         * Set dateUpdatedGt
         * @param dateUpdatedGt Filter by date updated greater than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dateUpdatedGt(Integer dateUpdatedGt) {
            this.dateUpdatedGt = dateUpdatedGt;
            return this;
        }
        
        /**
         * Set dateUpdatedLt
         * @param dateUpdatedLt Filter by date updated less than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dateUpdatedLt(Integer dateUpdatedLt) {
            this.dateUpdatedLt = dateUpdatedLt;
            return this;
        }
        
        /**
         * Set dateDoneGt
         * @param dateDoneGt Filter by date done greater than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dateDoneGt(Integer dateDoneGt) {
            this.dateDoneGt = dateDoneGt;
            return this;
        }
        
        /**
         * Set dateDoneLt
         * @param dateDoneLt Filter by date done less than Unix time in milliseconds. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder dateDoneLt(Integer dateDoneLt) {
            this.dateDoneLt = dateDoneLt;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Include tasks with specific values in one or more Custom Fields.\\  \\ For example: &#x60;?custom_fields&#x3D;[{\&quot;field_id\&quot;:\&quot;abcdefghi12345678\&quot;,\&quot;operator\&quot;:\&quot;&#x3D;\&quot;,\&quot;value\&quot;:\&quot;1234\&quot;}{\&quot;field_id\&quot;:\&quot;jklmnop123456\&quot;,\&quot;operator\&quot;:\&quot;&lt;\&quot;,\&quot;value\&quot;:\&quot;5\&quot;}]&#x60;\\  \\ Learn more about [filtering using Custom Fields.](https://clickup.com/api) (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder customFields(List<String> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId2
         * @param teamId2 Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder teamId2(Double teamId2) {
            this.teamId2 = teamId2;
            return this;
        }
        
        /**
         * Set parent
         * @param parent Include the parent task ID to return subtasks. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder parent(String parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set includeMarkdownDescription
         * @param includeMarkdownDescription To return task descriptions in Markdown format, use &#x60;?include_markdown_description&#x3D;true&#x60;. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder includeMarkdownDescription(Boolean includeMarkdownDescription) {
            this.includeMarkdownDescription = includeMarkdownDescription;
            return this;
        }
        
        /**
         * Set customItems
         * @param customItems Filter by custom task types. For example: \\  \\ &#x60;?custom_items[]&#x3D;0&amp;custom_items[]&#x3D;1300&#x60; \\  \\ Including &#x60;0&#x60; returns tasks. Including &#x60;1&#x60; returns Milestones. Including any other number returns the custom task type as defined in your Workspace. (optional)
         * @return FilterTeamTasksRequestBuilder
         */
        public FilterTeamTasksRequestBuilder customItems(List<Double> customItems) {
            this.customItems = customItems;
            return this;
        }
        
        /**
         * Build call for filterTeamTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return filterTeamTasksCall(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems, _callback);
        }


        /**
         * Execute filterTeamTasks request
         * @return GetFilteredTeamTasksresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetFilteredTeamTasksresponse execute() throws ApiException {
            ApiResponse<GetFilteredTeamTasksresponse> localVarResp = filterTeamTasksWithHttpInfo(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute filterTeamTasks request with HTTP info returned
         * @return ApiResponse&lt;GetFilteredTeamTasksresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFilteredTeamTasksresponse> executeWithHttpInfo() throws ApiException {
            return filterTeamTasksWithHttpInfo(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems);
        }

        /**
         * Execute filterTeamTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFilteredTeamTasksresponse> _callback) throws ApiException {
            return filterTeamTasksAsync(teamId, page, orderBy, reverse, subtasks, spaceIds, projectIds, listIds, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customTaskIds, teamId2, parent, includeMarkdownDescription, customItems, _callback);
        }
    }

    /**
     * Get Filtered Team Tasks
     * View the tasks that meet specific criteria from a Workspace. Responses are limited to 100 tasks per page.  \\  \\ You can only view task information of tasks you can access.
     * @param teamId Team ID (Workspace) (required)
     * @return FilterTeamTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FilterTeamTasksRequestBuilder filterTeamTasks(double teamId) throws IllegalArgumentException {
        
        return new FilterTeamTasksRequestBuilder(teamId);
    }
    private okhttp3.Call getListTasksCall(Double listId, Boolean archived, Boolean includeMarkdownDescription, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, List<Double> customItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/task"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (includeMarkdownDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_markdown_description", includeMarkdownDescription));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reverse", reverse));
        }

        if (subtasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subtasks", subtasks));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        if (includeClosed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_closed", includeClosed));
        }

        if (assignees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "assignees", assignees));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (dueDateGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_date_gt", dueDateGt));
        }

        if (dueDateLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("due_date_lt", dueDateLt));
        }

        if (dateCreatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created_gt", dateCreatedGt));
        }

        if (dateCreatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created_lt", dateCreatedLt));
        }

        if (dateUpdatedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_gt", dateUpdatedGt));
        }

        if (dateUpdatedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_lt", dateUpdatedLt));
        }

        if (dateDoneGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_done_gt", dateDoneGt));
        }

        if (dateDoneLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_done_lt", dateDoneLt));
        }

        if (customFields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "custom_fields", customFields));
        }

        if (customItems != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "custom_items", customItems));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListTasksValidateBeforeCall(Double listId, Boolean archived, Boolean includeMarkdownDescription, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, List<Double> customItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListTasks(Async)");
        }

        return getListTasksCall(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems, _callback);

    }


    private ApiResponse<GetTasksresponse> getListTasksWithHttpInfo(Double listId, Boolean archived, Boolean includeMarkdownDescription, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, List<Double> customItems) throws ApiException {
        okhttp3.Call localVarCall = getListTasksValidateBeforeCall(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems, null);
        Type localVarReturnType = new TypeToken<GetTasksresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListTasksAsync(Double listId, Boolean archived, Boolean includeMarkdownDescription, Integer page, String orderBy, Boolean reverse, Boolean subtasks, List<String> statuses, Boolean includeClosed, List<String> assignees, List<String> tags, Integer dueDateGt, Integer dueDateLt, Integer dateCreatedGt, Integer dateCreatedLt, Integer dateUpdatedGt, Integer dateUpdatedLt, Integer dateDoneGt, Integer dateDoneLt, List<String> customFields, List<Double> customItems, final ApiCallback<GetTasksresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListTasksValidateBeforeCall(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems, _callback);
        Type localVarReturnType = new TypeToken<GetTasksresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListTasksRequestBuilder {
        private final Double listId;
        private Boolean archived;
        private Boolean includeMarkdownDescription;
        private Integer page;
        private String orderBy;
        private Boolean reverse;
        private Boolean subtasks;
        private List<String> statuses;
        private Boolean includeClosed;
        private List<String> assignees;
        private List<String> tags;
        private Integer dueDateGt;
        private Integer dueDateLt;
        private Integer dateCreatedGt;
        private Integer dateCreatedLt;
        private Integer dateUpdatedGt;
        private Integer dateUpdatedLt;
        private Integer dateDoneGt;
        private Integer dateDoneLt;
        private List<String> customFields;
        private List<Double> customItems;

        private GetListTasksRequestBuilder(double listId) {
            this.listId = listId;
        }

        /**
         * Set archived
         * @param archived  (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set includeMarkdownDescription
         * @param includeMarkdownDescription To return task descriptions in Markdown format, use &#x60;?include_markdown_description&#x3D;true&#x60;. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder includeMarkdownDescription(Boolean includeMarkdownDescription) {
            this.includeMarkdownDescription = includeMarkdownDescription;
            return this;
        }
        
        /**
         * Set page
         * @param page Page to fetch (starts at 0). (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy Order by a particular field. By default, tasks are ordered by &#x60;created&#x60;.\\  \\ Options include: &#x60;id&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, and &#x60;due_date&#x60;. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set reverse
         * @param reverse Tasks are displayed in reverse order. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder reverse(Boolean reverse) {
            this.reverse = reverse;
            return this;
        }
        
        /**
         * Set subtasks
         * @param subtasks Include or exclude subtasks. By default, subtasks are excluded. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder subtasks(Boolean subtasks) {
            this.subtasks = subtasks;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Filter by statuses. To include closed tasks, use the &#x60;include_closed&#x60; parameter. \\  \\ For example: \\  \\ &#x60;?statuses[]&#x3D;to%20do&amp;statuses[]&#x3D;in%20progress&#x60; (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder statuses(List<String> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set includeClosed
         * @param includeClosed Include or excluse closed tasks. By default, they are excluded.\\  \\ To include closed tasks, use &#x60;include_closed: true&#x60;. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder includeClosed(Boolean includeClosed) {
            this.includeClosed = includeClosed;
            return this;
        }
        
        /**
         * Set assignees
         * @param assignees Filter by Assignees. For example: \\  \\ &#x60;?assignees[]&#x3D;1234&amp;assignees[]&#x3D;5678&#x60; (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder assignees(List<String> assignees) {
            this.assignees = assignees;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Filter by tags. For example: \\  \\ &#x60;?tags[]&#x3D;tag1&amp;tags[]&#x3D;this%20tag&#x60; (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set dueDateGt
         * @param dueDateGt Filter by due date greater than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dueDateGt(Integer dueDateGt) {
            this.dueDateGt = dueDateGt;
            return this;
        }
        
        /**
         * Set dueDateLt
         * @param dueDateLt Filter by due date less than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dueDateLt(Integer dueDateLt) {
            this.dueDateLt = dueDateLt;
            return this;
        }
        
        /**
         * Set dateCreatedGt
         * @param dateCreatedGt Filter by date created greater than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dateCreatedGt(Integer dateCreatedGt) {
            this.dateCreatedGt = dateCreatedGt;
            return this;
        }
        
        /**
         * Set dateCreatedLt
         * @param dateCreatedLt Filter by date created less than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dateCreatedLt(Integer dateCreatedLt) {
            this.dateCreatedLt = dateCreatedLt;
            return this;
        }
        
        /**
         * Set dateUpdatedGt
         * @param dateUpdatedGt Filter by date updated greater than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dateUpdatedGt(Integer dateUpdatedGt) {
            this.dateUpdatedGt = dateUpdatedGt;
            return this;
        }
        
        /**
         * Set dateUpdatedLt
         * @param dateUpdatedLt Filter by date updated less than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dateUpdatedLt(Integer dateUpdatedLt) {
            this.dateUpdatedLt = dateUpdatedLt;
            return this;
        }
        
        /**
         * Set dateDoneGt
         * @param dateDoneGt Filter by date done greater than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dateDoneGt(Integer dateDoneGt) {
            this.dateDoneGt = dateDoneGt;
            return this;
        }
        
        /**
         * Set dateDoneLt
         * @param dateDoneLt Filter by date done less than Unix time in milliseconds. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder dateDoneLt(Integer dateDoneLt) {
            this.dateDoneLt = dateDoneLt;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Include tasks with specific values in multiple Custom Fields.\\  \\ For example: &#x60;?custom_fields&#x3D;[{\&quot;field_id\&quot;:\&quot;abcdefghi12345678\&quot;,\&quot;operator\&quot;:\&quot;&#x3D;\&quot;,\&quot;value\&quot;:\&quot;1234\&quot;},{\&quot;field_id\&quot;:\&quot;jklmnop123456\&quot;,\&quot;operator\&quot;:\&quot;&lt;\&quot;,\&quot;value\&quot;:\&quot;5\&quot;}]&#x60;\\  \\ If you want to include tasks with specific values in only one Custom Field, use &#x60;custom_field&#x60; instead.\\  \\ Learn more about [filtering using Custom Fields.](https://clickup.com/api) (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder customFields(List<String> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set customItems
         * @param customItems Filter by custom task types. For example: \\  \\ &#x60;?custom_items[]&#x3D;0&amp;custom_items[]&#x3D;1300&#x60; \\  \\ Including &#x60;0&#x60; returns tasks. Including &#x60;1&#x60; returns Milestones. Including any other number returns the custom task type as defined in your Workspace. (optional)
         * @return GetListTasksRequestBuilder
         */
        public GetListTasksRequestBuilder customItems(List<Double> customItems) {
            this.customItems = customItems;
            return this;
        }
        
        /**
         * Build call for getListTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListTasksCall(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems, _callback);
        }


        /**
         * Execute getListTasks request
         * @return GetTasksresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetTasksresponse execute() throws ApiException {
            ApiResponse<GetTasksresponse> localVarResp = getListTasksWithHttpInfo(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListTasks request with HTTP info returned
         * @return ApiResponse&lt;GetTasksresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTasksresponse> executeWithHttpInfo() throws ApiException {
            return getListTasksWithHttpInfo(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems);
        }

        /**
         * Execute getListTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTasksresponse> _callback) throws ApiException {
            return getListTasksAsync(listId, archived, includeMarkdownDescription, page, orderBy, reverse, subtasks, statuses, includeClosed, assignees, tags, dueDateGt, dueDateLt, dateCreatedGt, dateCreatedLt, dateUpdatedGt, dateUpdatedLt, dateDoneGt, dateDoneLt, customFields, customItems, _callback);
        }
    }

    /**
     * Get Tasks
     * View the tasks in a List. Responses are limited to 100 tasks per page. You can only view task information of tasks you can access. \\  \\ This endpoint only includes tasks where the specified &#x60;list_id&#x60; is their home List. Tasks added to the &#x60;list_id&#x60; with a different home List are not included in the response.
     * @param listId To find the list_id:&lt;br&gt; 1. In the Sidebar, hover over the List and click the **ellipsis ...** menu.&lt;br&gt; 2. Select **Copy link.**&lt;br&gt; 3. Use the copied URL to find the list_id. The list_id is the number that follows /li in the URL. (required)
     * @return GetListTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListTasksRequestBuilder getListTasks(double listId) throws IllegalArgumentException {
        
        return new GetListTasksRequestBuilder(listId);
    }
    private okhttp3.Call getTaskDetailsCall(String taskId, Boolean customTaskIds, Double teamId, Boolean includeSubtasks, Boolean includeMarkdownDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (includeSubtasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_subtasks", includeSubtasks));
        }

        if (includeMarkdownDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_markdown_description", includeMarkdownDescription));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskDetailsValidateBeforeCall(String taskId, Boolean customTaskIds, Double teamId, Boolean includeSubtasks, Boolean includeMarkdownDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskDetails(Async)");
        }

        return getTaskDetailsCall(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription, _callback);

    }


    private ApiResponse<GetTaskresponse> getTaskDetailsWithHttpInfo(String taskId, Boolean customTaskIds, Double teamId, Boolean includeSubtasks, Boolean includeMarkdownDescription) throws ApiException {
        okhttp3.Call localVarCall = getTaskDetailsValidateBeforeCall(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription, null);
        Type localVarReturnType = new TypeToken<GetTaskresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskDetailsAsync(String taskId, Boolean customTaskIds, Double teamId, Boolean includeSubtasks, Boolean includeMarkdownDescription, final ApiCallback<GetTaskresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskDetailsValidateBeforeCall(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription, _callback);
        Type localVarReturnType = new TypeToken<GetTaskresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskDetailsRequestBuilder {
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;
        private Boolean includeSubtasks;
        private Boolean includeMarkdownDescription;

        private GetTaskDetailsRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return GetTaskDetailsRequestBuilder
         */
        public GetTaskDetailsRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return GetTaskDetailsRequestBuilder
         */
        public GetTaskDetailsRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set includeSubtasks
         * @param includeSubtasks Include subtasks, default false (optional)
         * @return GetTaskDetailsRequestBuilder
         */
        public GetTaskDetailsRequestBuilder includeSubtasks(Boolean includeSubtasks) {
            this.includeSubtasks = includeSubtasks;
            return this;
        }
        
        /**
         * Set includeMarkdownDescription
         * @param includeMarkdownDescription To return task descriptions in Markdown format, use &#x60;?include_markdown_description&#x3D;true&#x60;. (optional)
         * @return GetTaskDetailsRequestBuilder
         */
        public GetTaskDetailsRequestBuilder includeMarkdownDescription(Boolean includeMarkdownDescription) {
            this.includeMarkdownDescription = includeMarkdownDescription;
            return this;
        }
        
        /**
         * Build call for getTaskDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskDetailsCall(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription, _callback);
        }


        /**
         * Execute getTaskDetails request
         * @return GetTaskresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetTaskresponse execute() throws ApiException {
            ApiResponse<GetTaskresponse> localVarResp = getTaskDetailsWithHttpInfo(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskDetails request with HTTP info returned
         * @return ApiResponse&lt;GetTaskresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTaskresponse> executeWithHttpInfo() throws ApiException {
            return getTaskDetailsWithHttpInfo(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription);
        }

        /**
         * Execute getTaskDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTaskresponse> _callback) throws ApiException {
            return getTaskDetailsAsync(taskId, customTaskIds, teamId, includeSubtasks, includeMarkdownDescription, _callback);
        }
    }

    /**
     * Get Task
     * View information about a task. You can only view task information of tasks you can access. \\  \\ Tasks with attachments will return an \&quot;attachments\&quot; response.
     * @param taskId  (required)
     * @return GetTaskDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskDetailsRequestBuilder getTaskDetails(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new GetTaskDetailsRequestBuilder(taskId);
    }
    private okhttp3.Call getTimeInStatusCall(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/time_in_status"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeInStatusValidateBeforeCall(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTimeInStatus(Async)");
        }

        return getTimeInStatusCall(taskId, customTaskIds, teamId, _callback);

    }


    private ApiResponse<GetTasksTimeinStatusresponse> getTimeInStatusWithHttpInfo(String taskId, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = getTimeInStatusValidateBeforeCall(taskId, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<GetTasksTimeinStatusresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeInStatusAsync(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback<GetTasksTimeinStatusresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeInStatusValidateBeforeCall(taskId, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<GetTasksTimeinStatusresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeInStatusRequestBuilder {
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;

        private GetTimeInStatusRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return GetTimeInStatusRequestBuilder
         */
        public GetTimeInStatusRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return GetTimeInStatusRequestBuilder
         */
        public GetTimeInStatusRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for getTimeInStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeInStatusCall(taskId, customTaskIds, teamId, _callback);
        }


        /**
         * Execute getTimeInStatus request
         * @return GetTasksTimeinStatusresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetTasksTimeinStatusresponse execute() throws ApiException {
            ApiResponse<GetTasksTimeinStatusresponse> localVarResp = getTimeInStatusWithHttpInfo(taskId, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeInStatus request with HTTP info returned
         * @return ApiResponse&lt;GetTasksTimeinStatusresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTasksTimeinStatusresponse> executeWithHttpInfo() throws ApiException {
            return getTimeInStatusWithHttpInfo(taskId, customTaskIds, teamId);
        }

        /**
         * Execute getTimeInStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTasksTimeinStatusresponse> _callback) throws ApiException {
            return getTimeInStatusAsync(taskId, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Get Task&#39;s Time in Status
     * View how long a task has been in each status. The Total time in Status ClickApp must first be enabled by the Workspace owner or an admin.
     * @param taskId  (required)
     * @return GetTimeInStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeInStatusRequestBuilder getTimeInStatus(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new GetTimeInStatusRequestBuilder(taskId);
    }
    private okhttp3.Call getTimeInStatusBulkCall(String taskIds, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/bulk_time_in_status/task_ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (taskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_ids", taskIds));
        }

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeInStatusBulkValidateBeforeCall(String taskIds, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskIds' is set
        if (taskIds == null) {
            throw new ApiException("Missing the required parameter 'taskIds' when calling getTimeInStatusBulk(Async)");
        }

        return getTimeInStatusBulkCall(taskIds, customTaskIds, teamId, _callback);

    }


    private ApiResponse<GetBulkTasksTimeinStatusresponse> getTimeInStatusBulkWithHttpInfo(String taskIds, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = getTimeInStatusBulkValidateBeforeCall(taskIds, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<GetBulkTasksTimeinStatusresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeInStatusBulkAsync(String taskIds, Boolean customTaskIds, Double teamId, final ApiCallback<GetBulkTasksTimeinStatusresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeInStatusBulkValidateBeforeCall(taskIds, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<GetBulkTasksTimeinStatusresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeInStatusBulkRequestBuilder {
        private final String taskIds;
        private Boolean customTaskIds;
        private Double teamId;

        private GetTimeInStatusBulkRequestBuilder(String taskIds) {
            this.taskIds = taskIds;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return GetTimeInStatusBulkRequestBuilder
         */
        public GetTimeInStatusBulkRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return GetTimeInStatusBulkRequestBuilder
         */
        public GetTimeInStatusBulkRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for getTimeInStatusBulk
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeInStatusBulkCall(taskIds, customTaskIds, teamId, _callback);
        }


        /**
         * Execute getTimeInStatusBulk request
         * @return GetBulkTasksTimeinStatusresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetBulkTasksTimeinStatusresponse execute() throws ApiException {
            ApiResponse<GetBulkTasksTimeinStatusresponse> localVarResp = getTimeInStatusBulkWithHttpInfo(taskIds, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeInStatusBulk request with HTTP info returned
         * @return ApiResponse&lt;GetBulkTasksTimeinStatusresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetBulkTasksTimeinStatusresponse> executeWithHttpInfo() throws ApiException {
            return getTimeInStatusBulkWithHttpInfo(taskIds, customTaskIds, teamId);
        }

        /**
         * Execute getTimeInStatusBulk request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetBulkTasksTimeinStatusresponse> _callback) throws ApiException {
            return getTimeInStatusBulkAsync(taskIds, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Get Bulk Tasks&#39; Time in Status
     * View how long two or more tasks have been in each status.
     * @param taskIds Include this paramater once per &#x60;task_id&#x60;. You can include up to 100 task ids per request. For example: &#x60;task_ids&#x3D;3cuh&amp;task_ids&#x3D;g4fs&#x60; (required)
     * @return GetTimeInStatusBulkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeInStatusBulkRequestBuilder getTimeInStatusBulk(String taskIds) throws IllegalArgumentException {
        if (taskIds == null) throw new IllegalArgumentException("\"taskIds\" is required but got null");
            

        return new GetTimeInStatusBulkRequestBuilder(taskIds);
    }
    private okhttp3.Call removeTaskByIdCall(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTaskByIdValidateBeforeCall(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeTaskById(Async)");
        }

        return removeTaskByIdCall(taskId, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> removeTaskByIdWithHttpInfo(String taskId, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = removeTaskByIdValidateBeforeCall(taskId, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTaskByIdAsync(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTaskByIdValidateBeforeCall(taskId, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTaskByIdRequestBuilder {
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;

        private RemoveTaskByIdRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RemoveTaskByIdRequestBuilder
         */
        public RemoveTaskByIdRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RemoveTaskByIdRequestBuilder
         */
        public RemoveTaskByIdRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for removeTaskById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTaskByIdCall(taskId, customTaskIds, teamId, _callback);
        }


        /**
         * Execute removeTaskById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeTaskByIdWithHttpInfo(taskId, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTaskById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeTaskByIdWithHttpInfo(taskId, customTaskIds, teamId);
        }

        /**
         * Execute removeTaskById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeTaskByIdAsync(taskId, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Delete Task
     * Delete a task from your Workspace.
     * @param taskId  (required)
     * @return RemoveTaskByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTaskByIdRequestBuilder removeTaskById(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new RemoveTaskByIdRequestBuilder(taskId);
    }
    private okhttp3.Call updateTaskFieldsCall(String taskId, UpdateTaskrequest updateTaskrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTaskrequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskFieldsValidateBeforeCall(String taskId, UpdateTaskrequest updateTaskrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateTaskFields(Async)");
        }

        // verify the required parameter 'updateTaskrequest' is set
        if (updateTaskrequest == null) {
            throw new ApiException("Missing the required parameter 'updateTaskrequest' when calling updateTaskFields(Async)");
        }

        return updateTaskFieldsCall(taskId, updateTaskrequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<UpdateTaskresponse> updateTaskFieldsWithHttpInfo(String taskId, UpdateTaskrequest updateTaskrequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = updateTaskFieldsValidateBeforeCall(taskId, updateTaskrequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<UpdateTaskresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaskFieldsAsync(String taskId, UpdateTaskrequest updateTaskrequest, Boolean customTaskIds, Double teamId, final ApiCallback<UpdateTaskresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskFieldsValidateBeforeCall(taskId, updateTaskrequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<UpdateTaskresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTaskFieldsRequestBuilder {
        private final String taskId;
        private String description;
        private Object customItemId;
        private String name;
        private String status;
        private Integer priority;
        private Integer dueDate;
        private Boolean dueDateTime;
        private String parent;
        private Integer timeEstimate;
        private Integer startDate;
        private Boolean startDateTime;
        private Assignees assignees;
        private Boolean archived;
        private Boolean customTaskIds;
        private Double teamId;

        private UpdateTaskFieldsRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set description
         * @param description To clear the task description, include &#x60;Description&#x60; with &#x60;\\\&quot; \\\&quot;&#x60;. (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set customItemId
         * @param customItemId To convert an item using a custom task type into a task, send &#x60;&#39;null&#39;&#x60;. \\\\  \\\\ To update this task to be a Milestone, send a value of &#x60;1&#x60;. \\\\  \\\\ To use a custom task type, send the custom task type ID as defined in your Workspace, such as &#x60;2&#x60;. (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder customItemId(Object customItemId) {
            this.customItemId = customItemId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder dueDate(Integer dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set dueDateTime
         * @param dueDateTime  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder dueDateTime(Boolean dueDateTime) {
            this.dueDateTime = dueDateTime;
            return this;
        }
        
        /**
         * Set parent
         * @param parent You can move a subtask to another parent task by including &#x60;\\\&quot;parent\\\&quot;&#x60; with a valid &#x60;task id&#x60;.\\\\  \\\\ You cannot convert a subtask to a task by setting &#x60;\\\&quot;parent\\\&quot;&#x60; to &#x60;null&#x60;. (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder parent(String parent) {
            this.parent = parent;
            return this;
        }
        
        /**
         * Set timeEstimate
         * @param timeEstimate  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder timeEstimate(Integer timeEstimate) {
            this.timeEstimate = timeEstimate;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder startDate(Integer startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set startDateTime
         * @param startDateTime  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder startDateTime(Boolean startDateTime) {
            this.startDateTime = startDateTime;
            return this;
        }
        
        /**
         * Set assignees
         * @param assignees  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder assignees(Assignees assignees) {
            this.assignees = assignees;
            return this;
        }
        
        /**
         * Set archived
         * @param archived  (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return UpdateTaskFieldsRequestBuilder
         */
        public UpdateTaskFieldsRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for updateTaskFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTaskrequest updateTaskrequest = buildBodyParams();
            return updateTaskFieldsCall(taskId, updateTaskrequest, customTaskIds, teamId, _callback);
        }

        private UpdateTaskrequest buildBodyParams() {
            UpdateTaskrequest updateTaskrequest = new UpdateTaskrequest();
            updateTaskrequest.description(this.description);
            updateTaskrequest.customItemId(this.customItemId);
            updateTaskrequest.name(this.name);
            updateTaskrequest.status(this.status);
            updateTaskrequest.priority(this.priority);
            updateTaskrequest.dueDate(this.dueDate);
            updateTaskrequest.dueDateTime(this.dueDateTime);
            updateTaskrequest.parent(this.parent);
            updateTaskrequest.timeEstimate(this.timeEstimate);
            updateTaskrequest.startDate(this.startDate);
            updateTaskrequest.startDateTime(this.startDateTime);
            updateTaskrequest.assignees(this.assignees);
            updateTaskrequest.archived(this.archived);
            return updateTaskrequest;
        }

        /**
         * Execute updateTaskFields request
         * @return UpdateTaskresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateTaskresponse execute() throws ApiException {
            UpdateTaskrequest updateTaskrequest = buildBodyParams();
            ApiResponse<UpdateTaskresponse> localVarResp = updateTaskFieldsWithHttpInfo(taskId, updateTaskrequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTaskFields request with HTTP info returned
         * @return ApiResponse&lt;UpdateTaskresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateTaskresponse> executeWithHttpInfo() throws ApiException {
            UpdateTaskrequest updateTaskrequest = buildBodyParams();
            return updateTaskFieldsWithHttpInfo(taskId, updateTaskrequest, customTaskIds, teamId);
        }

        /**
         * Execute updateTaskFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateTaskresponse> _callback) throws ApiException {
            UpdateTaskrequest updateTaskrequest = buildBodyParams();
            return updateTaskFieldsAsync(taskId, updateTaskrequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Update Task
     * Update a task by including one or more fields in the request body.
     * @param taskId  (required)
     * @param updateTaskrequest ***Note:** To update Custom Fields on a task, you must use the Set Custom Field endpoint.* (required)
     * @return UpdateTaskFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskFieldsRequestBuilder updateTaskFields(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new UpdateTaskFieldsRequestBuilder(taskId);
    }
}
