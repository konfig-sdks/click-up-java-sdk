/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateFolderlessListrequest;
import com.konfigthis.client.model.CreateFolderlessListresponse;
import com.konfigthis.client.model.CreateListrequest;
import com.konfigthis.client.model.CreateListresponse;
import com.konfigthis.client.model.GetFolderlessListsresponse;
import com.konfigthis.client.model.GetListresponse;
import com.konfigthis.client.model.GetListsresponse;
import com.konfigthis.client.model.UpdateListrequest;
import com.konfigthis.client.model.UpdateListresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ListsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ListsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTaskToListCall(Double listId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/task/{task_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTaskToListValidateBeforeCall(Double listId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addTaskToList(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addTaskToList(Async)");
        }

        return addTaskToListCall(listId, taskId, _callback);

    }


    private ApiResponse<Object> addTaskToListWithHttpInfo(Double listId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = addTaskToListValidateBeforeCall(listId, taskId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTaskToListAsync(Double listId, String taskId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTaskToListValidateBeforeCall(listId, taskId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTaskToListRequestBuilder {
        private final Double listId;
        private final String taskId;

        private AddTaskToListRequestBuilder(double listId, String taskId) {
            this.listId = listId;
            this.taskId = taskId;
        }

        /**
         * Build call for addTaskToList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addTaskToListCall(listId, taskId, _callback);
        }


        /**
         * Execute addTaskToList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = addTaskToListWithHttpInfo(listId, taskId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTaskToList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return addTaskToListWithHttpInfo(listId, taskId);
        }

        /**
         * Execute addTaskToList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return addTaskToListAsync(listId, taskId, _callback);
        }
    }

    /**
     * Add Task To List
     * Add a task to an additional List. \\  \\ ***Note:** This endpoint requires the [Tasks in Multiple List ClickApp](https://help.clickup.com/hc/en-us/articles/6309958824727-Tasks-in-Multiple-Lists) to be enabled.*
     * @param listId  (required)
     * @param taskId  (required)
     * @return AddTaskToListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddTaskToListRequestBuilder addTaskToList(double listId, String taskId) throws IllegalArgumentException {
        
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new AddTaskToListRequestBuilder(listId, taskId);
    }
    private okhttp3.Call addToFolderCall(Double folderId, CreateListrequest createListrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createListrequest;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}/list"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToFolderValidateBeforeCall(Double folderId, CreateListrequest createListrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling addToFolder(Async)");
        }

        // verify the required parameter 'createListrequest' is set
        if (createListrequest == null) {
            throw new ApiException("Missing the required parameter 'createListrequest' when calling addToFolder(Async)");
        }

        return addToFolderCall(folderId, createListrequest, _callback);

    }


    private ApiResponse<CreateListresponse> addToFolderWithHttpInfo(Double folderId, CreateListrequest createListrequest) throws ApiException {
        okhttp3.Call localVarCall = addToFolderValidateBeforeCall(folderId, createListrequest, null);
        Type localVarReturnType = new TypeToken<CreateListresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToFolderAsync(Double folderId, CreateListrequest createListrequest, final ApiCallback<CreateListresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToFolderValidateBeforeCall(folderId, createListrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateListresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToFolderRequestBuilder {
        private final String name;
        private final Double folderId;
        private String content;
        private Integer dueDate;
        private Boolean dueDateTime;
        private Integer priority;
        private Integer assignee;
        private String status;

        private AddToFolderRequestBuilder(String name, double folderId) {
            this.name = name;
            this.folderId = folderId;
        }

        /**
         * Set content
         * @param content  (optional)
         * @return AddToFolderRequestBuilder
         */
        public AddToFolderRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate  (optional)
         * @return AddToFolderRequestBuilder
         */
        public AddToFolderRequestBuilder dueDate(Integer dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set dueDateTime
         * @param dueDateTime  (optional)
         * @return AddToFolderRequestBuilder
         */
        public AddToFolderRequestBuilder dueDateTime(Boolean dueDateTime) {
            this.dueDateTime = dueDateTime;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return AddToFolderRequestBuilder
         */
        public AddToFolderRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee Include a &#x60;user_id&#x60; to assign this List. (optional)
         * @return AddToFolderRequestBuilder
         */
        public AddToFolderRequestBuilder assignee(Integer assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set status
         * @param status **Status** refers to the List color rather than the task Statuses available in the List. (optional)
         * @return AddToFolderRequestBuilder
         */
        public AddToFolderRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for addToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateListrequest createListrequest = buildBodyParams();
            return addToFolderCall(folderId, createListrequest, _callback);
        }

        private CreateListrequest buildBodyParams() {
            CreateListrequest createListrequest = new CreateListrequest();
            createListrequest.name(this.name);
            createListrequest.content(this.content);
            createListrequest.dueDate(this.dueDate);
            createListrequest.dueDateTime(this.dueDateTime);
            createListrequest.priority(this.priority);
            createListrequest.assignee(this.assignee);
            createListrequest.status(this.status);
            return createListrequest;
        }

        /**
         * Execute addToFolder request
         * @return CreateListresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateListresponse execute() throws ApiException {
            CreateListrequest createListrequest = buildBodyParams();
            ApiResponse<CreateListresponse> localVarResp = addToFolderWithHttpInfo(folderId, createListrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToFolder request with HTTP info returned
         * @return ApiResponse&lt;CreateListresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateListresponse> executeWithHttpInfo() throws ApiException {
            CreateListrequest createListrequest = buildBodyParams();
            return addToFolderWithHttpInfo(folderId, createListrequest);
        }

        /**
         * Execute addToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateListresponse> _callback) throws ApiException {
            CreateListrequest createListrequest = buildBodyParams();
            return addToFolderAsync(folderId, createListrequest, _callback);
        }
    }

    /**
     * Create List
     * Add a new List to a Folder.
     * @param folderId  (required)
     * @param createListrequest  (required)
     * @return AddToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddToFolderRequestBuilder addToFolder(String name, double folderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new AddToFolderRequestBuilder(name, folderId);
    }
    private okhttp3.Call createFolderlessListCall(Double spaceId, CreateFolderlessListrequest createFolderlessListrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFolderlessListrequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}/list"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFolderlessListValidateBeforeCall(Double spaceId, CreateFolderlessListrequest createFolderlessListrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createFolderlessList(Async)");
        }

        // verify the required parameter 'createFolderlessListrequest' is set
        if (createFolderlessListrequest == null) {
            throw new ApiException("Missing the required parameter 'createFolderlessListrequest' when calling createFolderlessList(Async)");
        }

        return createFolderlessListCall(spaceId, createFolderlessListrequest, _callback);

    }


    private ApiResponse<CreateFolderlessListresponse> createFolderlessListWithHttpInfo(Double spaceId, CreateFolderlessListrequest createFolderlessListrequest) throws ApiException {
        okhttp3.Call localVarCall = createFolderlessListValidateBeforeCall(spaceId, createFolderlessListrequest, null);
        Type localVarReturnType = new TypeToken<CreateFolderlessListresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFolderlessListAsync(Double spaceId, CreateFolderlessListrequest createFolderlessListrequest, final ApiCallback<CreateFolderlessListresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFolderlessListValidateBeforeCall(spaceId, createFolderlessListrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFolderlessListresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFolderlessListRequestBuilder {
        private final String name;
        private final Double spaceId;
        private String content;
        private Integer dueDate;
        private Boolean dueDateTime;
        private Integer priority;
        private Integer assignee;
        private String status;

        private CreateFolderlessListRequestBuilder(String name, double spaceId) {
            this.name = name;
            this.spaceId = spaceId;
        }

        /**
         * Set content
         * @param content  (optional)
         * @return CreateFolderlessListRequestBuilder
         */
        public CreateFolderlessListRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate  (optional)
         * @return CreateFolderlessListRequestBuilder
         */
        public CreateFolderlessListRequestBuilder dueDate(Integer dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set dueDateTime
         * @param dueDateTime  (optional)
         * @return CreateFolderlessListRequestBuilder
         */
        public CreateFolderlessListRequestBuilder dueDateTime(Boolean dueDateTime) {
            this.dueDateTime = dueDateTime;
            return this;
        }
        
        /**
         * Set priority
         * @param priority  (optional)
         * @return CreateFolderlessListRequestBuilder
         */
        public CreateFolderlessListRequestBuilder priority(Integer priority) {
            this.priority = priority;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee Include a &#x60;user_id&#x60; to add a List owner. (optional)
         * @return CreateFolderlessListRequestBuilder
         */
        public CreateFolderlessListRequestBuilder assignee(Integer assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set status
         * @param status **Status** refers to the List color rather than the task Statuses available in the List. (optional)
         * @return CreateFolderlessListRequestBuilder
         */
        public CreateFolderlessListRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createFolderlessList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateFolderlessListrequest createFolderlessListrequest = buildBodyParams();
            return createFolderlessListCall(spaceId, createFolderlessListrequest, _callback);
        }

        private CreateFolderlessListrequest buildBodyParams() {
            CreateFolderlessListrequest createFolderlessListrequest = new CreateFolderlessListrequest();
            createFolderlessListrequest.name(this.name);
            createFolderlessListrequest.content(this.content);
            createFolderlessListrequest.dueDate(this.dueDate);
            createFolderlessListrequest.dueDateTime(this.dueDateTime);
            createFolderlessListrequest.priority(this.priority);
            createFolderlessListrequest.assignee(this.assignee);
            createFolderlessListrequest.status(this.status);
            return createFolderlessListrequest;
        }

        /**
         * Execute createFolderlessList request
         * @return CreateFolderlessListresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateFolderlessListresponse execute() throws ApiException {
            CreateFolderlessListrequest createFolderlessListrequest = buildBodyParams();
            ApiResponse<CreateFolderlessListresponse> localVarResp = createFolderlessListWithHttpInfo(spaceId, createFolderlessListrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFolderlessList request with HTTP info returned
         * @return ApiResponse&lt;CreateFolderlessListresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFolderlessListresponse> executeWithHttpInfo() throws ApiException {
            CreateFolderlessListrequest createFolderlessListrequest = buildBodyParams();
            return createFolderlessListWithHttpInfo(spaceId, createFolderlessListrequest);
        }

        /**
         * Execute createFolderlessList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFolderlessListresponse> _callback) throws ApiException {
            CreateFolderlessListrequest createFolderlessListrequest = buildBodyParams();
            return createFolderlessListAsync(spaceId, createFolderlessListrequest, _callback);
        }
    }

    /**
     * Create Folderless List
     * Add a new List in a Space.
     * @param spaceId  (required)
     * @param createFolderlessListrequest  (required)
     * @return CreateFolderlessListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateFolderlessListRequestBuilder createFolderlessList(String name, double spaceId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        
        return new CreateFolderlessListRequestBuilder(name, spaceId);
    }
    private okhttp3.Call getFolderListsCall(Double folderId, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}/list"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderListsValidateBeforeCall(Double folderId, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling getFolderLists(Async)");
        }

        return getFolderListsCall(folderId, archived, _callback);

    }


    private ApiResponse<GetListsresponse> getFolderListsWithHttpInfo(Double folderId, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getFolderListsValidateBeforeCall(folderId, archived, null);
        Type localVarReturnType = new TypeToken<GetListsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderListsAsync(Double folderId, Boolean archived, final ApiCallback<GetListsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderListsValidateBeforeCall(folderId, archived, _callback);
        Type localVarReturnType = new TypeToken<GetListsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderListsRequestBuilder {
        private final Double folderId;
        private Boolean archived;

        private GetFolderListsRequestBuilder(double folderId) {
            this.folderId = folderId;
        }

        /**
         * Set archived
         * @param archived  (optional)
         * @return GetFolderListsRequestBuilder
         */
        public GetFolderListsRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Build call for getFolderLists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderListsCall(folderId, archived, _callback);
        }


        /**
         * Execute getFolderLists request
         * @return GetListsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetListsresponse execute() throws ApiException {
            ApiResponse<GetListsresponse> localVarResp = getFolderListsWithHttpInfo(folderId, archived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderLists request with HTTP info returned
         * @return ApiResponse&lt;GetListsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetListsresponse> executeWithHttpInfo() throws ApiException {
            return getFolderListsWithHttpInfo(folderId, archived);
        }

        /**
         * Execute getFolderLists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetListsresponse> _callback) throws ApiException {
            return getFolderListsAsync(folderId, archived, _callback);
        }
    }

    /**
     * Get Lists
     * View the Lists within a Folder.
     * @param folderId  (required)
     * @return GetFolderListsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderListsRequestBuilder getFolderLists(double folderId) throws IllegalArgumentException {
        
        return new GetFolderListsRequestBuilder(folderId);
    }
    private okhttp3.Call getFolderlessCall(Double spaceId, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/space/{space_id}/list"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderlessValidateBeforeCall(Double spaceId, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getFolderless(Async)");
        }

        return getFolderlessCall(spaceId, archived, _callback);

    }


    private ApiResponse<GetFolderlessListsresponse> getFolderlessWithHttpInfo(Double spaceId, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getFolderlessValidateBeforeCall(spaceId, archived, null);
        Type localVarReturnType = new TypeToken<GetFolderlessListsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderlessAsync(Double spaceId, Boolean archived, final ApiCallback<GetFolderlessListsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderlessValidateBeforeCall(spaceId, archived, _callback);
        Type localVarReturnType = new TypeToken<GetFolderlessListsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderlessRequestBuilder {
        private final Double spaceId;
        private Boolean archived;

        private GetFolderlessRequestBuilder(double spaceId) {
            this.spaceId = spaceId;
        }

        /**
         * Set archived
         * @param archived  (optional)
         * @return GetFolderlessRequestBuilder
         */
        public GetFolderlessRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Build call for getFolderless
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderlessCall(spaceId, archived, _callback);
        }


        /**
         * Execute getFolderless request
         * @return GetFolderlessListsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetFolderlessListsresponse execute() throws ApiException {
            ApiResponse<GetFolderlessListsresponse> localVarResp = getFolderlessWithHttpInfo(spaceId, archived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolderless request with HTTP info returned
         * @return ApiResponse&lt;GetFolderlessListsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetFolderlessListsresponse> executeWithHttpInfo() throws ApiException {
            return getFolderlessWithHttpInfo(spaceId, archived);
        }

        /**
         * Execute getFolderless request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetFolderlessListsresponse> _callback) throws ApiException {
            return getFolderlessAsync(spaceId, archived, _callback);
        }
    }

    /**
     * Get Folderless Lists
     * View the Lists in a Space that aren&#39;t located in a Folder.
     * @param spaceId  (required)
     * @return GetFolderlessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderlessRequestBuilder getFolderless(double spaceId) throws IllegalArgumentException {
        
        return new GetFolderlessRequestBuilder(spaceId);
    }
    private okhttp3.Call getListDetailsCall(Double listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListDetailsValidateBeforeCall(Double listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListDetails(Async)");
        }

        return getListDetailsCall(listId, _callback);

    }


    private ApiResponse<GetListresponse> getListDetailsWithHttpInfo(Double listId) throws ApiException {
        okhttp3.Call localVarCall = getListDetailsValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<GetListresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListDetailsAsync(Double listId, final ApiCallback<GetListresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListDetailsValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<GetListresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListDetailsRequestBuilder {
        private final Double listId;

        private GetListDetailsRequestBuilder(double listId) {
            this.listId = listId;
        }

        /**
         * Build call for getListDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListDetailsCall(listId, _callback);
        }


        /**
         * Execute getListDetails request
         * @return GetListresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetListresponse execute() throws ApiException {
            ApiResponse<GetListresponse> localVarResp = getListDetailsWithHttpInfo(listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListDetails request with HTTP info returned
         * @return ApiResponse&lt;GetListresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetListresponse> executeWithHttpInfo() throws ApiException {
            return getListDetailsWithHttpInfo(listId);
        }

        /**
         * Execute getListDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetListresponse> _callback) throws ApiException {
            return getListDetailsAsync(listId, _callback);
        }
    }

    /**
     * Get List
     * View information about a List.
     * @param listId  (required)
     * @return GetListDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListDetailsRequestBuilder getListDetails(double listId) throws IllegalArgumentException {
        
        return new GetListDetailsRequestBuilder(listId);
    }
    private okhttp3.Call removeListCall(Double listId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeListValidateBeforeCall(Double listId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling removeList(Async)");
        }

        return removeListCall(listId, _callback);

    }


    private ApiResponse<Object> removeListWithHttpInfo(Double listId) throws ApiException {
        okhttp3.Call localVarCall = removeListValidateBeforeCall(listId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeListAsync(Double listId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeListValidateBeforeCall(listId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveListRequestBuilder {
        private final Double listId;

        private RemoveListRequestBuilder(double listId) {
            this.listId = listId;
        }

        /**
         * Build call for removeList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeListCall(listId, _callback);
        }


        /**
         * Execute removeList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeListWithHttpInfo(listId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeListWithHttpInfo(listId);
        }

        /**
         * Execute removeList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeListAsync(listId, _callback);
        }
    }

    /**
     * Delete List
     * Delete a List from your Workspace.
     * @param listId  (required)
     * @return RemoveListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveListRequestBuilder removeList(double listId) throws IllegalArgumentException {
        
        return new RemoveListRequestBuilder(listId);
    }
    private okhttp3.Call removeTaskFromListCall(Double listId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/task/{task_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTaskFromListValidateBeforeCall(Double listId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling removeTaskFromList(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeTaskFromList(Async)");
        }

        return removeTaskFromListCall(listId, taskId, _callback);

    }


    private ApiResponse<Object> removeTaskFromListWithHttpInfo(Double listId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = removeTaskFromListValidateBeforeCall(listId, taskId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTaskFromListAsync(Double listId, String taskId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTaskFromListValidateBeforeCall(listId, taskId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTaskFromListRequestBuilder {
        private final Double listId;
        private final String taskId;

        private RemoveTaskFromListRequestBuilder(double listId, String taskId) {
            this.listId = listId;
            this.taskId = taskId;
        }

        /**
         * Build call for removeTaskFromList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTaskFromListCall(listId, taskId, _callback);
        }


        /**
         * Execute removeTaskFromList request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeTaskFromListWithHttpInfo(listId, taskId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTaskFromList request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeTaskFromListWithHttpInfo(listId, taskId);
        }

        /**
         * Execute removeTaskFromList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeTaskFromListAsync(listId, taskId, _callback);
        }
    }

    /**
     * Remove Task From List
     * Remove a task from an additional List. You can&#39;t remove a task from its home List. \\  \\ ***Note:** This endpoint requires the [Tasks in Multiple List ClickApp](https://help.clickup.com/hc/en-us/articles/6309958824727-Tasks-in-Multiple-Lists) to be enabled.*
     * @param listId  (required)
     * @param taskId  (required)
     * @return RemoveTaskFromListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTaskFromListRequestBuilder removeTaskFromList(double listId, String taskId) throws IllegalArgumentException {
        
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new RemoveTaskFromListRequestBuilder(listId, taskId);
    }
    private okhttp3.Call updateListInfoDueDatePriorityAssigneeColorCall(String listId, UpdateListrequest updateListrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateListrequest;

        // create path and map variables
        String localVarPath = "/list/{list_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateListInfoDueDatePriorityAssigneeColorValidateBeforeCall(String listId, UpdateListrequest updateListrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling updateListInfoDueDatePriorityAssigneeColor(Async)");
        }

        // verify the required parameter 'updateListrequest' is set
        if (updateListrequest == null) {
            throw new ApiException("Missing the required parameter 'updateListrequest' when calling updateListInfoDueDatePriorityAssigneeColor(Async)");
        }

        return updateListInfoDueDatePriorityAssigneeColorCall(listId, updateListrequest, _callback);

    }


    private ApiResponse<UpdateListresponse> updateListInfoDueDatePriorityAssigneeColorWithHttpInfo(String listId, UpdateListrequest updateListrequest) throws ApiException {
        okhttp3.Call localVarCall = updateListInfoDueDatePriorityAssigneeColorValidateBeforeCall(listId, updateListrequest, null);
        Type localVarReturnType = new TypeToken<UpdateListresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateListInfoDueDatePriorityAssigneeColorAsync(String listId, UpdateListrequest updateListrequest, final ApiCallback<UpdateListresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateListInfoDueDatePriorityAssigneeColorValidateBeforeCall(listId, updateListrequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateListresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateListInfoDueDatePriorityAssigneeColorRequestBuilder {
        private final String name;
        private final String content;
        private final Integer dueDate;
        private final Boolean dueDateTime;
        private final Integer priority;
        private final String assignee;
        private final String status;
        private final Boolean unsetStatus;
        private final String listId;

        private UpdateListInfoDueDatePriorityAssigneeColorRequestBuilder(String name, String content, Integer dueDate, Boolean dueDateTime, Integer priority, String assignee, String status, Boolean unsetStatus, String listId) {
            this.name = name;
            this.content = content;
            this.dueDate = dueDate;
            this.dueDateTime = dueDateTime;
            this.priority = priority;
            this.assignee = assignee;
            this.status = status;
            this.unsetStatus = unsetStatus;
            this.listId = listId;
        }

        /**
         * Build call for updateListInfoDueDatePriorityAssigneeColor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateListrequest updateListrequest = buildBodyParams();
            return updateListInfoDueDatePriorityAssigneeColorCall(listId, updateListrequest, _callback);
        }

        private UpdateListrequest buildBodyParams() {
            UpdateListrequest updateListrequest = new UpdateListrequest();
            updateListrequest.name(this.name);
            updateListrequest.content(this.content);
            updateListrequest.dueDate(this.dueDate);
            updateListrequest.dueDateTime(this.dueDateTime);
            updateListrequest.priority(this.priority);
            updateListrequest.assignee(this.assignee);
            updateListrequest.status(this.status);
            updateListrequest.unsetStatus(this.unsetStatus);
            return updateListrequest;
        }

        /**
         * Execute updateListInfoDueDatePriorityAssigneeColor request
         * @return UpdateListresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateListresponse execute() throws ApiException {
            UpdateListrequest updateListrequest = buildBodyParams();
            ApiResponse<UpdateListresponse> localVarResp = updateListInfoDueDatePriorityAssigneeColorWithHttpInfo(listId, updateListrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateListInfoDueDatePriorityAssigneeColor request with HTTP info returned
         * @return ApiResponse&lt;UpdateListresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateListresponse> executeWithHttpInfo() throws ApiException {
            UpdateListrequest updateListrequest = buildBodyParams();
            return updateListInfoDueDatePriorityAssigneeColorWithHttpInfo(listId, updateListrequest);
        }

        /**
         * Execute updateListInfoDueDatePriorityAssigneeColor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateListresponse> _callback) throws ApiException {
            UpdateListrequest updateListrequest = buildBodyParams();
            return updateListInfoDueDatePriorityAssigneeColorAsync(listId, updateListrequest, _callback);
        }
    }

    /**
     * Update List
     * Rename a List, update the List Info description, set a due date/time, set the List&#39;s priority, set an assignee, set or remove the List color.
     * @param listId  (required)
     * @param updateListrequest  (required)
     * @return UpdateListInfoDueDatePriorityAssigneeColorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateListInfoDueDatePriorityAssigneeColorRequestBuilder updateListInfoDueDatePriorityAssigneeColor(String name, String content, Integer dueDate, Boolean dueDateTime, Integer priority, String assignee, String status, Boolean unsetStatus, String listId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
            

        if (dueDate == null) throw new IllegalArgumentException("\"dueDate\" is required but got null");
        if (dueDateTime == null) throw new IllegalArgumentException("\"dueDateTime\" is required but got null");
        if (priority == null) throw new IllegalArgumentException("\"priority\" is required but got null");
        if (assignee == null) throw new IllegalArgumentException("\"assignee\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (unsetStatus == null) throw new IllegalArgumentException("\"unsetStatus\" is required but got null");
        if (listId == null) throw new IllegalArgumentException("\"listId\" is required but got null");
            

        return new UpdateListInfoDueDatePriorityAssigneeColorRequestBuilder(name, content, dueDate, dueDateTime, priority, assignee, status, unsetStatus, listId);
    }
}
