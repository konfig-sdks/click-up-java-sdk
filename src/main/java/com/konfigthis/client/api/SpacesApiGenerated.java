/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateSpacerequest;
import com.konfigthis.client.model.CreateSpaceresponse;
import com.konfigthis.client.model.Features;
import com.konfigthis.client.model.GetSpaceresponse;
import com.konfigthis.client.model.GetSpacesresponse;
import com.konfigthis.client.model.UpdateSpacerequest;
import com.konfigthis.client.model.UpdateSpaceresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SpacesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpacesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SpacesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewSpaceToWorkspaceCall(Double teamId, CreateSpacerequest createSpacerequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSpacerequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/space"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewSpaceToWorkspaceValidateBeforeCall(Double teamId, CreateSpacerequest createSpacerequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addNewSpaceToWorkspace(Async)");
        }

        // verify the required parameter 'createSpacerequest' is set
        if (createSpacerequest == null) {
            throw new ApiException("Missing the required parameter 'createSpacerequest' when calling addNewSpaceToWorkspace(Async)");
        }

        return addNewSpaceToWorkspaceCall(teamId, createSpacerequest, _callback);

    }


    private ApiResponse<CreateSpaceresponse> addNewSpaceToWorkspaceWithHttpInfo(Double teamId, CreateSpacerequest createSpacerequest) throws ApiException {
        okhttp3.Call localVarCall = addNewSpaceToWorkspaceValidateBeforeCall(teamId, createSpacerequest, null);
        Type localVarReturnType = new TypeToken<CreateSpaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewSpaceToWorkspaceAsync(Double teamId, CreateSpacerequest createSpacerequest, final ApiCallback<CreateSpaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewSpaceToWorkspaceValidateBeforeCall(teamId, createSpacerequest, _callback);
        Type localVarReturnType = new TypeToken<CreateSpaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewSpaceToWorkspaceRequestBuilder {
        private final String name;
        private final Boolean multipleAssignees;
        private final Features features;
        private final Double teamId;

        private AddNewSpaceToWorkspaceRequestBuilder(String name, Boolean multipleAssignees, Features features, double teamId) {
            this.name = name;
            this.multipleAssignees = multipleAssignees;
            this.features = features;
            this.teamId = teamId;
        }

        /**
         * Build call for addNewSpaceToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSpacerequest createSpacerequest = buildBodyParams();
            return addNewSpaceToWorkspaceCall(teamId, createSpacerequest, _callback);
        }

        private CreateSpacerequest buildBodyParams() {
            CreateSpacerequest createSpacerequest = new CreateSpacerequest();
            createSpacerequest.name(this.name);
            createSpacerequest.multipleAssignees(this.multipleAssignees);
            createSpacerequest.features(this.features);
            return createSpacerequest;
        }

        /**
         * Execute addNewSpaceToWorkspace request
         * @return CreateSpaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateSpaceresponse execute() throws ApiException {
            CreateSpacerequest createSpacerequest = buildBodyParams();
            ApiResponse<CreateSpaceresponse> localVarResp = addNewSpaceToWorkspaceWithHttpInfo(teamId, createSpacerequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewSpaceToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;CreateSpaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateSpaceresponse> executeWithHttpInfo() throws ApiException {
            CreateSpacerequest createSpacerequest = buildBodyParams();
            return addNewSpaceToWorkspaceWithHttpInfo(teamId, createSpacerequest);
        }

        /**
         * Execute addNewSpaceToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateSpaceresponse> _callback) throws ApiException {
            CreateSpacerequest createSpacerequest = buildBodyParams();
            return addNewSpaceToWorkspaceAsync(teamId, createSpacerequest, _callback);
        }
    }

    /**
     * Create Space
     * Add a new Space to a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @param createSpacerequest  (required)
     * @return AddNewSpaceToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddNewSpaceToWorkspaceRequestBuilder addNewSpaceToWorkspace(String name, Boolean multipleAssignees, Features features, double teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (multipleAssignees == null) throw new IllegalArgumentException("\"multipleAssignees\" is required but got null");
        if (features == null) throw new IllegalArgumentException("\"features\" is required but got null");
        
        return new AddNewSpaceToWorkspaceRequestBuilder(name, multipleAssignees, features, teamId);
    }
    private okhttp3.Call getDetailsCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/space/{space_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getDetails(Async)");
        }

        return getDetailsCall(spaceId, _callback);

    }


    private ApiResponse<GetSpaceresponse> getDetailsWithHttpInfo(Double spaceId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(spaceId, null);
        Type localVarReturnType = new TypeToken<GetSpaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(Double spaceId, final ApiCallback<GetSpaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(spaceId, _callback);
        Type localVarReturnType = new TypeToken<GetSpaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final Double spaceId;

        private GetDetailsRequestBuilder(double spaceId) {
            this.spaceId = spaceId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(spaceId, _callback);
        }


        /**
         * Execute getDetails request
         * @return GetSpaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetSpaceresponse execute() throws ApiException {
            ApiResponse<GetSpaceresponse> localVarResp = getDetailsWithHttpInfo(spaceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;GetSpaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSpaceresponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(spaceId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSpaceresponse> _callback) throws ApiException {
            return getDetailsAsync(spaceId, _callback);
        }
    }

    /**
     * Get Space
     * View the Spaces available in a Workspace.
     * @param spaceId  (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(double spaceId) throws IllegalArgumentException {
        
        return new GetDetailsRequestBuilder(spaceId);
    }
    private okhttp3.Call getSpaceDetailsCall(Double teamId, Boolean archived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/space"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceDetailsValidateBeforeCall(Double teamId, Boolean archived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getSpaceDetails(Async)");
        }

        return getSpaceDetailsCall(teamId, archived, _callback);

    }


    private ApiResponse<GetSpacesresponse> getSpaceDetailsWithHttpInfo(Double teamId, Boolean archived) throws ApiException {
        okhttp3.Call localVarCall = getSpaceDetailsValidateBeforeCall(teamId, archived, null);
        Type localVarReturnType = new TypeToken<GetSpacesresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpaceDetailsAsync(Double teamId, Boolean archived, final ApiCallback<GetSpacesresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceDetailsValidateBeforeCall(teamId, archived, _callback);
        Type localVarReturnType = new TypeToken<GetSpacesresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpaceDetailsRequestBuilder {
        private final Double teamId;
        private Boolean archived;

        private GetSpaceDetailsRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Set archived
         * @param archived  (optional)
         * @return GetSpaceDetailsRequestBuilder
         */
        public GetSpaceDetailsRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Build call for getSpaceDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpaceDetailsCall(teamId, archived, _callback);
        }


        /**
         * Execute getSpaceDetails request
         * @return GetSpacesresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetSpacesresponse execute() throws ApiException {
            ApiResponse<GetSpacesresponse> localVarResp = getSpaceDetailsWithHttpInfo(teamId, archived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpaceDetails request with HTTP info returned
         * @return ApiResponse&lt;GetSpacesresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSpacesresponse> executeWithHttpInfo() throws ApiException {
            return getSpaceDetailsWithHttpInfo(teamId, archived);
        }

        /**
         * Execute getSpaceDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSpacesresponse> _callback) throws ApiException {
            return getSpaceDetailsAsync(teamId, archived, _callback);
        }
    }

    /**
     * Get Spaces
     * View the Spaces avialable in a Workspace. You can only get member info in private Spaces.
     * @param teamId Team ID (Workspace) (required)
     * @return GetSpaceDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSpaceDetailsRequestBuilder getSpaceDetails(double teamId) throws IllegalArgumentException {
        
        return new GetSpaceDetailsRequestBuilder(teamId);
    }
    private okhttp3.Call removeSpaceCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/space/{space_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSpaceValidateBeforeCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling removeSpace(Async)");
        }

        return removeSpaceCall(spaceId, _callback);

    }


    private ApiResponse<Object> removeSpaceWithHttpInfo(Double spaceId) throws ApiException {
        okhttp3.Call localVarCall = removeSpaceValidateBeforeCall(spaceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSpaceAsync(Double spaceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSpaceValidateBeforeCall(spaceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSpaceRequestBuilder {
        private final Double spaceId;

        private RemoveSpaceRequestBuilder(double spaceId) {
            this.spaceId = spaceId;
        }

        /**
         * Build call for removeSpace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeSpaceCall(spaceId, _callback);
        }


        /**
         * Execute removeSpace request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeSpaceWithHttpInfo(spaceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSpace request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeSpaceWithHttpInfo(spaceId);
        }

        /**
         * Execute removeSpace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeSpaceAsync(spaceId, _callback);
        }
    }

    /**
     * Delete Space
     * Delete a Space from your Workspace.
     * @param spaceId  (required)
     * @return RemoveSpaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSpaceRequestBuilder removeSpace(double spaceId) throws IllegalArgumentException {
        
        return new RemoveSpaceRequestBuilder(spaceId);
    }
    private okhttp3.Call updateDetailsAndEnableClickAppsCall(Double spaceId, UpdateSpacerequest updateSpacerequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSpacerequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDetailsAndEnableClickAppsValidateBeforeCall(Double spaceId, UpdateSpacerequest updateSpacerequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateDetailsAndEnableClickApps(Async)");
        }

        // verify the required parameter 'updateSpacerequest' is set
        if (updateSpacerequest == null) {
            throw new ApiException("Missing the required parameter 'updateSpacerequest' when calling updateDetailsAndEnableClickApps(Async)");
        }

        return updateDetailsAndEnableClickAppsCall(spaceId, updateSpacerequest, _callback);

    }


    private ApiResponse<UpdateSpaceresponse> updateDetailsAndEnableClickAppsWithHttpInfo(Double spaceId, UpdateSpacerequest updateSpacerequest) throws ApiException {
        okhttp3.Call localVarCall = updateDetailsAndEnableClickAppsValidateBeforeCall(spaceId, updateSpacerequest, null);
        Type localVarReturnType = new TypeToken<UpdateSpaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDetailsAndEnableClickAppsAsync(Double spaceId, UpdateSpacerequest updateSpacerequest, final ApiCallback<UpdateSpaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDetailsAndEnableClickAppsValidateBeforeCall(spaceId, updateSpacerequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateSpaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDetailsAndEnableClickAppsRequestBuilder {
        private final String name;
        private final String color;
        private final Boolean _private;
        private final Boolean adminCanManage;
        private final Boolean multipleAssignees;
        private final Features features;
        private final Double spaceId;

        private UpdateDetailsAndEnableClickAppsRequestBuilder(String name, String color, Boolean _private, Boolean adminCanManage, Boolean multipleAssignees, Features features, double spaceId) {
            this.name = name;
            this.color = color;
            this._private = _private;
            this.adminCanManage = adminCanManage;
            this.multipleAssignees = multipleAssignees;
            this.features = features;
            this.spaceId = spaceId;
        }

        /**
         * Build call for updateDetailsAndEnableClickApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateSpacerequest updateSpacerequest = buildBodyParams();
            return updateDetailsAndEnableClickAppsCall(spaceId, updateSpacerequest, _callback);
        }

        private UpdateSpacerequest buildBodyParams() {
            UpdateSpacerequest updateSpacerequest = new UpdateSpacerequest();
            updateSpacerequest.name(this.name);
            updateSpacerequest.color(this.color);
            updateSpacerequest._private(this._private);
            updateSpacerequest.adminCanManage(this.adminCanManage);
            updateSpacerequest.multipleAssignees(this.multipleAssignees);
            updateSpacerequest.features(this.features);
            return updateSpacerequest;
        }

        /**
         * Execute updateDetailsAndEnableClickApps request
         * @return UpdateSpaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateSpaceresponse execute() throws ApiException {
            UpdateSpacerequest updateSpacerequest = buildBodyParams();
            ApiResponse<UpdateSpaceresponse> localVarResp = updateDetailsAndEnableClickAppsWithHttpInfo(spaceId, updateSpacerequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDetailsAndEnableClickApps request with HTTP info returned
         * @return ApiResponse&lt;UpdateSpaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateSpaceresponse> executeWithHttpInfo() throws ApiException {
            UpdateSpacerequest updateSpacerequest = buildBodyParams();
            return updateDetailsAndEnableClickAppsWithHttpInfo(spaceId, updateSpacerequest);
        }

        /**
         * Execute updateDetailsAndEnableClickApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateSpaceresponse> _callback) throws ApiException {
            UpdateSpacerequest updateSpacerequest = buildBodyParams();
            return updateDetailsAndEnableClickAppsAsync(spaceId, updateSpacerequest, _callback);
        }
    }

    /**
     * Update Space
     * Rename, set the Space color, and enable ClickApps for a Space.
     * @param spaceId  (required)
     * @param updateSpacerequest  (required)
     * @return UpdateDetailsAndEnableClickAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDetailsAndEnableClickAppsRequestBuilder updateDetailsAndEnableClickApps(String name, String color, Boolean _private, Boolean adminCanManage, Boolean multipleAssignees, Features features, double spaceId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        if (_private == null) throw new IllegalArgumentException("\"_private\" is required but got null");
        if (adminCanManage == null) throw new IllegalArgumentException("\"adminCanManage\" is required but got null");
        if (multipleAssignees == null) throw new IllegalArgumentException("\"multipleAssignees\" is required but got null");
        if (features == null) throw new IllegalArgumentException("\"features\" is required but got null");
        
        return new UpdateDetailsAndEnableClickAppsRequestBuilder(name, color, _private, adminCanManage, multipleAssignees, features, spaceId);
    }
}
