/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EditUserOnWorkspacerequest;
import com.konfigthis.client.model.EditUserOnWorkspaceresponse;
import com.konfigthis.client.model.GetUserresponse;
import com.konfigthis.client.model.InviteUserToWorkspacerequest;
import com.konfigthis.client.model.InviteUserToWorkspaceresponse;
import com.konfigthis.client.model.RemoveUserFromWorkspaceresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deactivateFromWorkspaceCall(Double teamId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/user/{user_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateFromWorkspaceValidateBeforeCall(Double teamId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling deactivateFromWorkspace(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deactivateFromWorkspace(Async)");
        }

        return deactivateFromWorkspaceCall(teamId, userId, _callback);

    }


    private ApiResponse<RemoveUserFromWorkspaceresponse> deactivateFromWorkspaceWithHttpInfo(Double teamId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = deactivateFromWorkspaceValidateBeforeCall(teamId, userId, null);
        Type localVarReturnType = new TypeToken<RemoveUserFromWorkspaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateFromWorkspaceAsync(Double teamId, Double userId, final ApiCallback<RemoveUserFromWorkspaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateFromWorkspaceValidateBeforeCall(teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<RemoveUserFromWorkspaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateFromWorkspaceRequestBuilder {
        private final Double teamId;
        private final Double userId;

        private DeactivateFromWorkspaceRequestBuilder(double teamId, double userId) {
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for deactivateFromWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateFromWorkspaceCall(teamId, userId, _callback);
        }


        /**
         * Execute deactivateFromWorkspace request
         * @return RemoveUserFromWorkspaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public RemoveUserFromWorkspaceresponse execute() throws ApiException {
            ApiResponse<RemoveUserFromWorkspaceresponse> localVarResp = deactivateFromWorkspaceWithHttpInfo(teamId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateFromWorkspace request with HTTP info returned
         * @return ApiResponse&lt;RemoveUserFromWorkspaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveUserFromWorkspaceresponse> executeWithHttpInfo() throws ApiException {
            return deactivateFromWorkspaceWithHttpInfo(teamId, userId);
        }

        /**
         * Execute deactivateFromWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveUserFromWorkspaceresponse> _callback) throws ApiException {
            return deactivateFromWorkspaceAsync(teamId, userId, _callback);
        }
    }

    /**
     * Remove User From Workspace
     * Deactivate a user from a Workspace. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param userId  (required)
     * @return DeactivateFromWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateFromWorkspaceRequestBuilder deactivateFromWorkspace(double teamId, double userId) throws IllegalArgumentException {
        
        
        return new DeactivateFromWorkspaceRequestBuilder(teamId, userId);
    }
    private okhttp3.Call getUserDetailsCall(Double teamId, Double userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/user/{user_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserDetailsValidateBeforeCall(Double teamId, Double userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getUserDetails(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserDetails(Async)");
        }

        return getUserDetailsCall(teamId, userId, _callback);

    }


    private ApiResponse<GetUserresponse> getUserDetailsWithHttpInfo(Double teamId, Double userId) throws ApiException {
        okhttp3.Call localVarCall = getUserDetailsValidateBeforeCall(teamId, userId, null);
        Type localVarReturnType = new TypeToken<GetUserresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserDetailsAsync(Double teamId, Double userId, final ApiCallback<GetUserresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserDetailsValidateBeforeCall(teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<GetUserresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserDetailsRequestBuilder {
        private final Double teamId;
        private final Double userId;

        private GetUserDetailsRequestBuilder(double teamId, double userId) {
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for getUserDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserDetailsCall(teamId, userId, _callback);
        }


        /**
         * Execute getUserDetails request
         * @return GetUserresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetUserresponse execute() throws ApiException {
            ApiResponse<GetUserresponse> localVarResp = getUserDetailsWithHttpInfo(teamId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserDetails request with HTTP info returned
         * @return ApiResponse&lt;GetUserresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetUserresponse> executeWithHttpInfo() throws ApiException {
            return getUserDetailsWithHttpInfo(teamId, userId);
        }

        /**
         * Execute getUserDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetUserresponse> _callback) throws ApiException {
            return getUserDetailsAsync(teamId, userId, _callback);
        }
    }

    /**
     * Get User
     * View information about a user in a Workspace. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param userId  (required)
     * @return GetUserDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetUserDetailsRequestBuilder getUserDetails(double teamId, double userId) throws IllegalArgumentException {
        
        
        return new GetUserDetailsRequestBuilder(teamId, userId);
    }
    private okhttp3.Call inviteUserToWorkspaceCall(Double teamId, InviteUserToWorkspacerequest inviteUserToWorkspacerequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteUserToWorkspacerequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/user"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToWorkspaceValidateBeforeCall(Double teamId, InviteUserToWorkspacerequest inviteUserToWorkspacerequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'inviteUserToWorkspacerequest' is set
        if (inviteUserToWorkspacerequest == null) {
            throw new ApiException("Missing the required parameter 'inviteUserToWorkspacerequest' when calling inviteUserToWorkspace(Async)");
        }

        return inviteUserToWorkspaceCall(teamId, inviteUserToWorkspacerequest, _callback);

    }


    private ApiResponse<InviteUserToWorkspaceresponse> inviteUserToWorkspaceWithHttpInfo(Double teamId, InviteUserToWorkspacerequest inviteUserToWorkspacerequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToWorkspaceValidateBeforeCall(teamId, inviteUserToWorkspacerequest, null);
        Type localVarReturnType = new TypeToken<InviteUserToWorkspaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteUserToWorkspaceAsync(Double teamId, InviteUserToWorkspacerequest inviteUserToWorkspacerequest, final ApiCallback<InviteUserToWorkspaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToWorkspaceValidateBeforeCall(teamId, inviteUserToWorkspacerequest, _callback);
        Type localVarReturnType = new TypeToken<InviteUserToWorkspaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteUserToWorkspaceRequestBuilder {
        private final String email;
        private final Boolean admin;
        private final Double teamId;
        private Integer customRoleId;

        private InviteUserToWorkspaceRequestBuilder(String email, Boolean admin, double teamId) {
            this.email = email;
            this.admin = admin;
            this.teamId = teamId;
        }

        /**
         * Set customRoleId
         * @param customRoleId  (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder customRoleId(Integer customRoleId) {
            this.customRoleId = customRoleId;
            return this;
        }
        
        /**
         * Build call for inviteUserToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InviteUserToWorkspacerequest inviteUserToWorkspacerequest = buildBodyParams();
            return inviteUserToWorkspaceCall(teamId, inviteUserToWorkspacerequest, _callback);
        }

        private InviteUserToWorkspacerequest buildBodyParams() {
            InviteUserToWorkspacerequest inviteUserToWorkspacerequest = new InviteUserToWorkspacerequest();
            inviteUserToWorkspacerequest.email(this.email);
            inviteUserToWorkspacerequest.admin(this.admin);
            inviteUserToWorkspacerequest.customRoleId(this.customRoleId);
            return inviteUserToWorkspacerequest;
        }

        /**
         * Execute inviteUserToWorkspace request
         * @return InviteUserToWorkspaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public InviteUserToWorkspaceresponse execute() throws ApiException {
            InviteUserToWorkspacerequest inviteUserToWorkspacerequest = buildBodyParams();
            ApiResponse<InviteUserToWorkspaceresponse> localVarResp = inviteUserToWorkspaceWithHttpInfo(teamId, inviteUserToWorkspacerequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteUserToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;InviteUserToWorkspaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InviteUserToWorkspaceresponse> executeWithHttpInfo() throws ApiException {
            InviteUserToWorkspacerequest inviteUserToWorkspacerequest = buildBodyParams();
            return inviteUserToWorkspaceWithHttpInfo(teamId, inviteUserToWorkspacerequest);
        }

        /**
         * Execute inviteUserToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InviteUserToWorkspaceresponse> _callback) throws ApiException {
            InviteUserToWorkspacerequest inviteUserToWorkspacerequest = buildBodyParams();
            return inviteUserToWorkspaceAsync(teamId, inviteUserToWorkspacerequest, _callback);
        }
    }

    /**
     * Invite User To Workspace
     * Invite someone to join your Workspace as a member. To invite someone as a guest, use the [Invite Guest](https://clickup.com/api/clickupreference/operation/InviteGuestToWorkspace/) endpoint.\\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param inviteUserToWorkspacerequest  (required)
     * @return InviteUserToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InviteUserToWorkspaceRequestBuilder inviteUserToWorkspace(String email, Boolean admin, double teamId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (admin == null) throw new IllegalArgumentException("\"admin\" is required but got null");
        
        return new InviteUserToWorkspaceRequestBuilder(email, admin, teamId);
    }
    private okhttp3.Call updateUserDetailsCall(Double teamId, Double userId, EditUserOnWorkspacerequest editUserOnWorkspacerequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editUserOnWorkspacerequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/user/{user_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserDetailsValidateBeforeCall(Double teamId, Double userId, EditUserOnWorkspacerequest editUserOnWorkspacerequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateUserDetails(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserDetails(Async)");
        }

        // verify the required parameter 'editUserOnWorkspacerequest' is set
        if (editUserOnWorkspacerequest == null) {
            throw new ApiException("Missing the required parameter 'editUserOnWorkspacerequest' when calling updateUserDetails(Async)");
        }

        return updateUserDetailsCall(teamId, userId, editUserOnWorkspacerequest, _callback);

    }


    private ApiResponse<EditUserOnWorkspaceresponse> updateUserDetailsWithHttpInfo(Double teamId, Double userId, EditUserOnWorkspacerequest editUserOnWorkspacerequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserDetailsValidateBeforeCall(teamId, userId, editUserOnWorkspacerequest, null);
        Type localVarReturnType = new TypeToken<EditUserOnWorkspaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserDetailsAsync(Double teamId, Double userId, EditUserOnWorkspacerequest editUserOnWorkspacerequest, final ApiCallback<EditUserOnWorkspaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserDetailsValidateBeforeCall(teamId, userId, editUserOnWorkspacerequest, _callback);
        Type localVarReturnType = new TypeToken<EditUserOnWorkspaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserDetailsRequestBuilder {
        private final String username;
        private final Boolean admin;
        private final Integer customRoleId;
        private final Double teamId;
        private final Double userId;

        private UpdateUserDetailsRequestBuilder(String username, Boolean admin, Integer customRoleId, double teamId, double userId) {
            this.username = username;
            this.admin = admin;
            this.customRoleId = customRoleId;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for updateUserDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditUserOnWorkspacerequest editUserOnWorkspacerequest = buildBodyParams();
            return updateUserDetailsCall(teamId, userId, editUserOnWorkspacerequest, _callback);
        }

        private EditUserOnWorkspacerequest buildBodyParams() {
            EditUserOnWorkspacerequest editUserOnWorkspacerequest = new EditUserOnWorkspacerequest();
            editUserOnWorkspacerequest.username(this.username);
            editUserOnWorkspacerequest.admin(this.admin);
            editUserOnWorkspacerequest.customRoleId(this.customRoleId);
            return editUserOnWorkspacerequest;
        }

        /**
         * Execute updateUserDetails request
         * @return EditUserOnWorkspaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EditUserOnWorkspaceresponse execute() throws ApiException {
            EditUserOnWorkspacerequest editUserOnWorkspacerequest = buildBodyParams();
            ApiResponse<EditUserOnWorkspaceresponse> localVarResp = updateUserDetailsWithHttpInfo(teamId, userId, editUserOnWorkspacerequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserDetails request with HTTP info returned
         * @return ApiResponse&lt;EditUserOnWorkspaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditUserOnWorkspaceresponse> executeWithHttpInfo() throws ApiException {
            EditUserOnWorkspacerequest editUserOnWorkspacerequest = buildBodyParams();
            return updateUserDetailsWithHttpInfo(teamId, userId, editUserOnWorkspacerequest);
        }

        /**
         * Execute updateUserDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditUserOnWorkspaceresponse> _callback) throws ApiException {
            EditUserOnWorkspacerequest editUserOnWorkspacerequest = buildBodyParams();
            return updateUserDetailsAsync(teamId, userId, editUserOnWorkspacerequest, _callback);
        }
    }

    /**
     * Edit User On Workspace
     * Update a user&#39;s name and role. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param userId  (required)
     * @param editUserOnWorkspacerequest  (required)
     * @return UpdateUserDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserDetailsRequestBuilder updateUserDetails(String username, Boolean admin, Integer customRoleId, double teamId, double userId) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (admin == null) throw new IllegalArgumentException("\"admin\" is required but got null");
        if (customRoleId == null) throw new IllegalArgumentException("\"customRoleId\" is required but got null");
        
        
        return new UpdateUserDetailsRequestBuilder(username, admin, customRoleId, teamId, userId);
    }
}
