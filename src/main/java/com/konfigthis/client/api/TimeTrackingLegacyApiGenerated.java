/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Edittimetrackedrequest;
import com.konfigthis.client.model.Gettrackedtimeresponse;
import com.konfigthis.client.model.Tracktimerequest;
import com.konfigthis.client.model.Tracktimeresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeTrackingLegacyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingLegacyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingLegacyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call editTimeTrackedCall(String taskId, String intervalId, Edittimetrackedrequest edittimetrackedrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = edittimetrackedrequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/time/{interval_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "interval_id" + "}", localVarApiClient.escapeString(intervalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTimeTrackedValidateBeforeCall(String taskId, String intervalId, Edittimetrackedrequest edittimetrackedrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling editTimeTracked(Async)");
        }

        // verify the required parameter 'intervalId' is set
        if (intervalId == null) {
            throw new ApiException("Missing the required parameter 'intervalId' when calling editTimeTracked(Async)");
        }

        // verify the required parameter 'edittimetrackedrequest' is set
        if (edittimetrackedrequest == null) {
            throw new ApiException("Missing the required parameter 'edittimetrackedrequest' when calling editTimeTracked(Async)");
        }

        return editTimeTrackedCall(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> editTimeTrackedWithHttpInfo(String taskId, String intervalId, Edittimetrackedrequest edittimetrackedrequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = editTimeTrackedValidateBeforeCall(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editTimeTrackedAsync(String taskId, String intervalId, Edittimetrackedrequest edittimetrackedrequest, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTimeTrackedValidateBeforeCall(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditTimeTrackedRequestBuilder {
        private final Integer start;
        private final Integer end;
        private final Integer time;
        private final String taskId;
        private final String intervalId;
        private Boolean customTaskIds;
        private Double teamId;

        private EditTimeTrackedRequestBuilder(Integer start, Integer end, Integer time, String taskId, String intervalId) {
            this.start = start;
            this.end = end;
            this.time = time;
            this.taskId = taskId;
            this.intervalId = intervalId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return EditTimeTrackedRequestBuilder
         */
        public EditTimeTrackedRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return EditTimeTrackedRequestBuilder
         */
        public EditTimeTrackedRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for editTimeTracked
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Edittimetrackedrequest edittimetrackedrequest = buildBodyParams();
            return editTimeTrackedCall(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId, _callback);
        }

        private Edittimetrackedrequest buildBodyParams() {
            Edittimetrackedrequest edittimetrackedrequest = new Edittimetrackedrequest();
            edittimetrackedrequest.start(this.start);
            edittimetrackedrequest.end(this.end);
            edittimetrackedrequest.time(this.time);
            return edittimetrackedrequest;
        }

        /**
         * Execute editTimeTracked request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Edittimetrackedrequest edittimetrackedrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = editTimeTrackedWithHttpInfo(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editTimeTracked request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Edittimetrackedrequest edittimetrackedrequest = buildBodyParams();
            return editTimeTrackedWithHttpInfo(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId);
        }

        /**
         * Execute editTimeTracked request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Edittimetrackedrequest edittimetrackedrequest = buildBodyParams();
            return editTimeTrackedAsync(taskId, intervalId, edittimetrackedrequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Edit time tracked
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     * @param taskId  (required)
     * @param intervalId  (required)
     * @param edittimetrackedrequest Edit the start, end, or total time of a time tracked entry. (required)
     * @return EditTimeTrackedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EditTimeTrackedRequestBuilder editTimeTracked(Integer start, Integer end, Integer time, String taskId, String intervalId) throws IllegalArgumentException {
        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
        if (time == null) throw new IllegalArgumentException("\"time\" is required but got null");
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (intervalId == null) throw new IllegalArgumentException("\"intervalId\" is required but got null");
            

        return new EditTimeTrackedRequestBuilder(start, end, time, taskId, intervalId);
    }
    private okhttp3.Call getTrackedTimeCall(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/time"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackedTimeValidateBeforeCall(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTrackedTime(Async)");
        }

        return getTrackedTimeCall(taskId, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Gettrackedtimeresponse> getTrackedTimeWithHttpInfo(String taskId, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = getTrackedTimeValidateBeforeCall(taskId, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Gettrackedtimeresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTrackedTimeAsync(String taskId, Boolean customTaskIds, Double teamId, final ApiCallback<Gettrackedtimeresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackedTimeValidateBeforeCall(taskId, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Gettrackedtimeresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTrackedTimeRequestBuilder {
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;

        private GetTrackedTimeRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return GetTrackedTimeRequestBuilder
         */
        public GetTrackedTimeRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return GetTrackedTimeRequestBuilder
         */
        public GetTrackedTimeRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for getTrackedTime
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTrackedTimeCall(taskId, customTaskIds, teamId, _callback);
        }


        /**
         * Execute getTrackedTime request
         * @return Gettrackedtimeresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Gettrackedtimeresponse execute() throws ApiException {
            ApiResponse<Gettrackedtimeresponse> localVarResp = getTrackedTimeWithHttpInfo(taskId, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTrackedTime request with HTTP info returned
         * @return ApiResponse&lt;Gettrackedtimeresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Gettrackedtimeresponse> executeWithHttpInfo() throws ApiException {
            return getTrackedTimeWithHttpInfo(taskId, customTaskIds, teamId);
        }

        /**
         * Execute getTrackedTime request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Gettrackedtimeresponse> _callback) throws ApiException {
            return getTrackedTimeAsync(taskId, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Get tracked time
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     * @param taskId  (required)
     * @return GetTrackedTimeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTrackedTimeRequestBuilder getTrackedTime(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new GetTrackedTimeRequestBuilder(taskId);
    }
    private okhttp3.Call recordTimeForTaskCall(String taskId, Tracktimerequest tracktimerequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tracktimerequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/time"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordTimeForTaskValidateBeforeCall(String taskId, Tracktimerequest tracktimerequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling recordTimeForTask(Async)");
        }

        // verify the required parameter 'tracktimerequest' is set
        if (tracktimerequest == null) {
            throw new ApiException("Missing the required parameter 'tracktimerequest' when calling recordTimeForTask(Async)");
        }

        return recordTimeForTaskCall(taskId, tracktimerequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Tracktimeresponse> recordTimeForTaskWithHttpInfo(String taskId, Tracktimerequest tracktimerequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = recordTimeForTaskValidateBeforeCall(taskId, tracktimerequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Tracktimeresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call recordTimeForTaskAsync(String taskId, Tracktimerequest tracktimerequest, Boolean customTaskIds, Double teamId, final ApiCallback<Tracktimeresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordTimeForTaskValidateBeforeCall(taskId, tracktimerequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Tracktimeresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RecordTimeForTaskRequestBuilder {
        private final Integer start;
        private final Integer end;
        private final Integer time;
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;

        private RecordTimeForTaskRequestBuilder(Integer start, Integer end, Integer time, String taskId) {
            this.start = start;
            this.end = end;
            this.time = time;
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RecordTimeForTaskRequestBuilder
         */
        public RecordTimeForTaskRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RecordTimeForTaskRequestBuilder
         */
        public RecordTimeForTaskRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for recordTimeForTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Tracktimerequest tracktimerequest = buildBodyParams();
            return recordTimeForTaskCall(taskId, tracktimerequest, customTaskIds, teamId, _callback);
        }

        private Tracktimerequest buildBodyParams() {
            Tracktimerequest tracktimerequest = new Tracktimerequest();
            tracktimerequest.start(this.start);
            tracktimerequest.end(this.end);
            tracktimerequest.time(this.time);
            return tracktimerequest;
        }

        /**
         * Execute recordTimeForTask request
         * @return Tracktimeresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Tracktimeresponse execute() throws ApiException {
            Tracktimerequest tracktimerequest = buildBodyParams();
            ApiResponse<Tracktimeresponse> localVarResp = recordTimeForTaskWithHttpInfo(taskId, tracktimerequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute recordTimeForTask request with HTTP info returned
         * @return ApiResponse&lt;Tracktimeresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tracktimeresponse> executeWithHttpInfo() throws ApiException {
            Tracktimerequest tracktimerequest = buildBodyParams();
            return recordTimeForTaskWithHttpInfo(taskId, tracktimerequest, customTaskIds, teamId);
        }

        /**
         * Execute recordTimeForTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tracktimeresponse> _callback) throws ApiException {
            Tracktimerequest tracktimerequest = buildBodyParams();
            return recordTimeForTaskAsync(taskId, tracktimerequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Track time
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     * @param taskId  (required)
     * @param tracktimerequest Include the total time or the start time and end time.\\  \\ The total time is in milliseconds and &#x60;\&quot;start\&quot;&#x60; and &#x60;\&quot;end\&quot;&#x60; values are Unix time in milliseconds. (required)
     * @return RecordTimeForTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RecordTimeForTaskRequestBuilder recordTimeForTask(Integer start, Integer end, Integer time, String taskId) throws IllegalArgumentException {
        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
        if (end == null) throw new IllegalArgumentException("\"end\" is required but got null");
        if (time == null) throw new IllegalArgumentException("\"time\" is required but got null");
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new RecordTimeForTaskRequestBuilder(start, end, time, taskId);
    }
    private okhttp3.Call removeTrackedTimeCall(String taskId, String intervalId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/time/{interval_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "interval_id" + "}", localVarApiClient.escapeString(intervalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTrackedTimeValidateBeforeCall(String taskId, String intervalId, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeTrackedTime(Async)");
        }

        // verify the required parameter 'intervalId' is set
        if (intervalId == null) {
            throw new ApiException("Missing the required parameter 'intervalId' when calling removeTrackedTime(Async)");
        }

        return removeTrackedTimeCall(taskId, intervalId, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> removeTrackedTimeWithHttpInfo(String taskId, String intervalId, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = removeTrackedTimeValidateBeforeCall(taskId, intervalId, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTrackedTimeAsync(String taskId, String intervalId, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTrackedTimeValidateBeforeCall(taskId, intervalId, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTrackedTimeRequestBuilder {
        private final String taskId;
        private final String intervalId;
        private Boolean customTaskIds;
        private Double teamId;

        private RemoveTrackedTimeRequestBuilder(String taskId, String intervalId) {
            this.taskId = taskId;
            this.intervalId = intervalId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RemoveTrackedTimeRequestBuilder
         */
        public RemoveTrackedTimeRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RemoveTrackedTimeRequestBuilder
         */
        public RemoveTrackedTimeRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for removeTrackedTime
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTrackedTimeCall(taskId, intervalId, customTaskIds, teamId, _callback);
        }


        /**
         * Execute removeTrackedTime request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeTrackedTimeWithHttpInfo(taskId, intervalId, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTrackedTime request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeTrackedTimeWithHttpInfo(taskId, intervalId, customTaskIds, teamId);
        }

        /**
         * Execute removeTrackedTime request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeTrackedTimeAsync(taskId, intervalId, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Delete time tracked
     * ***Note:** This is a legacy time tracking endpoint. We recommend using the Time Tracking API endpoints to manage time entries.*
     * @param taskId  (required)
     * @param intervalId  (required)
     * @return RemoveTrackedTimeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTrackedTimeRequestBuilder removeTrackedTime(String taskId, String intervalId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (intervalId == null) throw new IllegalArgumentException("\"intervalId\" is required but got null");
            

        return new RemoveTrackedTimeRequestBuilder(taskId, intervalId);
    }
}
