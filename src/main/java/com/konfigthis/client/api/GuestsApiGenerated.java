/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddGuestToFolderrequest;
import com.konfigthis.client.model.AddGuestToFolderresponse;
import com.konfigthis.client.model.AddGuestToListrequest;
import com.konfigthis.client.model.AddGuestToListresponse;
import com.konfigthis.client.model.AddGuestToTaskrequest;
import com.konfigthis.client.model.AddGuestToTaskresponse;
import com.konfigthis.client.model.EditGuestOnWorkspacerequest;
import com.konfigthis.client.model.EditGuestOnWorkspaceresponse;
import com.konfigthis.client.model.InviteGuestToWorkspacerequest;
import com.konfigthis.client.model.InviteGuestToWorkspaceresponse;
import com.konfigthis.client.model.RemoveGuestFromFolderresponse;
import com.konfigthis.client.model.RemoveGuestFromListresponse;
import com.konfigthis.client.model.RemoveGuestFromTaskresponse;
import com.konfigthis.client.model.RemoveGuestFromWorkspaceresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GuestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GuestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GuestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addGuestToFolderCall(Double folderId, Double guestId, AddGuestToFolderrequest addGuestToFolderrequest, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addGuestToFolderrequest;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}/guest/{guest_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_shared", includeShared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGuestToFolderValidateBeforeCall(Double folderId, Double guestId, AddGuestToFolderrequest addGuestToFolderrequest, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling addGuestToFolder(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling addGuestToFolder(Async)");
        }

        // verify the required parameter 'addGuestToFolderrequest' is set
        if (addGuestToFolderrequest == null) {
            throw new ApiException("Missing the required parameter 'addGuestToFolderrequest' when calling addGuestToFolder(Async)");
        }

        return addGuestToFolderCall(folderId, guestId, addGuestToFolderrequest, includeShared, _callback);

    }


    private ApiResponse<AddGuestToFolderresponse> addGuestToFolderWithHttpInfo(Double folderId, Double guestId, AddGuestToFolderrequest addGuestToFolderrequest, Boolean includeShared) throws ApiException {
        okhttp3.Call localVarCall = addGuestToFolderValidateBeforeCall(folderId, guestId, addGuestToFolderrequest, includeShared, null);
        Type localVarReturnType = new TypeToken<AddGuestToFolderresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGuestToFolderAsync(Double folderId, Double guestId, AddGuestToFolderrequest addGuestToFolderrequest, Boolean includeShared, final ApiCallback<AddGuestToFolderresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGuestToFolderValidateBeforeCall(folderId, guestId, addGuestToFolderrequest, includeShared, _callback);
        Type localVarReturnType = new TypeToken<AddGuestToFolderresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddGuestToFolderRequestBuilder {
        private final String permissionLevel;
        private final Double folderId;
        private final Double guestId;
        private Boolean includeShared;

        private AddGuestToFolderRequestBuilder(String permissionLevel, double folderId, double guestId) {
            this.permissionLevel = permissionLevel;
            this.folderId = folderId;
            this.guestId = guestId;
        }

        /**
         * Set includeShared
         * @param includeShared Exclude details of items shared with the guest by setting this parameter to &#x60;false&#x60;. By default this parameter is set to &#x60;true&#x60;. (optional)
         * @return AddGuestToFolderRequestBuilder
         */
        public AddGuestToFolderRequestBuilder includeShared(Boolean includeShared) {
            this.includeShared = includeShared;
            return this;
        }
        
        /**
         * Build call for addGuestToFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddGuestToFolderrequest addGuestToFolderrequest = buildBodyParams();
            return addGuestToFolderCall(folderId, guestId, addGuestToFolderrequest, includeShared, _callback);
        }

        private AddGuestToFolderrequest buildBodyParams() {
            AddGuestToFolderrequest addGuestToFolderrequest = new AddGuestToFolderrequest();
            addGuestToFolderrequest.permissionLevel(this.permissionLevel);
            return addGuestToFolderrequest;
        }

        /**
         * Execute addGuestToFolder request
         * @return AddGuestToFolderresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AddGuestToFolderresponse execute() throws ApiException {
            AddGuestToFolderrequest addGuestToFolderrequest = buildBodyParams();
            ApiResponse<AddGuestToFolderresponse> localVarResp = addGuestToFolderWithHttpInfo(folderId, guestId, addGuestToFolderrequest, includeShared);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addGuestToFolder request with HTTP info returned
         * @return ApiResponse&lt;AddGuestToFolderresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddGuestToFolderresponse> executeWithHttpInfo() throws ApiException {
            AddGuestToFolderrequest addGuestToFolderrequest = buildBodyParams();
            return addGuestToFolderWithHttpInfo(folderId, guestId, addGuestToFolderrequest, includeShared);
        }

        /**
         * Execute addGuestToFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddGuestToFolderresponse> _callback) throws ApiException {
            AddGuestToFolderrequest addGuestToFolderrequest = buildBodyParams();
            return addGuestToFolderAsync(folderId, guestId, addGuestToFolderrequest, includeShared, _callback);
        }
    }

    /**
     * Add Guest To Folder
     * Share a Folder with a guest. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param folderId  (required)
     * @param guestId  (required)
     * @param addGuestToFolderrequest  (required)
     * @return AddGuestToFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddGuestToFolderRequestBuilder addGuestToFolder(String permissionLevel, double folderId, double guestId) throws IllegalArgumentException {
        if (permissionLevel == null) throw new IllegalArgumentException("\"permissionLevel\" is required but got null");
            

        
        
        return new AddGuestToFolderRequestBuilder(permissionLevel, folderId, guestId);
    }
    private okhttp3.Call addToTaskCall(String taskId, Double guestId, AddGuestToTaskrequest addGuestToTaskrequest, Boolean includeShared, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addGuestToTaskrequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/guest/{guest_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_shared", includeShared));
        }

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToTaskValidateBeforeCall(String taskId, Double guestId, AddGuestToTaskrequest addGuestToTaskrequest, Boolean includeShared, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addToTask(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling addToTask(Async)");
        }

        // verify the required parameter 'addGuestToTaskrequest' is set
        if (addGuestToTaskrequest == null) {
            throw new ApiException("Missing the required parameter 'addGuestToTaskrequest' when calling addToTask(Async)");
        }

        return addToTaskCall(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId, _callback);

    }


    private ApiResponse<AddGuestToTaskresponse> addToTaskWithHttpInfo(String taskId, Double guestId, AddGuestToTaskrequest addGuestToTaskrequest, Boolean includeShared, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = addToTaskValidateBeforeCall(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<AddGuestToTaskresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToTaskAsync(String taskId, Double guestId, AddGuestToTaskrequest addGuestToTaskrequest, Boolean includeShared, Boolean customTaskIds, Double teamId, final ApiCallback<AddGuestToTaskresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToTaskValidateBeforeCall(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<AddGuestToTaskresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToTaskRequestBuilder {
        private final String permissionLevel;
        private final String taskId;
        private final Double guestId;
        private Boolean includeShared;
        private Boolean customTaskIds;
        private Double teamId;

        private AddToTaskRequestBuilder(String permissionLevel, String taskId, double guestId) {
            this.permissionLevel = permissionLevel;
            this.taskId = taskId;
            this.guestId = guestId;
        }

        /**
         * Set includeShared
         * @param includeShared Exclude details of items shared with the guest by setting this parameter to &#x60;false&#x60;. By default this parameter is set to &#x60;true&#x60;. (optional)
         * @return AddToTaskRequestBuilder
         */
        public AddToTaskRequestBuilder includeShared(Boolean includeShared) {
            this.includeShared = includeShared;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return AddToTaskRequestBuilder
         */
        public AddToTaskRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return AddToTaskRequestBuilder
         */
        public AddToTaskRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addToTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddGuestToTaskrequest addGuestToTaskrequest = buildBodyParams();
            return addToTaskCall(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId, _callback);
        }

        private AddGuestToTaskrequest buildBodyParams() {
            AddGuestToTaskrequest addGuestToTaskrequest = new AddGuestToTaskrequest();
            addGuestToTaskrequest.permissionLevel(this.permissionLevel);
            return addGuestToTaskrequest;
        }

        /**
         * Execute addToTask request
         * @return AddGuestToTaskresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AddGuestToTaskresponse execute() throws ApiException {
            AddGuestToTaskrequest addGuestToTaskrequest = buildBodyParams();
            ApiResponse<AddGuestToTaskresponse> localVarResp = addToTaskWithHttpInfo(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToTask request with HTTP info returned
         * @return ApiResponse&lt;AddGuestToTaskresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddGuestToTaskresponse> executeWithHttpInfo() throws ApiException {
            AddGuestToTaskrequest addGuestToTaskrequest = buildBodyParams();
            return addToTaskWithHttpInfo(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId);
        }

        /**
         * Execute addToTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddGuestToTaskresponse> _callback) throws ApiException {
            AddGuestToTaskrequest addGuestToTaskrequest = buildBodyParams();
            return addToTaskAsync(taskId, guestId, addGuestToTaskrequest, includeShared, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Add Guest To Task
     * Share a task with a guest. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param taskId  (required)
     * @param guestId  (required)
     * @param addGuestToTaskrequest  (required)
     * @return AddToTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddToTaskRequestBuilder addToTask(String permissionLevel, String taskId, double guestId) throws IllegalArgumentException {
        if (permissionLevel == null) throw new IllegalArgumentException("\"permissionLevel\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        
        return new AddToTaskRequestBuilder(permissionLevel, taskId, guestId);
    }
    private okhttp3.Call editGuestOnWorkspaceCall(Double teamId, Double guestId, EditGuestOnWorkspacerequest editGuestOnWorkspacerequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editGuestOnWorkspacerequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/guest/{guest_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editGuestOnWorkspaceValidateBeforeCall(Double teamId, Double guestId, EditGuestOnWorkspacerequest editGuestOnWorkspacerequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling editGuestOnWorkspace(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling editGuestOnWorkspace(Async)");
        }

        // verify the required parameter 'editGuestOnWorkspacerequest' is set
        if (editGuestOnWorkspacerequest == null) {
            throw new ApiException("Missing the required parameter 'editGuestOnWorkspacerequest' when calling editGuestOnWorkspace(Async)");
        }

        return editGuestOnWorkspaceCall(teamId, guestId, editGuestOnWorkspacerequest, _callback);

    }


    private ApiResponse<EditGuestOnWorkspaceresponse> editGuestOnWorkspaceWithHttpInfo(Double teamId, Double guestId, EditGuestOnWorkspacerequest editGuestOnWorkspacerequest) throws ApiException {
        okhttp3.Call localVarCall = editGuestOnWorkspaceValidateBeforeCall(teamId, guestId, editGuestOnWorkspacerequest, null);
        Type localVarReturnType = new TypeToken<EditGuestOnWorkspaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editGuestOnWorkspaceAsync(Double teamId, Double guestId, EditGuestOnWorkspacerequest editGuestOnWorkspacerequest, final ApiCallback<EditGuestOnWorkspaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = editGuestOnWorkspaceValidateBeforeCall(teamId, guestId, editGuestOnWorkspacerequest, _callback);
        Type localVarReturnType = new TypeToken<EditGuestOnWorkspaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditGuestOnWorkspaceRequestBuilder {
        private final String username;
        private final Boolean canEditTags;
        private final Boolean canSeeTimeSpent;
        private final Boolean canSeeTimeEstimated;
        private final Boolean canCreateViews;
        private final Integer customRoleId;
        private final Double teamId;
        private final Double guestId;

        private EditGuestOnWorkspaceRequestBuilder(String username, Boolean canEditTags, Boolean canSeeTimeSpent, Boolean canSeeTimeEstimated, Boolean canCreateViews, Integer customRoleId, double teamId, double guestId) {
            this.username = username;
            this.canEditTags = canEditTags;
            this.canSeeTimeSpent = canSeeTimeSpent;
            this.canSeeTimeEstimated = canSeeTimeEstimated;
            this.canCreateViews = canCreateViews;
            this.customRoleId = customRoleId;
            this.teamId = teamId;
            this.guestId = guestId;
        }

        /**
         * Build call for editGuestOnWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditGuestOnWorkspacerequest editGuestOnWorkspacerequest = buildBodyParams();
            return editGuestOnWorkspaceCall(teamId, guestId, editGuestOnWorkspacerequest, _callback);
        }

        private EditGuestOnWorkspacerequest buildBodyParams() {
            EditGuestOnWorkspacerequest editGuestOnWorkspacerequest = new EditGuestOnWorkspacerequest();
            editGuestOnWorkspacerequest.username(this.username);
            editGuestOnWorkspacerequest.canEditTags(this.canEditTags);
            editGuestOnWorkspacerequest.canSeeTimeSpent(this.canSeeTimeSpent);
            editGuestOnWorkspacerequest.canSeeTimeEstimated(this.canSeeTimeEstimated);
            editGuestOnWorkspacerequest.canCreateViews(this.canCreateViews);
            editGuestOnWorkspacerequest.customRoleId(this.customRoleId);
            return editGuestOnWorkspacerequest;
        }

        /**
         * Execute editGuestOnWorkspace request
         * @return EditGuestOnWorkspaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EditGuestOnWorkspaceresponse execute() throws ApiException {
            EditGuestOnWorkspacerequest editGuestOnWorkspacerequest = buildBodyParams();
            ApiResponse<EditGuestOnWorkspaceresponse> localVarResp = editGuestOnWorkspaceWithHttpInfo(teamId, guestId, editGuestOnWorkspacerequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editGuestOnWorkspace request with HTTP info returned
         * @return ApiResponse&lt;EditGuestOnWorkspaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditGuestOnWorkspaceresponse> executeWithHttpInfo() throws ApiException {
            EditGuestOnWorkspacerequest editGuestOnWorkspacerequest = buildBodyParams();
            return editGuestOnWorkspaceWithHttpInfo(teamId, guestId, editGuestOnWorkspacerequest);
        }

        /**
         * Execute editGuestOnWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditGuestOnWorkspaceresponse> _callback) throws ApiException {
            EditGuestOnWorkspacerequest editGuestOnWorkspacerequest = buildBodyParams();
            return editGuestOnWorkspaceAsync(teamId, guestId, editGuestOnWorkspacerequest, _callback);
        }
    }

    /**
     * Edit Guest On Workspace
     * Rename and configure options for a guest. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param guestId  (required)
     * @param editGuestOnWorkspacerequest  (required)
     * @return EditGuestOnWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EditGuestOnWorkspaceRequestBuilder editGuestOnWorkspace(String username, Boolean canEditTags, Boolean canSeeTimeSpent, Boolean canSeeTimeEstimated, Boolean canCreateViews, Integer customRoleId, double teamId, double guestId) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (canEditTags == null) throw new IllegalArgumentException("\"canEditTags\" is required but got null");
        if (canSeeTimeSpent == null) throw new IllegalArgumentException("\"canSeeTimeSpent\" is required but got null");
        if (canSeeTimeEstimated == null) throw new IllegalArgumentException("\"canSeeTimeEstimated\" is required but got null");
        if (canCreateViews == null) throw new IllegalArgumentException("\"canCreateViews\" is required but got null");
        if (customRoleId == null) throw new IllegalArgumentException("\"customRoleId\" is required but got null");
        
        
        return new EditGuestOnWorkspaceRequestBuilder(username, canEditTags, canSeeTimeSpent, canSeeTimeEstimated, canCreateViews, customRoleId, teamId, guestId);
    }
    private okhttp3.Call getGuestInformationCall(Double teamId, Double guestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/guest/{guest_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuestInformationValidateBeforeCall(Double teamId, Double guestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getGuestInformation(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling getGuestInformation(Async)");
        }

        return getGuestInformationCall(teamId, guestId, _callback);

    }


    private ApiResponse<Object> getGuestInformationWithHttpInfo(Double teamId, Double guestId) throws ApiException {
        okhttp3.Call localVarCall = getGuestInformationValidateBeforeCall(teamId, guestId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuestInformationAsync(Double teamId, Double guestId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuestInformationValidateBeforeCall(teamId, guestId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGuestInformationRequestBuilder {
        private final Double teamId;
        private final Double guestId;

        private GetGuestInformationRequestBuilder(double teamId, double guestId) {
            this.teamId = teamId;
            this.guestId = guestId;
        }

        /**
         * Build call for getGuestInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuestInformationCall(teamId, guestId, _callback);
        }


        /**
         * Execute getGuestInformation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getGuestInformationWithHttpInfo(teamId, guestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGuestInformation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getGuestInformationWithHttpInfo(teamId, guestId);
        }

        /**
         * Execute getGuestInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getGuestInformationAsync(teamId, guestId, _callback);
        }
    }

    /**
     * Get Guest
     * View information about a guest. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param guestId  (required)
     * @return GetGuestInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetGuestInformationRequestBuilder getGuestInformation(double teamId, double guestId) throws IllegalArgumentException {
        
        
        return new GetGuestInformationRequestBuilder(teamId, guestId);
    }
    private okhttp3.Call inviteToWorkspaceCall(Double teamId, InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteGuestToWorkspacerequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/guest"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteToWorkspaceValidateBeforeCall(Double teamId, InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling inviteToWorkspace(Async)");
        }

        // verify the required parameter 'inviteGuestToWorkspacerequest' is set
        if (inviteGuestToWorkspacerequest == null) {
            throw new ApiException("Missing the required parameter 'inviteGuestToWorkspacerequest' when calling inviteToWorkspace(Async)");
        }

        return inviteToWorkspaceCall(teamId, inviteGuestToWorkspacerequest, _callback);

    }


    private ApiResponse<InviteGuestToWorkspaceresponse> inviteToWorkspaceWithHttpInfo(Double teamId, InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest) throws ApiException {
        okhttp3.Call localVarCall = inviteToWorkspaceValidateBeforeCall(teamId, inviteGuestToWorkspacerequest, null);
        Type localVarReturnType = new TypeToken<InviteGuestToWorkspaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteToWorkspaceAsync(Double teamId, InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest, final ApiCallback<InviteGuestToWorkspaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteToWorkspaceValidateBeforeCall(teamId, inviteGuestToWorkspacerequest, _callback);
        Type localVarReturnType = new TypeToken<InviteGuestToWorkspaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteToWorkspaceRequestBuilder {
        private final String email;
        private final Boolean canEditTags;
        private final Boolean canSeeTimeSpent;
        private final Boolean canSeeTimeEstimated;
        private final Boolean canCreateViews;
        private final Integer customRoleId;
        private final Double teamId;

        private InviteToWorkspaceRequestBuilder(String email, Boolean canEditTags, Boolean canSeeTimeSpent, Boolean canSeeTimeEstimated, Boolean canCreateViews, Integer customRoleId, double teamId) {
            this.email = email;
            this.canEditTags = canEditTags;
            this.canSeeTimeSpent = canSeeTimeSpent;
            this.canSeeTimeEstimated = canSeeTimeEstimated;
            this.canCreateViews = canCreateViews;
            this.customRoleId = customRoleId;
            this.teamId = teamId;
        }

        /**
         * Build call for inviteToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest = buildBodyParams();
            return inviteToWorkspaceCall(teamId, inviteGuestToWorkspacerequest, _callback);
        }

        private InviteGuestToWorkspacerequest buildBodyParams() {
            InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest = new InviteGuestToWorkspacerequest();
            inviteGuestToWorkspacerequest.email(this.email);
            inviteGuestToWorkspacerequest.canEditTags(this.canEditTags);
            inviteGuestToWorkspacerequest.canSeeTimeSpent(this.canSeeTimeSpent);
            inviteGuestToWorkspacerequest.canSeeTimeEstimated(this.canSeeTimeEstimated);
            inviteGuestToWorkspacerequest.canCreateViews(this.canCreateViews);
            inviteGuestToWorkspacerequest.customRoleId(this.customRoleId);
            return inviteGuestToWorkspacerequest;
        }

        /**
         * Execute inviteToWorkspace request
         * @return InviteGuestToWorkspaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public InviteGuestToWorkspaceresponse execute() throws ApiException {
            InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest = buildBodyParams();
            ApiResponse<InviteGuestToWorkspaceresponse> localVarResp = inviteToWorkspaceWithHttpInfo(teamId, inviteGuestToWorkspacerequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;InviteGuestToWorkspaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InviteGuestToWorkspaceresponse> executeWithHttpInfo() throws ApiException {
            InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest = buildBodyParams();
            return inviteToWorkspaceWithHttpInfo(teamId, inviteGuestToWorkspacerequest);
        }

        /**
         * Execute inviteToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InviteGuestToWorkspaceresponse> _callback) throws ApiException {
            InviteGuestToWorkspacerequest inviteGuestToWorkspacerequest = buildBodyParams();
            return inviteToWorkspaceAsync(teamId, inviteGuestToWorkspacerequest, _callback);
        }
    }

    /**
     * Invite Guest To Workspace
     * Invite a guest to join a Workspace. To invite a member to your Workspace, use the [Invite User to Workspace](https://clickup.com/api/clickupreference/operation/InviteUserToWorkspace/) endpoint. \\  \\ You&#39;ll also need to grant the guest access to specific items using the following endpoints: [Add Guest to Folder](clickupreference/operation/AddGuestToFolder/), [Add Guest to List](clickupreference/operation/AddGuestToList/), or [Add Guest to Task](clickupreference/operation/AddGuestToTask/). \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param inviteGuestToWorkspacerequest  (required)
     * @return InviteToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InviteToWorkspaceRequestBuilder inviteToWorkspace(String email, Boolean canEditTags, Boolean canSeeTimeSpent, Boolean canSeeTimeEstimated, Boolean canCreateViews, Integer customRoleId, double teamId) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (canEditTags == null) throw new IllegalArgumentException("\"canEditTags\" is required but got null");
        if (canSeeTimeSpent == null) throw new IllegalArgumentException("\"canSeeTimeSpent\" is required but got null");
        if (canSeeTimeEstimated == null) throw new IllegalArgumentException("\"canSeeTimeEstimated\" is required but got null");
        if (canCreateViews == null) throw new IllegalArgumentException("\"canCreateViews\" is required but got null");
        if (customRoleId == null) throw new IllegalArgumentException("\"customRoleId\" is required but got null");
        
        return new InviteToWorkspaceRequestBuilder(email, canEditTags, canSeeTimeSpent, canSeeTimeEstimated, canCreateViews, customRoleId, teamId);
    }
    private okhttp3.Call removeFromListCall(Double listId, Double guestId, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/guest/{guest_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_shared", includeShared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromListValidateBeforeCall(Double listId, Double guestId, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling removeFromList(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling removeFromList(Async)");
        }

        return removeFromListCall(listId, guestId, includeShared, _callback);

    }


    private ApiResponse<RemoveGuestFromListresponse> removeFromListWithHttpInfo(Double listId, Double guestId, Boolean includeShared) throws ApiException {
        okhttp3.Call localVarCall = removeFromListValidateBeforeCall(listId, guestId, includeShared, null);
        Type localVarReturnType = new TypeToken<RemoveGuestFromListresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromListAsync(Double listId, Double guestId, Boolean includeShared, final ApiCallback<RemoveGuestFromListresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromListValidateBeforeCall(listId, guestId, includeShared, _callback);
        Type localVarReturnType = new TypeToken<RemoveGuestFromListresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFromListRequestBuilder {
        private final Double listId;
        private final Double guestId;
        private Boolean includeShared;

        private RemoveFromListRequestBuilder(double listId, double guestId) {
            this.listId = listId;
            this.guestId = guestId;
        }

        /**
         * Set includeShared
         * @param includeShared Exclude details of items shared with the guest by setting this parameter to &#x60;false&#x60;. By default this parameter is set to &#x60;true&#x60;. (optional)
         * @return RemoveFromListRequestBuilder
         */
        public RemoveFromListRequestBuilder includeShared(Boolean includeShared) {
            this.includeShared = includeShared;
            return this;
        }
        
        /**
         * Build call for removeFromList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromListCall(listId, guestId, includeShared, _callback);
        }


        /**
         * Execute removeFromList request
         * @return RemoveGuestFromListresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public RemoveGuestFromListresponse execute() throws ApiException {
            ApiResponse<RemoveGuestFromListresponse> localVarResp = removeFromListWithHttpInfo(listId, guestId, includeShared);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFromList request with HTTP info returned
         * @return ApiResponse&lt;RemoveGuestFromListresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveGuestFromListresponse> executeWithHttpInfo() throws ApiException {
            return removeFromListWithHttpInfo(listId, guestId, includeShared);
        }

        /**
         * Execute removeFromList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveGuestFromListresponse> _callback) throws ApiException {
            return removeFromListAsync(listId, guestId, includeShared, _callback);
        }
    }

    /**
     * Remove Guest From List
     * Revoke a guest&#39;s access to a List.\\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param listId  (required)
     * @param guestId  (required)
     * @return RemoveFromListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromListRequestBuilder removeFromList(double listId, double guestId) throws IllegalArgumentException {
        
        
        return new RemoveFromListRequestBuilder(listId, guestId);
    }
    private okhttp3.Call revokeAccessFromFolderCall(Double folderId, Double guestId, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folder/{folder_id}/guest/{guest_id}"
            .replace("{" + "folder_id" + "}", localVarApiClient.escapeString(folderId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_shared", includeShared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAccessFromFolderValidateBeforeCall(Double folderId, Double guestId, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'folderId' is set
        if (folderId == null) {
            throw new ApiException("Missing the required parameter 'folderId' when calling revokeAccessFromFolder(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling revokeAccessFromFolder(Async)");
        }

        return revokeAccessFromFolderCall(folderId, guestId, includeShared, _callback);

    }


    private ApiResponse<RemoveGuestFromFolderresponse> revokeAccessFromFolderWithHttpInfo(Double folderId, Double guestId, Boolean includeShared) throws ApiException {
        okhttp3.Call localVarCall = revokeAccessFromFolderValidateBeforeCall(folderId, guestId, includeShared, null);
        Type localVarReturnType = new TypeToken<RemoveGuestFromFolderresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokeAccessFromFolderAsync(Double folderId, Double guestId, Boolean includeShared, final ApiCallback<RemoveGuestFromFolderresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAccessFromFolderValidateBeforeCall(folderId, guestId, includeShared, _callback);
        Type localVarReturnType = new TypeToken<RemoveGuestFromFolderresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokeAccessFromFolderRequestBuilder {
        private final Double folderId;
        private final Double guestId;
        private Boolean includeShared;

        private RevokeAccessFromFolderRequestBuilder(double folderId, double guestId) {
            this.folderId = folderId;
            this.guestId = guestId;
        }

        /**
         * Set includeShared
         * @param includeShared Exclude details of items shared with the guest by setting this parameter to &#x60;false&#x60;. By default this parameter is set to &#x60;true&#x60;. (optional)
         * @return RevokeAccessFromFolderRequestBuilder
         */
        public RevokeAccessFromFolderRequestBuilder includeShared(Boolean includeShared) {
            this.includeShared = includeShared;
            return this;
        }
        
        /**
         * Build call for revokeAccessFromFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAccessFromFolderCall(folderId, guestId, includeShared, _callback);
        }


        /**
         * Execute revokeAccessFromFolder request
         * @return RemoveGuestFromFolderresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public RemoveGuestFromFolderresponse execute() throws ApiException {
            ApiResponse<RemoveGuestFromFolderresponse> localVarResp = revokeAccessFromFolderWithHttpInfo(folderId, guestId, includeShared);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokeAccessFromFolder request with HTTP info returned
         * @return ApiResponse&lt;RemoveGuestFromFolderresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveGuestFromFolderresponse> executeWithHttpInfo() throws ApiException {
            return revokeAccessFromFolderWithHttpInfo(folderId, guestId, includeShared);
        }

        /**
         * Execute revokeAccessFromFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveGuestFromFolderresponse> _callback) throws ApiException {
            return revokeAccessFromFolderAsync(folderId, guestId, includeShared, _callback);
        }
    }

    /**
     * Remove Guest From Folder
     * Revoke a guest&#39;s access to a Folder. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param folderId  (required)
     * @param guestId  (required)
     * @return RevokeAccessFromFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAccessFromFolderRequestBuilder revokeAccessFromFolder(double folderId, double guestId) throws IllegalArgumentException {
        
        
        return new RevokeAccessFromFolderRequestBuilder(folderId, guestId);
    }
    private okhttp3.Call revokeAccessToTaskCall(String taskId, Double guestId, Boolean includeShared, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/guest/{guest_id}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_shared", includeShared));
        }

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAccessToTaskValidateBeforeCall(String taskId, Double guestId, Boolean includeShared, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling revokeAccessToTask(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling revokeAccessToTask(Async)");
        }

        return revokeAccessToTaskCall(taskId, guestId, includeShared, customTaskIds, teamId, _callback);

    }


    private ApiResponse<RemoveGuestFromTaskresponse> revokeAccessToTaskWithHttpInfo(String taskId, Double guestId, Boolean includeShared, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = revokeAccessToTaskValidateBeforeCall(taskId, guestId, includeShared, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<RemoveGuestFromTaskresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokeAccessToTaskAsync(String taskId, Double guestId, Boolean includeShared, Boolean customTaskIds, Double teamId, final ApiCallback<RemoveGuestFromTaskresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAccessToTaskValidateBeforeCall(taskId, guestId, includeShared, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<RemoveGuestFromTaskresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokeAccessToTaskRequestBuilder {
        private final String taskId;
        private final Double guestId;
        private Boolean includeShared;
        private Boolean customTaskIds;
        private Double teamId;

        private RevokeAccessToTaskRequestBuilder(String taskId, double guestId) {
            this.taskId = taskId;
            this.guestId = guestId;
        }

        /**
         * Set includeShared
         * @param includeShared Exclude details of items shared with the guest by setting this parameter to &#x60;false&#x60;. By default this parameter is set to &#x60;true&#x60;. (optional)
         * @return RevokeAccessToTaskRequestBuilder
         */
        public RevokeAccessToTaskRequestBuilder includeShared(Boolean includeShared) {
            this.includeShared = includeShared;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RevokeAccessToTaskRequestBuilder
         */
        public RevokeAccessToTaskRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RevokeAccessToTaskRequestBuilder
         */
        public RevokeAccessToTaskRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for revokeAccessToTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAccessToTaskCall(taskId, guestId, includeShared, customTaskIds, teamId, _callback);
        }


        /**
         * Execute revokeAccessToTask request
         * @return RemoveGuestFromTaskresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public RemoveGuestFromTaskresponse execute() throws ApiException {
            ApiResponse<RemoveGuestFromTaskresponse> localVarResp = revokeAccessToTaskWithHttpInfo(taskId, guestId, includeShared, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokeAccessToTask request with HTTP info returned
         * @return ApiResponse&lt;RemoveGuestFromTaskresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveGuestFromTaskresponse> executeWithHttpInfo() throws ApiException {
            return revokeAccessToTaskWithHttpInfo(taskId, guestId, includeShared, customTaskIds, teamId);
        }

        /**
         * Execute revokeAccessToTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveGuestFromTaskresponse> _callback) throws ApiException {
            return revokeAccessToTaskAsync(taskId, guestId, includeShared, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Remove Guest From Task
     * Revoke a guest&#39;s access to a task. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param taskId  (required)
     * @param guestId  (required)
     * @return RevokeAccessToTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAccessToTaskRequestBuilder revokeAccessToTask(String taskId, double guestId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        
        return new RevokeAccessToTaskRequestBuilder(taskId, guestId);
    }
    private okhttp3.Call revokeGuestAccessToWorkspaceCall(Double teamId, Double guestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/guest/{guest_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeGuestAccessToWorkspaceValidateBeforeCall(Double teamId, Double guestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling revokeGuestAccessToWorkspace(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling revokeGuestAccessToWorkspace(Async)");
        }

        return revokeGuestAccessToWorkspaceCall(teamId, guestId, _callback);

    }


    private ApiResponse<RemoveGuestFromWorkspaceresponse> revokeGuestAccessToWorkspaceWithHttpInfo(Double teamId, Double guestId) throws ApiException {
        okhttp3.Call localVarCall = revokeGuestAccessToWorkspaceValidateBeforeCall(teamId, guestId, null);
        Type localVarReturnType = new TypeToken<RemoveGuestFromWorkspaceresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokeGuestAccessToWorkspaceAsync(Double teamId, Double guestId, final ApiCallback<RemoveGuestFromWorkspaceresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeGuestAccessToWorkspaceValidateBeforeCall(teamId, guestId, _callback);
        Type localVarReturnType = new TypeToken<RemoveGuestFromWorkspaceresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokeGuestAccessToWorkspaceRequestBuilder {
        private final Double teamId;
        private final Double guestId;

        private RevokeGuestAccessToWorkspaceRequestBuilder(double teamId, double guestId) {
            this.teamId = teamId;
            this.guestId = guestId;
        }

        /**
         * Build call for revokeGuestAccessToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeGuestAccessToWorkspaceCall(teamId, guestId, _callback);
        }


        /**
         * Execute revokeGuestAccessToWorkspace request
         * @return RemoveGuestFromWorkspaceresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public RemoveGuestFromWorkspaceresponse execute() throws ApiException {
            ApiResponse<RemoveGuestFromWorkspaceresponse> localVarResp = revokeGuestAccessToWorkspaceWithHttpInfo(teamId, guestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokeGuestAccessToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;RemoveGuestFromWorkspaceresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemoveGuestFromWorkspaceresponse> executeWithHttpInfo() throws ApiException {
            return revokeGuestAccessToWorkspaceWithHttpInfo(teamId, guestId);
        }

        /**
         * Execute revokeGuestAccessToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemoveGuestFromWorkspaceresponse> _callback) throws ApiException {
            return revokeGuestAccessToWorkspaceAsync(teamId, guestId, _callback);
        }
    }

    /**
     * Remove Guest From Workspace
     * Revoke a guest&#39;s access to a Workspace. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param teamId Team ID (Workspace) (required)
     * @param guestId  (required)
     * @return RevokeGuestAccessToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RevokeGuestAccessToWorkspaceRequestBuilder revokeGuestAccessToWorkspace(double teamId, double guestId) throws IllegalArgumentException {
        
        
        return new RevokeGuestAccessToWorkspaceRequestBuilder(teamId, guestId);
    }
    private okhttp3.Call shareListWithCall(Double listId, Double guestId, AddGuestToListrequest addGuestToListrequest, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addGuestToListrequest;

        // create path and map variables
        String localVarPath = "/list/{list_id}/guest/{guest_id}"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()))
            .replace("{" + "guest_id" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeShared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_shared", includeShared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareListWithValidateBeforeCall(Double listId, Double guestId, AddGuestToListrequest addGuestToListrequest, Boolean includeShared, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling shareListWith(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling shareListWith(Async)");
        }

        // verify the required parameter 'addGuestToListrequest' is set
        if (addGuestToListrequest == null) {
            throw new ApiException("Missing the required parameter 'addGuestToListrequest' when calling shareListWith(Async)");
        }

        return shareListWithCall(listId, guestId, addGuestToListrequest, includeShared, _callback);

    }


    private ApiResponse<AddGuestToListresponse> shareListWithWithHttpInfo(Double listId, Double guestId, AddGuestToListrequest addGuestToListrequest, Boolean includeShared) throws ApiException {
        okhttp3.Call localVarCall = shareListWithValidateBeforeCall(listId, guestId, addGuestToListrequest, includeShared, null);
        Type localVarReturnType = new TypeToken<AddGuestToListresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shareListWithAsync(Double listId, Double guestId, AddGuestToListrequest addGuestToListrequest, Boolean includeShared, final ApiCallback<AddGuestToListresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareListWithValidateBeforeCall(listId, guestId, addGuestToListrequest, includeShared, _callback);
        Type localVarReturnType = new TypeToken<AddGuestToListresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShareListWithRequestBuilder {
        private final String permissionLevel;
        private final Double listId;
        private final Double guestId;
        private Boolean includeShared;

        private ShareListWithRequestBuilder(String permissionLevel, double listId, double guestId) {
            this.permissionLevel = permissionLevel;
            this.listId = listId;
            this.guestId = guestId;
        }

        /**
         * Set includeShared
         * @param includeShared Exclude details of items shared with the guest by setting this parameter to &#x60;false&#x60;. By default this parameter is set to &#x60;true&#x60;. (optional)
         * @return ShareListWithRequestBuilder
         */
        public ShareListWithRequestBuilder includeShared(Boolean includeShared) {
            this.includeShared = includeShared;
            return this;
        }
        
        /**
         * Build call for shareListWith
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddGuestToListrequest addGuestToListrequest = buildBodyParams();
            return shareListWithCall(listId, guestId, addGuestToListrequest, includeShared, _callback);
        }

        private AddGuestToListrequest buildBodyParams() {
            AddGuestToListrequest addGuestToListrequest = new AddGuestToListrequest();
            addGuestToListrequest.permissionLevel(this.permissionLevel);
            return addGuestToListrequest;
        }

        /**
         * Execute shareListWith request
         * @return AddGuestToListresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AddGuestToListresponse execute() throws ApiException {
            AddGuestToListrequest addGuestToListrequest = buildBodyParams();
            ApiResponse<AddGuestToListresponse> localVarResp = shareListWithWithHttpInfo(listId, guestId, addGuestToListrequest, includeShared);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shareListWith request with HTTP info returned
         * @return ApiResponse&lt;AddGuestToListresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddGuestToListresponse> executeWithHttpInfo() throws ApiException {
            AddGuestToListrequest addGuestToListrequest = buildBodyParams();
            return shareListWithWithHttpInfo(listId, guestId, addGuestToListrequest, includeShared);
        }

        /**
         * Execute shareListWith request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddGuestToListresponse> _callback) throws ApiException {
            AddGuestToListrequest addGuestToListrequest = buildBodyParams();
            return shareListWithAsync(listId, guestId, addGuestToListrequest, includeShared, _callback);
        }
    }

    /**
     * Add Guest To List
     * Share a List with a guest. \\  \\ ***Note:** This endpoint is only available to Workspaces on our [Enterprise Plan](https://clickup.com/pricing).*
     * @param listId  (required)
     * @param guestId  (required)
     * @param addGuestToListrequest  (required)
     * @return ShareListWithRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ShareListWithRequestBuilder shareListWith(String permissionLevel, double listId, double guestId) throws IllegalArgumentException {
        if (permissionLevel == null) throw new IllegalArgumentException("\"permissionLevel\" is required but got null");
            

        
        
        return new ShareListWithRequestBuilder(permissionLevel, listId, guestId);
    }
}
