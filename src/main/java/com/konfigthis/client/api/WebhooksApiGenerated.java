/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateWebhookrequest;
import com.konfigthis.client.model.CreateWebhookresponse;
import com.konfigthis.client.model.GetWebhooksresponse;
import com.konfigthis.client.model.UpdateWebhookrequest;
import com.konfigthis.client.model.UpdateWebhookresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createWebhookCall(Double teamId, CreateWebhookrequest createWebhookrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebhookrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/webhook"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(Double teamId, CreateWebhookrequest createWebhookrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createWebhook(Async)");
        }

        // verify the required parameter 'createWebhookrequest' is set
        if (createWebhookrequest == null) {
            throw new ApiException("Missing the required parameter 'createWebhookrequest' when calling createWebhook(Async)");
        }

        return createWebhookCall(teamId, createWebhookrequest, _callback);

    }


    private ApiResponse<CreateWebhookresponse> createWebhookWithHttpInfo(Double teamId, CreateWebhookrequest createWebhookrequest) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(teamId, createWebhookrequest, null);
        Type localVarReturnType = new TypeToken<CreateWebhookresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebhookAsync(Double teamId, CreateWebhookrequest createWebhookrequest, final ApiCallback<CreateWebhookresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(teamId, createWebhookrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateWebhookresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebhookRequestBuilder {
        private final String endpoint;
        private final List<String> events;
        private final Double teamId;
        private Integer spaceId;
        private Integer folderId;
        private Integer listId;
        private String taskId;

        private CreateWebhookRequestBuilder(String endpoint, List<String> events, double teamId) {
            this.endpoint = endpoint;
            this.events = events;
            this.teamId = teamId;
        }

        /**
         * Set spaceId
         * @param spaceId  (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder spaceId(Integer spaceId) {
            this.spaceId = spaceId;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId  (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder folderId(Integer folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set listId
         * @param listId  (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder listId(Integer listId) {
            this.listId = listId;
            return this;
        }
        
        /**
         * Set taskId
         * @param taskId  (optional)
         * @return CreateWebhookRequestBuilder
         */
        public CreateWebhookRequestBuilder taskId(String taskId) {
            this.taskId = taskId;
            return this;
        }
        
        /**
         * Build call for createWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateWebhookrequest createWebhookrequest = buildBodyParams();
            return createWebhookCall(teamId, createWebhookrequest, _callback);
        }

        private CreateWebhookrequest buildBodyParams() {
            CreateWebhookrequest createWebhookrequest = new CreateWebhookrequest();
            createWebhookrequest.endpoint(this.endpoint);
            createWebhookrequest.events(this.events);
            createWebhookrequest.spaceId(this.spaceId);
            createWebhookrequest.folderId(this.folderId);
            createWebhookrequest.listId(this.listId);
            createWebhookrequest.taskId(this.taskId);
            return createWebhookrequest;
        }

        /**
         * Execute createWebhook request
         * @return CreateWebhookresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateWebhookresponse execute() throws ApiException {
            CreateWebhookrequest createWebhookrequest = buildBodyParams();
            ApiResponse<CreateWebhookresponse> localVarResp = createWebhookWithHttpInfo(teamId, createWebhookrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebhook request with HTTP info returned
         * @return ApiResponse&lt;CreateWebhookresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateWebhookresponse> executeWithHttpInfo() throws ApiException {
            CreateWebhookrequest createWebhookrequest = buildBodyParams();
            return createWebhookWithHttpInfo(teamId, createWebhookrequest);
        }

        /**
         * Execute createWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateWebhookresponse> _callback) throws ApiException {
            CreateWebhookrequest createWebhookrequest = buildBodyParams();
            return createWebhookAsync(teamId, createWebhookrequest, _callback);
        }
    }

    /**
     * Create Webhook
     * Set up a webhook to monitor for events.&lt;br&gt; We do not have a dedicated IP address for webhooks. We use our domain name and dynamic addressing.
     * @param teamId Team ID (Workspace) (required)
     * @param createWebhookrequest You can subscribe to specific events, and one specific location per webhook. [Learn more](https://clickup.com/api). (required)
     * @return CreateWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebhookRequestBuilder createWebhook(String endpoint, List<String> events, double teamId) throws IllegalArgumentException {
        if (endpoint == null) throw new IllegalArgumentException("\"endpoint\" is required but got null");
            

        if (events == null) throw new IllegalArgumentException("\"events\" is required but got null");
        
        return new CreateWebhookRequestBuilder(endpoint, events, teamId);
    }
    private okhttp3.Call removeWebhookByIdCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook/{webhook_id}"
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebhookByIdValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling removeWebhookById(Async)");
        }

        return removeWebhookByIdCall(webhookId, _callback);

    }


    private ApiResponse<Object> removeWebhookByIdWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = removeWebhookByIdValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeWebhookByIdAsync(String webhookId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebhookByIdValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveWebhookByIdRequestBuilder {
        private final String webhookId;

        private RemoveWebhookByIdRequestBuilder(String webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for removeWebhookById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWebhookByIdCall(webhookId, _callback);
        }


        /**
         * Execute removeWebhookById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeWebhookByIdWithHttpInfo(webhookId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeWebhookById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeWebhookByIdWithHttpInfo(webhookId);
        }

        /**
         * Execute removeWebhookById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeWebhookByIdAsync(webhookId, _callback);
        }
    }

    /**
     * Delete Webhook
     * Delete a webhook to stop monitoring the events and locations of the webhook.
     * @param webhookId e506-4a29-9d42-26e504e3435e (uuid) (required)
     * @return RemoveWebhookByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWebhookByIdRequestBuilder removeWebhookById(String webhookId) throws IllegalArgumentException {
        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new RemoveWebhookByIdRequestBuilder(webhookId);
    }
    private okhttp3.Call updateEventsToMonitorCall(String webhookId, UpdateWebhookrequest updateWebhookrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWebhookrequest;

        // create path and map variables
        String localVarPath = "/webhook/{webhook_id}"
            .replace("{" + "webhook_id" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEventsToMonitorValidateBeforeCall(String webhookId, UpdateWebhookrequest updateWebhookrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateEventsToMonitor(Async)");
        }

        // verify the required parameter 'updateWebhookrequest' is set
        if (updateWebhookrequest == null) {
            throw new ApiException("Missing the required parameter 'updateWebhookrequest' when calling updateEventsToMonitor(Async)");
        }

        return updateEventsToMonitorCall(webhookId, updateWebhookrequest, _callback);

    }


    private ApiResponse<UpdateWebhookresponse> updateEventsToMonitorWithHttpInfo(String webhookId, UpdateWebhookrequest updateWebhookrequest) throws ApiException {
        okhttp3.Call localVarCall = updateEventsToMonitorValidateBeforeCall(webhookId, updateWebhookrequest, null);
        Type localVarReturnType = new TypeToken<UpdateWebhookresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEventsToMonitorAsync(String webhookId, UpdateWebhookrequest updateWebhookrequest, final ApiCallback<UpdateWebhookresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEventsToMonitorValidateBeforeCall(webhookId, updateWebhookrequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateWebhookresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEventsToMonitorRequestBuilder {
        private final String endpoint;
        private final String events;
        private final String status;
        private final String webhookId;

        private UpdateEventsToMonitorRequestBuilder(String endpoint, String events, String status, String webhookId) {
            this.endpoint = endpoint;
            this.events = events;
            this.status = status;
            this.webhookId = webhookId;
        }

        /**
         * Build call for updateEventsToMonitor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWebhookrequest updateWebhookrequest = buildBodyParams();
            return updateEventsToMonitorCall(webhookId, updateWebhookrequest, _callback);
        }

        private UpdateWebhookrequest buildBodyParams() {
            UpdateWebhookrequest updateWebhookrequest = new UpdateWebhookrequest();
            updateWebhookrequest.endpoint(this.endpoint);
            updateWebhookrequest.events(this.events);
            updateWebhookrequest.status(this.status);
            return updateWebhookrequest;
        }

        /**
         * Execute updateEventsToMonitor request
         * @return UpdateWebhookresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateWebhookresponse execute() throws ApiException {
            UpdateWebhookrequest updateWebhookrequest = buildBodyParams();
            ApiResponse<UpdateWebhookresponse> localVarResp = updateEventsToMonitorWithHttpInfo(webhookId, updateWebhookrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEventsToMonitor request with HTTP info returned
         * @return ApiResponse&lt;UpdateWebhookresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateWebhookresponse> executeWithHttpInfo() throws ApiException {
            UpdateWebhookrequest updateWebhookrequest = buildBodyParams();
            return updateEventsToMonitorWithHttpInfo(webhookId, updateWebhookrequest);
        }

        /**
         * Execute updateEventsToMonitor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateWebhookresponse> _callback) throws ApiException {
            UpdateWebhookrequest updateWebhookrequest = buildBodyParams();
            return updateEventsToMonitorAsync(webhookId, updateWebhookrequest, _callback);
        }
    }

    /**
     * Update Webhook
     * Update a webhook to change the events to be monitored.
     * @param webhookId e506-4a29-9d42-26e504e3435e (uuid) (required)
     * @param updateWebhookrequest To subscribe to specific events, pass an array of &#x60;events&#x60; that you want to subscribe to, or use the wildcard character &#x60;\&quot;*\&quot;&#x60; to subscribe to everything.\\  \\ If you don&#39;t specify any events, all events will be sent to the webhook. (required)
     * @return UpdateEventsToMonitorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEventsToMonitorRequestBuilder updateEventsToMonitor(String endpoint, String events, String status, String webhookId) throws IllegalArgumentException {
        if (endpoint == null) throw new IllegalArgumentException("\"endpoint\" is required but got null");
            

        if (events == null) throw new IllegalArgumentException("\"events\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (webhookId == null) throw new IllegalArgumentException("\"webhookId\" is required but got null");
            

        return new UpdateEventsToMonitorRequestBuilder(endpoint, events, status, webhookId);
    }
    private okhttp3.Call workspaceGetCall(Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/webhook"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceGetValidateBeforeCall(Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling workspaceGet(Async)");
        }

        return workspaceGetCall(teamId, _callback);

    }


    private ApiResponse<GetWebhooksresponse> workspaceGetWithHttpInfo(Double teamId) throws ApiException {
        okhttp3.Call localVarCall = workspaceGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<GetWebhooksresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call workspaceGetAsync(Double teamId, final ApiCallback<GetWebhooksresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<GetWebhooksresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WorkspaceGetRequestBuilder {
        private final Double teamId;

        private WorkspaceGetRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for workspaceGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return workspaceGetCall(teamId, _callback);
        }


        /**
         * Execute workspaceGet request
         * @return GetWebhooksresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetWebhooksresponse execute() throws ApiException {
            ApiResponse<GetWebhooksresponse> localVarResp = workspaceGetWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute workspaceGet request with HTTP info returned
         * @return ApiResponse&lt;GetWebhooksresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetWebhooksresponse> executeWithHttpInfo() throws ApiException {
            return workspaceGetWithHttpInfo(teamId);
        }

        /**
         * Execute workspaceGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetWebhooksresponse> _callback) throws ApiException {
            return workspaceGetAsync(teamId, _callback);
        }
    }

    /**
     * Get Webhooks
     * View the webhooks created via the API for a Workspace. This endpoint returns webhooks created by the authenticated user.
     * @param teamId Team ID (Workspace) (required)
     * @return WorkspaceGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WorkspaceGetRequestBuilder workspaceGet(double teamId) throws IllegalArgumentException {
        
        return new WorkspaceGetRequestBuilder(teamId);
    }
}
