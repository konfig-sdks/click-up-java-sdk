/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Addtagsfromtimeentriesrequest;
import com.konfigthis.client.model.Changetagnamesfromtimeentriesrequest;
import com.konfigthis.client.model.Createatimeentryrequest;
import com.konfigthis.client.model.Createatimeentryresponse;
import com.konfigthis.client.model.DeleteatimeEntryresponse;
import com.konfigthis.client.model.Getalltagsfromtimeentriesresponse;
import com.konfigthis.client.model.Getrunningtimeentryresponse;
import com.konfigthis.client.model.Getsingulartimeentryresponse;
import com.konfigthis.client.model.Gettimeentrieswithinadaterangeresponse;
import com.konfigthis.client.model.Removetagsfromtimeentriesrequest;
import com.konfigthis.client.model.StartatimeEntryrequest;
import com.konfigthis.client.model.StartatimeEntryresponse;
import com.konfigthis.client.model.StopatimeEntryresponse;
import com.konfigthis.client.model.Tags10;
import com.konfigthis.client.model.Tags6;
import com.konfigthis.client.model.UpdateatimeEntryrequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeTrackingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeTrackingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeTrackingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTagsFromTimeEntriesCall(Double teamId, Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addtagsfromtimeentriesrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/tags"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagsFromTimeEntriesValidateBeforeCall(Double teamId, Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addTagsFromTimeEntries(Async)");
        }

        // verify the required parameter 'addtagsfromtimeentriesrequest' is set
        if (addtagsfromtimeentriesrequest == null) {
            throw new ApiException("Missing the required parameter 'addtagsfromtimeentriesrequest' when calling addTagsFromTimeEntries(Async)");
        }

        return addTagsFromTimeEntriesCall(teamId, addtagsfromtimeentriesrequest, _callback);

    }


    private ApiResponse<Object> addTagsFromTimeEntriesWithHttpInfo(Double teamId, Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest) throws ApiException {
        okhttp3.Call localVarCall = addTagsFromTimeEntriesValidateBeforeCall(teamId, addtagsfromtimeentriesrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTagsFromTimeEntriesAsync(Double teamId, Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagsFromTimeEntriesValidateBeforeCall(teamId, addtagsfromtimeentriesrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTagsFromTimeEntriesRequestBuilder {
        private final List<Tags6> tags;
        private final List<String> timeEntryIds;
        private final Double teamId;

        private AddTagsFromTimeEntriesRequestBuilder(List<Tags6> tags, List<String> timeEntryIds, double teamId) {
            this.tags = tags;
            this.timeEntryIds = timeEntryIds;
            this.teamId = teamId;
        }

        /**
         * Build call for addTagsFromTimeEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest = buildBodyParams();
            return addTagsFromTimeEntriesCall(teamId, addtagsfromtimeentriesrequest, _callback);
        }

        private Addtagsfromtimeentriesrequest buildBodyParams() {
            Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest = new Addtagsfromtimeentriesrequest();
            addtagsfromtimeentriesrequest.tags(this.tags);
            addtagsfromtimeentriesrequest.timeEntryIds(this.timeEntryIds);
            return addtagsfromtimeentriesrequest;
        }

        /**
         * Execute addTagsFromTimeEntries request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = addTagsFromTimeEntriesWithHttpInfo(teamId, addtagsfromtimeentriesrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTagsFromTimeEntries request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest = buildBodyParams();
            return addTagsFromTimeEntriesWithHttpInfo(teamId, addtagsfromtimeentriesrequest);
        }

        /**
         * Execute addTagsFromTimeEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Addtagsfromtimeentriesrequest addtagsfromtimeentriesrequest = buildBodyParams();
            return addTagsFromTimeEntriesAsync(teamId, addtagsfromtimeentriesrequest, _callback);
        }
    }

    /**
     * Add tags from time entries
     * Add a label to a time entry.
     * @param teamId Team ID (Workspace) (required)
     * @param addtagsfromtimeentriesrequest  (required)
     * @return AddTagsFromTimeEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddTagsFromTimeEntriesRequestBuilder addTagsFromTimeEntries(List<Tags6> tags, List<String> timeEntryIds, double teamId) throws IllegalArgumentException {
        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
        if (timeEntryIds == null) throw new IllegalArgumentException("\"timeEntryIds\" is required but got null");
        
        return new AddTagsFromTimeEntriesRequestBuilder(tags, timeEntryIds, teamId);
    }
    private okhttp3.Call changeTagNamesCall(Double teamId, Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changetagnamesfromtimeentriesrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/tags"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeTagNamesValidateBeforeCall(Double teamId, Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling changeTagNames(Async)");
        }

        // verify the required parameter 'changetagnamesfromtimeentriesrequest' is set
        if (changetagnamesfromtimeentriesrequest == null) {
            throw new ApiException("Missing the required parameter 'changetagnamesfromtimeentriesrequest' when calling changeTagNames(Async)");
        }

        return changeTagNamesCall(teamId, changetagnamesfromtimeentriesrequest, _callback);

    }


    private ApiResponse<Object> changeTagNamesWithHttpInfo(Double teamId, Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest) throws ApiException {
        okhttp3.Call localVarCall = changeTagNamesValidateBeforeCall(teamId, changetagnamesfromtimeentriesrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call changeTagNamesAsync(Double teamId, Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeTagNamesValidateBeforeCall(teamId, changetagnamesfromtimeentriesrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ChangeTagNamesRequestBuilder {
        private final String name;
        private final String newName;
        private final String tagBg;
        private final String tagFg;
        private final Double teamId;

        private ChangeTagNamesRequestBuilder(String name, String newName, String tagBg, String tagFg, double teamId) {
            this.name = name;
            this.newName = newName;
            this.tagBg = tagBg;
            this.tagFg = tagFg;
            this.teamId = teamId;
        }

        /**
         * Build call for changeTagNames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest = buildBodyParams();
            return changeTagNamesCall(teamId, changetagnamesfromtimeentriesrequest, _callback);
        }

        private Changetagnamesfromtimeentriesrequest buildBodyParams() {
            Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest = new Changetagnamesfromtimeentriesrequest();
            changetagnamesfromtimeentriesrequest.name(this.name);
            changetagnamesfromtimeentriesrequest.newName(this.newName);
            changetagnamesfromtimeentriesrequest.tagBg(this.tagBg);
            changetagnamesfromtimeentriesrequest.tagFg(this.tagFg);
            return changetagnamesfromtimeentriesrequest;
        }

        /**
         * Execute changeTagNames request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = changeTagNamesWithHttpInfo(teamId, changetagnamesfromtimeentriesrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute changeTagNames request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest = buildBodyParams();
            return changeTagNamesWithHttpInfo(teamId, changetagnamesfromtimeentriesrequest);
        }

        /**
         * Execute changeTagNames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Changetagnamesfromtimeentriesrequest changetagnamesfromtimeentriesrequest = buildBodyParams();
            return changeTagNamesAsync(teamId, changetagnamesfromtimeentriesrequest, _callback);
        }
    }

    /**
     * Change tag names from time entries
     * Rename an time entry label.
     * @param teamId Team ID (Workspace) (required)
     * @param changetagnamesfromtimeentriesrequest  (required)
     * @return ChangeTagNamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ChangeTagNamesRequestBuilder changeTagNames(String name, String newName, String tagBg, String tagFg, double teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (newName == null) throw new IllegalArgumentException("\"newName\" is required but got null");
            

        if (tagBg == null) throw new IllegalArgumentException("\"tagBg\" is required but got null");
            

        if (tagFg == null) throw new IllegalArgumentException("\"tagFg\" is required but got null");
            

        
        return new ChangeTagNamesRequestBuilder(name, newName, tagBg, tagFg, teamId);
    }
    private okhttp3.Call createTimeEntryCall(Double teamId, Createatimeentryrequest createatimeentryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createatimeentryrequest;

        // create path and map variables
        String localVarPath = "/team/{team_Id}/time_entries"
            .replace("{" + "team_Id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTimeEntryValidateBeforeCall(Double teamId, Createatimeentryrequest createatimeentryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTimeEntry(Async)");
        }

        // verify the required parameter 'createatimeentryrequest' is set
        if (createatimeentryrequest == null) {
            throw new ApiException("Missing the required parameter 'createatimeentryrequest' when calling createTimeEntry(Async)");
        }

        return createTimeEntryCall(teamId, createatimeentryrequest, customTaskIds, teamId2, _callback);

    }


    private ApiResponse<Createatimeentryresponse> createTimeEntryWithHttpInfo(Double teamId, Createatimeentryrequest createatimeentryrequest, Boolean customTaskIds, Double teamId2) throws ApiException {
        okhttp3.Call localVarCall = createTimeEntryValidateBeforeCall(teamId, createatimeentryrequest, customTaskIds, teamId2, null);
        Type localVarReturnType = new TypeToken<Createatimeentryresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTimeEntryAsync(Double teamId, Createatimeentryrequest createatimeentryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback<Createatimeentryresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTimeEntryValidateBeforeCall(teamId, createatimeentryrequest, customTaskIds, teamId2, _callback);
        Type localVarReturnType = new TypeToken<Createatimeentryresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTimeEntryRequestBuilder {
        private final Integer start;
        private final Integer duration;
        private final Double teamId;
        private List<Tags6> tags;
        private String description;
        private Integer stop;
        private Integer end;
        private Boolean billable;
        private Integer assignee;
        private String tid;
        private Boolean customTaskIds;
        private Double teamId2;

        private CreateTimeEntryRequestBuilder(Integer start, Integer duration, double teamId) {
            this.start = start;
            this.duration = duration;
            this.teamId = teamId;
        }

        /**
         * Set tags
         * @param tags Users on the Business Plan and above can include a time tracking label. (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder tags(List<Tags6> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set stop
         * @param stop The &#x60;duration&#x60; parameter can be used instead of the &#x60;stop&#x60; parameter.  (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder stop(Integer stop) {
            this.stop = stop;
            return this;
        }
        
        /**
         * Set end
         * @param end  (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder end(Integer end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set billable
         * @param billable  (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder billable(Boolean billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee Workspace owners and admins can include any user id. Workspace members can only include their own user id. (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder assignee(Integer assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set tid
         * @param tid  (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder tid(String tid) {
            this.tid = tid;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId2
         * @param teamId2 Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return CreateTimeEntryRequestBuilder
         */
        public CreateTimeEntryRequestBuilder teamId2(Double teamId2) {
            this.teamId2 = teamId2;
            return this;
        }
        
        /**
         * Build call for createTimeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Createatimeentryrequest createatimeentryrequest = buildBodyParams();
            return createTimeEntryCall(teamId, createatimeentryrequest, customTaskIds, teamId2, _callback);
        }

        private Createatimeentryrequest buildBodyParams() {
            Createatimeentryrequest createatimeentryrequest = new Createatimeentryrequest();
            createatimeentryrequest.tags(this.tags);
            createatimeentryrequest.description(this.description);
            createatimeentryrequest.start(this.start);
            createatimeentryrequest.stop(this.stop);
            createatimeentryrequest.end(this.end);
            createatimeentryrequest.billable(this.billable);
            createatimeentryrequest.duration(this.duration);
            createatimeentryrequest.assignee(this.assignee);
            createatimeentryrequest.tid(this.tid);
            return createatimeentryrequest;
        }

        /**
         * Execute createTimeEntry request
         * @return Createatimeentryresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Createatimeentryresponse execute() throws ApiException {
            Createatimeentryrequest createatimeentryrequest = buildBodyParams();
            ApiResponse<Createatimeentryresponse> localVarResp = createTimeEntryWithHttpInfo(teamId, createatimeentryrequest, customTaskIds, teamId2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTimeEntry request with HTTP info returned
         * @return ApiResponse&lt;Createatimeentryresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Createatimeentryresponse> executeWithHttpInfo() throws ApiException {
            Createatimeentryrequest createatimeentryrequest = buildBodyParams();
            return createTimeEntryWithHttpInfo(teamId, createatimeentryrequest, customTaskIds, teamId2);
        }

        /**
         * Execute createTimeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Createatimeentryresponse> _callback) throws ApiException {
            Createatimeentryrequest createatimeentryrequest = buildBodyParams();
            return createTimeEntryAsync(teamId, createatimeentryrequest, customTaskIds, teamId2, _callback);
        }
    }

    /**
     * Create a time entry
     * Create a time entry. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     * @param teamId Team ID (Workspace) (required)
     * @param createatimeentryrequest Associate a time entry with a task using the &#x60;tid&#x60; parameter. (required)
     * @return CreateTimeEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateTimeEntryRequestBuilder createTimeEntry(Integer start, Integer duration, double teamId) throws IllegalArgumentException {
        if (start == null) throw new IllegalArgumentException("\"start\" is required but got null");
        if (duration == null) throw new IllegalArgumentException("\"duration\" is required but got null");
        
        return new CreateTimeEntryRequestBuilder(start, duration, teamId);
    }
    private okhttp3.Call getAllTagsFromTimeEntriesCall(Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/tags"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTagsFromTimeEntriesValidateBeforeCall(Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getAllTagsFromTimeEntries(Async)");
        }

        return getAllTagsFromTimeEntriesCall(teamId, _callback);

    }


    private ApiResponse<Getalltagsfromtimeentriesresponse> getAllTagsFromTimeEntriesWithHttpInfo(Double teamId) throws ApiException {
        okhttp3.Call localVarCall = getAllTagsFromTimeEntriesValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<Getalltagsfromtimeentriesresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllTagsFromTimeEntriesAsync(Double teamId, final ApiCallback<Getalltagsfromtimeentriesresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTagsFromTimeEntriesValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<Getalltagsfromtimeentriesresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllTagsFromTimeEntriesRequestBuilder {
        private final Double teamId;

        private GetAllTagsFromTimeEntriesRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for getAllTagsFromTimeEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllTagsFromTimeEntriesCall(teamId, _callback);
        }


        /**
         * Execute getAllTagsFromTimeEntries request
         * @return Getalltagsfromtimeentriesresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Getalltagsfromtimeentriesresponse execute() throws ApiException {
            ApiResponse<Getalltagsfromtimeentriesresponse> localVarResp = getAllTagsFromTimeEntriesWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllTagsFromTimeEntries request with HTTP info returned
         * @return ApiResponse&lt;Getalltagsfromtimeentriesresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Getalltagsfromtimeentriesresponse> executeWithHttpInfo() throws ApiException {
            return getAllTagsFromTimeEntriesWithHttpInfo(teamId);
        }

        /**
         * Execute getAllTagsFromTimeEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Getalltagsfromtimeentriesresponse> _callback) throws ApiException {
            return getAllTagsFromTimeEntriesAsync(teamId, _callback);
        }
    }

    /**
     * Get all tags from time entries
     * View all the labels that have been applied to time entries in a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @return GetAllTagsFromTimeEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTagsFromTimeEntriesRequestBuilder getAllTagsFromTimeEntries(double teamId) throws IllegalArgumentException {
        
        return new GetAllTagsFromTimeEntriesRequestBuilder(teamId);
    }
    private okhttp3.Call getCurrentTimeEntryCall(Double teamId, Double assignee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/current"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentTimeEntryValidateBeforeCall(Double teamId, Double assignee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getCurrentTimeEntry(Async)");
        }

        return getCurrentTimeEntryCall(teamId, assignee, _callback);

    }


    private ApiResponse<Getrunningtimeentryresponse> getCurrentTimeEntryWithHttpInfo(Double teamId, Double assignee) throws ApiException {
        okhttp3.Call localVarCall = getCurrentTimeEntryValidateBeforeCall(teamId, assignee, null);
        Type localVarReturnType = new TypeToken<Getrunningtimeentryresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentTimeEntryAsync(Double teamId, Double assignee, final ApiCallback<Getrunningtimeentryresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentTimeEntryValidateBeforeCall(teamId, assignee, _callback);
        Type localVarReturnType = new TypeToken<Getrunningtimeentryresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentTimeEntryRequestBuilder {
        private final Double teamId;
        private Double assignee;

        private GetCurrentTimeEntryRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Set assignee
         * @param assignee user id (optional)
         * @return GetCurrentTimeEntryRequestBuilder
         */
        public GetCurrentTimeEntryRequestBuilder assignee(Double assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Build call for getCurrentTimeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentTimeEntryCall(teamId, assignee, _callback);
        }


        /**
         * Execute getCurrentTimeEntry request
         * @return Getrunningtimeentryresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Getrunningtimeentryresponse execute() throws ApiException {
            ApiResponse<Getrunningtimeentryresponse> localVarResp = getCurrentTimeEntryWithHttpInfo(teamId, assignee);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentTimeEntry request with HTTP info returned
         * @return ApiResponse&lt;Getrunningtimeentryresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Getrunningtimeentryresponse> executeWithHttpInfo() throws ApiException {
            return getCurrentTimeEntryWithHttpInfo(teamId, assignee);
        }

        /**
         * Execute getCurrentTimeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Getrunningtimeentryresponse> _callback) throws ApiException {
            return getCurrentTimeEntryAsync(teamId, assignee, _callback);
        }
    }

    /**
     * Get running time entry
     * View a time entry that&#39;s currently tracking time for the authenticated user. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     * @param teamId Team ID (Workspace) (required)
     * @return GetCurrentTimeEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentTimeEntryRequestBuilder getCurrentTimeEntry(double teamId) throws IllegalArgumentException {
        
        return new GetCurrentTimeEntryRequestBuilder(teamId);
    }
    private okhttp3.Call getSingleTimeEntryCall(Double teamId, String timerId, Boolean includeTask, Boolean includeLocationNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/{timer_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "timer_id" + "}", localVarApiClient.escapeString(timerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTask != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_task_", includeTask));
        }

        if (includeLocationNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_location_names", includeLocationNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTimeEntryValidateBeforeCall(Double teamId, String timerId, Boolean includeTask, Boolean includeLocationNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getSingleTimeEntry(Async)");
        }

        // verify the required parameter 'timerId' is set
        if (timerId == null) {
            throw new ApiException("Missing the required parameter 'timerId' when calling getSingleTimeEntry(Async)");
        }

        return getSingleTimeEntryCall(teamId, timerId, includeTask, includeLocationNames, _callback);

    }


    private ApiResponse<Getsingulartimeentryresponse> getSingleTimeEntryWithHttpInfo(Double teamId, String timerId, Boolean includeTask, Boolean includeLocationNames) throws ApiException {
        okhttp3.Call localVarCall = getSingleTimeEntryValidateBeforeCall(teamId, timerId, includeTask, includeLocationNames, null);
        Type localVarReturnType = new TypeToken<Getsingulartimeentryresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleTimeEntryAsync(Double teamId, String timerId, Boolean includeTask, Boolean includeLocationNames, final ApiCallback<Getsingulartimeentryresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTimeEntryValidateBeforeCall(teamId, timerId, includeTask, includeLocationNames, _callback);
        Type localVarReturnType = new TypeToken<Getsingulartimeentryresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleTimeEntryRequestBuilder {
        private final Double teamId;
        private final String timerId;
        private Boolean includeTask;
        private Boolean includeLocationNames;

        private GetSingleTimeEntryRequestBuilder(double teamId, String timerId) {
            this.teamId = teamId;
            this.timerId = timerId;
        }

        /**
         * Set includeTask
         * @param includeTask Include task  in the response for time entries associated with tasks. (optional)
         * @return GetSingleTimeEntryRequestBuilder
         */
        public GetSingleTimeEntryRequestBuilder includeTask(Boolean includeTask) {
            this.includeTask = includeTask;
            return this;
        }
        
        /**
         * Set includeLocationNames
         * @param includeLocationNames Include the names of the List, Folder, and Space along with &#x60;list_id&#x60;,&#x60;folder_id&#x60;, and &#x60;space_id&#x60;. (optional)
         * @return GetSingleTimeEntryRequestBuilder
         */
        public GetSingleTimeEntryRequestBuilder includeLocationNames(Boolean includeLocationNames) {
            this.includeLocationNames = includeLocationNames;
            return this;
        }
        
        /**
         * Build call for getSingleTimeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleTimeEntryCall(teamId, timerId, includeTask, includeLocationNames, _callback);
        }


        /**
         * Execute getSingleTimeEntry request
         * @return Getsingulartimeentryresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Getsingulartimeentryresponse execute() throws ApiException {
            ApiResponse<Getsingulartimeentryresponse> localVarResp = getSingleTimeEntryWithHttpInfo(teamId, timerId, includeTask, includeLocationNames);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleTimeEntry request with HTTP info returned
         * @return ApiResponse&lt;Getsingulartimeentryresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Getsingulartimeentryresponse> executeWithHttpInfo() throws ApiException {
            return getSingleTimeEntryWithHttpInfo(teamId, timerId, includeTask, includeLocationNames);
        }

        /**
         * Execute getSingleTimeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Getsingulartimeentryresponse> _callback) throws ApiException {
            return getSingleTimeEntryAsync(teamId, timerId, includeTask, includeLocationNames, _callback);
        }
    }

    /**
     * Get singular time entry
     * View a single time entry. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     * @param teamId Team ID (Workspace) (required)
     * @param timerId The ID of a time entry. \\  \\ This can be found using the [Get Time Entries Within a Date Range](https://clickup.com/api) endpoint. (required)
     * @return GetSingleTimeEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleTimeEntryRequestBuilder getSingleTimeEntry(double teamId, String timerId) throws IllegalArgumentException {
        
        if (timerId == null) throw new IllegalArgumentException("\"timerId\" is required but got null");
            

        return new GetSingleTimeEntryRequestBuilder(teamId, timerId);
    }
    private okhttp3.Call getTimeEntriesWithinDateRangeCall(Double teamId, Double startDate, Double endDate, Double assignee, Boolean includeTaskTags, Boolean includeLocationNames, Double spaceId, Double folderId, Double listId, String taskId, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_Id}/time_entries"
            .replace("{" + "team_Id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (assignee != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee", assignee));
        }

        if (includeTaskTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_task_tags", includeTaskTags));
        }

        if (includeLocationNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_location_names", includeLocationNames));
        }

        if (spaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("space_id", spaceId));
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder_id", folderId));
        }

        if (listId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("list_id", listId));
        }

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeEntriesWithinDateRangeValidateBeforeCall(Double teamId, Double startDate, Double endDate, Double assignee, Boolean includeTaskTags, Boolean includeLocationNames, Double spaceId, Double folderId, Double listId, String taskId, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getTimeEntriesWithinDateRange(Async)");
        }

        return getTimeEntriesWithinDateRangeCall(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2, _callback);

    }


    private ApiResponse<Gettimeentrieswithinadaterangeresponse> getTimeEntriesWithinDateRangeWithHttpInfo(Double teamId, Double startDate, Double endDate, Double assignee, Boolean includeTaskTags, Boolean includeLocationNames, Double spaceId, Double folderId, Double listId, String taskId, Boolean customTaskIds, Double teamId2) throws ApiException {
        okhttp3.Call localVarCall = getTimeEntriesWithinDateRangeValidateBeforeCall(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2, null);
        Type localVarReturnType = new TypeToken<Gettimeentrieswithinadaterangeresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeEntriesWithinDateRangeAsync(Double teamId, Double startDate, Double endDate, Double assignee, Boolean includeTaskTags, Boolean includeLocationNames, Double spaceId, Double folderId, Double listId, String taskId, Boolean customTaskIds, Double teamId2, final ApiCallback<Gettimeentrieswithinadaterangeresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeEntriesWithinDateRangeValidateBeforeCall(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2, _callback);
        Type localVarReturnType = new TypeToken<Gettimeentrieswithinadaterangeresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeEntriesWithinDateRangeRequestBuilder {
        private final Double teamId;
        private Double startDate;
        private Double endDate;
        private Double assignee;
        private Boolean includeTaskTags;
        private Boolean includeLocationNames;
        private Double spaceId;
        private Double folderId;
        private Double listId;
        private String taskId;
        private Boolean customTaskIds;
        private Double teamId2;

        private GetTimeEntriesWithinDateRangeRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Set startDate
         * @param startDate Unix time in milliseconds (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder startDate(Double startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Unix time in milliseconds (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder endDate(Double endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set assignee
         * @param assignee Filter by &#x60;user_id&#x60;. For multiple assignees, separate &#x60;user_id&#x60; using commas.\\  \\  **Example:** &#x60;assignee&#x3D;1234,9876&#x60;\\  \\ ***Note:** Only Workspace Owners/Admins have access to do this.* (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder assignee(Double assignee) {
            this.assignee = assignee;
            return this;
        }
        
        /**
         * Set includeTaskTags
         * @param includeTaskTags Include task tags in the response for time entries associated with tasks. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder includeTaskTags(Boolean includeTaskTags) {
            this.includeTaskTags = includeTaskTags;
            return this;
        }
        
        /**
         * Set includeLocationNames
         * @param includeLocationNames Include the names of the List, Folder, and Space along with the &#x60;list_id&#x60;,&#x60;folder_id&#x60;, and &#x60;space_id&#x60;. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder includeLocationNames(Boolean includeLocationNames) {
            this.includeLocationNames = includeLocationNames;
            return this;
        }
        
        /**
         * Set spaceId
         * @param spaceId Only include time entries associated with tasks in a specific Space. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder spaceId(Double spaceId) {
            this.spaceId = spaceId;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId Only include time entries associated with tasks in a specific Folder. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder folderId(Double folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set listId
         * @param listId Only include time entries associated with tasks in a specific List. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder listId(Double listId) {
            this.listId = listId;
            return this;
        }
        
        /**
         * Set taskId
         * @param taskId Only include time entries associated with a specific task. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder taskId(String taskId) {
            this.taskId = taskId;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId2
         * @param teamId2 Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return GetTimeEntriesWithinDateRangeRequestBuilder
         */
        public GetTimeEntriesWithinDateRangeRequestBuilder teamId2(Double teamId2) {
            this.teamId2 = teamId2;
            return this;
        }
        
        /**
         * Build call for getTimeEntriesWithinDateRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If your time entry is associated with a task that uses custom task ids you can expect a &#x60;custom_id&#x60;&#x60; field in the body of the response. The task field will only be included if there is a task associated with a time entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeEntriesWithinDateRangeCall(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2, _callback);
        }


        /**
         * Execute getTimeEntriesWithinDateRange request
         * @return Gettimeentrieswithinadaterangeresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If your time entry is associated with a task that uses custom task ids you can expect a &#x60;custom_id&#x60;&#x60; field in the body of the response. The task field will only be included if there is a task associated with a time entry. </td><td>  -  </td></tr>
         </table>
         */
        public Gettimeentrieswithinadaterangeresponse execute() throws ApiException {
            ApiResponse<Gettimeentrieswithinadaterangeresponse> localVarResp = getTimeEntriesWithinDateRangeWithHttpInfo(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeEntriesWithinDateRange request with HTTP info returned
         * @return ApiResponse&lt;Gettimeentrieswithinadaterangeresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If your time entry is associated with a task that uses custom task ids you can expect a &#x60;custom_id&#x60;&#x60; field in the body of the response. The task field will only be included if there is a task associated with a time entry. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Gettimeentrieswithinadaterangeresponse> executeWithHttpInfo() throws ApiException {
            return getTimeEntriesWithinDateRangeWithHttpInfo(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2);
        }

        /**
         * Execute getTimeEntriesWithinDateRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> If your time entry is associated with a task that uses custom task ids you can expect a &#x60;custom_id&#x60;&#x60; field in the body of the response. The task field will only be included if there is a task associated with a time entry. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Gettimeentrieswithinadaterangeresponse> _callback) throws ApiException {
            return getTimeEntriesWithinDateRangeAsync(teamId, startDate, endDate, assignee, includeTaskTags, includeLocationNames, spaceId, folderId, listId, taskId, customTaskIds, teamId2, _callback);
        }
    }

    /**
     * Get time entries within a date range
     * View time entries filtered by start and end date. \\  \\ By default, this endpoint returns time entries from the last 30 days created by the authenticated user. \\  \\ To retrieve time entries for other users, you must include the &#x60;assignee&#x60; query parameter. \\  \\ Only one of the following location filters can be included at a time: &#x60;space_id&#x60;, &#x60;folder_id&#x60;, &#x60;list_id&#x60;, or &#x60;task_id&#x60;. \\  \\ ***Note:** A time entry that has a negative duration means that timer is currently running for that user.*
     * @param teamId Team ID (Workspace) (required)
     * @return GetTimeEntriesWithinDateRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If your time entry is associated with a task that uses custom task ids you can expect a &#x60;custom_id&#x60;&#x60; field in the body of the response. The task field will only be included if there is a task associated with a time entry. </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeEntriesWithinDateRangeRequestBuilder getTimeEntriesWithinDateRange(double teamId) throws IllegalArgumentException {
        
        return new GetTimeEntriesWithinDateRangeRequestBuilder(teamId);
    }
    private okhttp3.Call getTimeEntryHistoryCall(Double teamId, String timerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/{timer_id}/history"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "timer_id" + "}", localVarApiClient.escapeString(timerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeEntryHistoryValidateBeforeCall(Double teamId, String timerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getTimeEntryHistory(Async)");
        }

        // verify the required parameter 'timerId' is set
        if (timerId == null) {
            throw new ApiException("Missing the required parameter 'timerId' when calling getTimeEntryHistory(Async)");
        }

        return getTimeEntryHistoryCall(teamId, timerId, _callback);

    }


    private ApiResponse<Object> getTimeEntryHistoryWithHttpInfo(Double teamId, String timerId) throws ApiException {
        okhttp3.Call localVarCall = getTimeEntryHistoryValidateBeforeCall(teamId, timerId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeEntryHistoryAsync(Double teamId, String timerId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeEntryHistoryValidateBeforeCall(teamId, timerId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeEntryHistoryRequestBuilder {
        private final Double teamId;
        private final String timerId;

        private GetTimeEntryHistoryRequestBuilder(double teamId, String timerId) {
            this.teamId = teamId;
            this.timerId = timerId;
        }

        /**
         * Build call for getTimeEntryHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeEntryHistoryCall(teamId, timerId, _callback);
        }


        /**
         * Execute getTimeEntryHistory request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTimeEntryHistoryWithHttpInfo(teamId, timerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeEntryHistory request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTimeEntryHistoryWithHttpInfo(teamId, timerId);
        }

        /**
         * Execute getTimeEntryHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTimeEntryHistoryAsync(teamId, timerId, _callback);
        }
    }

    /**
     * Get time entry history
     * View a list of changes made to a time entry.
     * @param teamId Team ID (Workspace) (required)
     * @param timerId The ID of a time entry. \\  \\ This can be found using the [Get Time Entries Within a Date Range](https://clickup.com/api/clickupreference/operation/Gettimeentrieswithinadaterange/) endpoint. (required)
     * @return GetTimeEntryHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeEntryHistoryRequestBuilder getTimeEntryHistory(double teamId, String timerId) throws IllegalArgumentException {
        
        if (timerId == null) throw new IllegalArgumentException("\"timerId\" is required but got null");
            

        return new GetTimeEntryHistoryRequestBuilder(teamId, timerId);
    }
    private okhttp3.Call removeEntryCall(Double teamId, Double timerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/{timer_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "timer_id" + "}", localVarApiClient.escapeString(timerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEntryValidateBeforeCall(Double teamId, Double timerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeEntry(Async)");
        }

        // verify the required parameter 'timerId' is set
        if (timerId == null) {
            throw new ApiException("Missing the required parameter 'timerId' when calling removeEntry(Async)");
        }

        return removeEntryCall(teamId, timerId, _callback);

    }


    private ApiResponse<DeleteatimeEntryresponse> removeEntryWithHttpInfo(Double teamId, Double timerId) throws ApiException {
        okhttp3.Call localVarCall = removeEntryValidateBeforeCall(teamId, timerId, null);
        Type localVarReturnType = new TypeToken<DeleteatimeEntryresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEntryAsync(Double teamId, Double timerId, final ApiCallback<DeleteatimeEntryresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEntryValidateBeforeCall(teamId, timerId, _callback);
        Type localVarReturnType = new TypeToken<DeleteatimeEntryresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEntryRequestBuilder {
        private final Double teamId;
        private final Double timerId;

        private RemoveEntryRequestBuilder(double teamId, double timerId) {
            this.teamId = teamId;
            this.timerId = timerId;
        }

        /**
         * Build call for removeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEntryCall(teamId, timerId, _callback);
        }


        /**
         * Execute removeEntry request
         * @return DeleteatimeEntryresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DeleteatimeEntryresponse execute() throws ApiException {
            ApiResponse<DeleteatimeEntryresponse> localVarResp = removeEntryWithHttpInfo(teamId, timerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEntry request with HTTP info returned
         * @return ApiResponse&lt;DeleteatimeEntryresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteatimeEntryresponse> executeWithHttpInfo() throws ApiException {
            return removeEntryWithHttpInfo(teamId, timerId);
        }

        /**
         * Execute removeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteatimeEntryresponse> _callback) throws ApiException {
            return removeEntryAsync(teamId, timerId, _callback);
        }
    }

    /**
     * Delete a time Entry
     * Delete a time entry from a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @param timerId Array of timer ids to delete separated by commas (required)
     * @return RemoveEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEntryRequestBuilder removeEntry(double teamId, double timerId) throws IllegalArgumentException {
        
        
        return new RemoveEntryRequestBuilder(teamId, timerId);
    }
    private okhttp3.Call removeTagsFromTimeEntriesCall(Double teamId, Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removetagsfromtimeentriesrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/tags"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagsFromTimeEntriesValidateBeforeCall(Double teamId, Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeTagsFromTimeEntries(Async)");
        }

        // verify the required parameter 'removetagsfromtimeentriesrequest' is set
        if (removetagsfromtimeentriesrequest == null) {
            throw new ApiException("Missing the required parameter 'removetagsfromtimeentriesrequest' when calling removeTagsFromTimeEntries(Async)");
        }

        return removeTagsFromTimeEntriesCall(teamId, removetagsfromtimeentriesrequest, _callback);

    }


    private ApiResponse<Object> removeTagsFromTimeEntriesWithHttpInfo(Double teamId, Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest) throws ApiException {
        okhttp3.Call localVarCall = removeTagsFromTimeEntriesValidateBeforeCall(teamId, removetagsfromtimeentriesrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTagsFromTimeEntriesAsync(Double teamId, Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagsFromTimeEntriesValidateBeforeCall(teamId, removetagsfromtimeentriesrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTagsFromTimeEntriesRequestBuilder {
        private final List<Tags10> tags;
        private final List<String> timeEntryIds;
        private final Double teamId;

        private RemoveTagsFromTimeEntriesRequestBuilder(List<Tags10> tags, List<String> timeEntryIds, double teamId) {
            this.tags = tags;
            this.timeEntryIds = timeEntryIds;
            this.teamId = teamId;
        }

        /**
         * Build call for removeTagsFromTimeEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest = buildBodyParams();
            return removeTagsFromTimeEntriesCall(teamId, removetagsfromtimeentriesrequest, _callback);
        }

        private Removetagsfromtimeentriesrequest buildBodyParams() {
            Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest = new Removetagsfromtimeentriesrequest();
            removetagsfromtimeentriesrequest.tags(this.tags);
            removetagsfromtimeentriesrequest.timeEntryIds(this.timeEntryIds);
            return removetagsfromtimeentriesrequest;
        }

        /**
         * Execute removeTagsFromTimeEntries request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = removeTagsFromTimeEntriesWithHttpInfo(teamId, removetagsfromtimeentriesrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTagsFromTimeEntries request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest = buildBodyParams();
            return removeTagsFromTimeEntriesWithHttpInfo(teamId, removetagsfromtimeentriesrequest);
        }

        /**
         * Execute removeTagsFromTimeEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Removetagsfromtimeentriesrequest removetagsfromtimeentriesrequest = buildBodyParams();
            return removeTagsFromTimeEntriesAsync(teamId, removetagsfromtimeentriesrequest, _callback);
        }
    }

    /**
     * Remove tags from time entries
     * Remove labels from time entries. This does not remove the label from a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @param removetagsfromtimeentriesrequest  (required)
     * @return RemoveTagsFromTimeEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagsFromTimeEntriesRequestBuilder removeTagsFromTimeEntries(List<Tags10> tags, List<String> timeEntryIds, double teamId) throws IllegalArgumentException {
        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
        if (timeEntryIds == null) throw new IllegalArgumentException("\"timeEntryIds\" is required but got null");
        
        return new RemoveTagsFromTimeEntriesRequestBuilder(tags, timeEntryIds, teamId);
    }
    private okhttp3.Call startTimerCall(Double teamId, StartatimeEntryrequest startatimeEntryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startatimeEntryrequest;

        // create path and map variables
        String localVarPath = "/team/{team_Id}/time_entries/start"
            .replace("{" + "team_Id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startTimerValidateBeforeCall(Double teamId, StartatimeEntryrequest startatimeEntryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling startTimer(Async)");
        }

        // verify the required parameter 'startatimeEntryrequest' is set
        if (startatimeEntryrequest == null) {
            throw new ApiException("Missing the required parameter 'startatimeEntryrequest' when calling startTimer(Async)");
        }

        return startTimerCall(teamId, startatimeEntryrequest, customTaskIds, teamId2, _callback);

    }


    private ApiResponse<StartatimeEntryresponse> startTimerWithHttpInfo(Double teamId, StartatimeEntryrequest startatimeEntryrequest, Boolean customTaskIds, Double teamId2) throws ApiException {
        okhttp3.Call localVarCall = startTimerValidateBeforeCall(teamId, startatimeEntryrequest, customTaskIds, teamId2, null);
        Type localVarReturnType = new TypeToken<StartatimeEntryresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startTimerAsync(Double teamId, StartatimeEntryrequest startatimeEntryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback<StartatimeEntryresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startTimerValidateBeforeCall(teamId, startatimeEntryrequest, customTaskIds, teamId2, _callback);
        Type localVarReturnType = new TypeToken<StartatimeEntryresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartTimerRequestBuilder {
        private final Double teamId;
        private List<Tags10> tags;
        private String description;
        private String tid;
        private Boolean billable;
        private Boolean customTaskIds;
        private Double teamId2;

        private StartTimerRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Set tags
         * @param tags Users on the Business Plan and above can include a time tracking label. (optional)
         * @return StartTimerRequestBuilder
         */
        public StartTimerRequestBuilder tags(List<Tags10> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return StartTimerRequestBuilder
         */
        public StartTimerRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set tid
         * @param tid  (optional)
         * @return StartTimerRequestBuilder
         */
        public StartTimerRequestBuilder tid(String tid) {
            this.tid = tid;
            return this;
        }
        
        /**
         * Set billable
         * @param billable  (optional)
         * @return StartTimerRequestBuilder
         */
        public StartTimerRequestBuilder billable(Boolean billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return StartTimerRequestBuilder
         */
        public StartTimerRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId2
         * @param teamId2 Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return StartTimerRequestBuilder
         */
        public StartTimerRequestBuilder teamId2(Double teamId2) {
            this.teamId2 = teamId2;
            return this;
        }
        
        /**
         * Build call for startTimer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StartatimeEntryrequest startatimeEntryrequest = buildBodyParams();
            return startTimerCall(teamId, startatimeEntryrequest, customTaskIds, teamId2, _callback);
        }

        private StartatimeEntryrequest buildBodyParams() {
            StartatimeEntryrequest startatimeEntryrequest = new StartatimeEntryrequest();
            startatimeEntryrequest.tags(this.tags);
            startatimeEntryrequest.description(this.description);
            startatimeEntryrequest.tid(this.tid);
            startatimeEntryrequest.billable(this.billable);
            return startatimeEntryrequest;
        }

        /**
         * Execute startTimer request
         * @return StartatimeEntryresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public StartatimeEntryresponse execute() throws ApiException {
            StartatimeEntryrequest startatimeEntryrequest = buildBodyParams();
            ApiResponse<StartatimeEntryresponse> localVarResp = startTimerWithHttpInfo(teamId, startatimeEntryrequest, customTaskIds, teamId2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startTimer request with HTTP info returned
         * @return ApiResponse&lt;StartatimeEntryresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StartatimeEntryresponse> executeWithHttpInfo() throws ApiException {
            StartatimeEntryrequest startatimeEntryrequest = buildBodyParams();
            return startTimerWithHttpInfo(teamId, startatimeEntryrequest, customTaskIds, teamId2);
        }

        /**
         * Execute startTimer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StartatimeEntryresponse> _callback) throws ApiException {
            StartatimeEntryrequest startatimeEntryrequest = buildBodyParams();
            return startTimerAsync(teamId, startatimeEntryrequest, customTaskIds, teamId2, _callback);
        }
    }

    /**
     * Start a time Entry
     * Start a timer for the authenticated user.
     * @param teamId Team ID (Workspace) (required)
     * @param startatimeEntryrequest For Workspaces on the Free Forever or Unlimited Plan, either the &#x60;timer_id&#x60; parameter or the &#x60;\&quot;tid\&quot;&#x60; field in the body of the request are required fields. (required)
     * @return StartTimerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public StartTimerRequestBuilder startTimer(double teamId) throws IllegalArgumentException {
        
        return new StartTimerRequestBuilder(teamId);
    }
    private okhttp3.Call stopTimeEntryCall(Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/stop"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopTimeEntryValidateBeforeCall(Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling stopTimeEntry(Async)");
        }

        return stopTimeEntryCall(teamId, _callback);

    }


    private ApiResponse<StopatimeEntryresponse> stopTimeEntryWithHttpInfo(Double teamId) throws ApiException {
        okhttp3.Call localVarCall = stopTimeEntryValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<StopatimeEntryresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call stopTimeEntryAsync(Double teamId, final ApiCallback<StopatimeEntryresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopTimeEntryValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<StopatimeEntryresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StopTimeEntryRequestBuilder {
        private final Double teamId;

        private StopTimeEntryRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for stopTimeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stopTimeEntryCall(teamId, _callback);
        }


        /**
         * Execute stopTimeEntry request
         * @return StopatimeEntryresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public StopatimeEntryresponse execute() throws ApiException {
            ApiResponse<StopatimeEntryresponse> localVarResp = stopTimeEntryWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute stopTimeEntry request with HTTP info returned
         * @return ApiResponse&lt;StopatimeEntryresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StopatimeEntryresponse> executeWithHttpInfo() throws ApiException {
            return stopTimeEntryWithHttpInfo(teamId);
        }

        /**
         * Execute stopTimeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StopatimeEntryresponse> _callback) throws ApiException {
            return stopTimeEntryAsync(teamId, _callback);
        }
    }

    /**
     * Stop a time Entry
     * Stop a timer that&#39;s currently running for the authenticated user.
     * @param teamId Team ID (Workspace) (required)
     * @return StopTimeEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public StopTimeEntryRequestBuilder stopTimeEntry(double teamId) throws IllegalArgumentException {
        
        return new StopTimeEntryRequestBuilder(teamId);
    }
    private okhttp3.Call updateTimeEntryDetailsCall(Double teamId, Double timerId, UpdateatimeEntryrequest updateatimeEntryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateatimeEntryrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/time_entries/{timer_id}"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "timer_id" + "}", localVarApiClient.escapeString(timerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId2));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeEntryDetailsValidateBeforeCall(Double teamId, Double timerId, UpdateatimeEntryrequest updateatimeEntryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateTimeEntryDetails(Async)");
        }

        // verify the required parameter 'timerId' is set
        if (timerId == null) {
            throw new ApiException("Missing the required parameter 'timerId' when calling updateTimeEntryDetails(Async)");
        }

        // verify the required parameter 'updateatimeEntryrequest' is set
        if (updateatimeEntryrequest == null) {
            throw new ApiException("Missing the required parameter 'updateatimeEntryrequest' when calling updateTimeEntryDetails(Async)");
        }

        return updateTimeEntryDetailsCall(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2, _callback);

    }


    private ApiResponse<Object> updateTimeEntryDetailsWithHttpInfo(Double teamId, Double timerId, UpdateatimeEntryrequest updateatimeEntryrequest, Boolean customTaskIds, Double teamId2) throws ApiException {
        okhttp3.Call localVarCall = updateTimeEntryDetailsValidateBeforeCall(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimeEntryDetailsAsync(Double teamId, Double timerId, UpdateatimeEntryrequest updateatimeEntryrequest, Boolean customTaskIds, Double teamId2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeEntryDetailsValidateBeforeCall(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTimeEntryDetailsRequestBuilder {
        private final List<Tags6> tags;
        private final Double teamId;
        private final Double timerId;
        private String description;
        private String tagAction;
        private Integer start;
        private Integer end;
        private String tid;
        private Boolean billable;
        private Integer duration;
        private Boolean customTaskIds;
        private Double teamId2;

        private UpdateTimeEntryDetailsRequestBuilder(List<Tags6> tags, double teamId, double timerId) {
            this.tags = tags;
            this.teamId = teamId;
            this.timerId = timerId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set tagAction
         * @param tagAction  (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder tagAction(String tagAction) {
            this.tagAction = tagAction;
            return this;
        }
        
        /**
         * Set start
         * @param start When providing &#x60;start&#x60;, you must also provide &#x60;end&#x60;. (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set end
         * @param end When providing &#x60;end&#x60;, you must also provide &#x60;start&#x60;. (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder end(Integer end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set tid
         * @param tid  (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder tid(String tid) {
            this.tid = tid;
            return this;
        }
        
        /**
         * Set billable
         * @param billable  (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder billable(Boolean billable) {
            this.billable = billable;
            return this;
        }
        
        /**
         * Set duration
         * @param duration  (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId2
         * @param teamId2 Only used when the parameter is set to &#x60;custom_task_ids&#x3D;true&#x60;\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60; (optional)
         * @return UpdateTimeEntryDetailsRequestBuilder
         */
        public UpdateTimeEntryDetailsRequestBuilder teamId2(Double teamId2) {
            this.teamId2 = teamId2;
            return this;
        }
        
        /**
         * Build call for updateTimeEntryDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateatimeEntryrequest updateatimeEntryrequest = buildBodyParams();
            return updateTimeEntryDetailsCall(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2, _callback);
        }

        private UpdateatimeEntryrequest buildBodyParams() {
            UpdateatimeEntryrequest updateatimeEntryrequest = new UpdateatimeEntryrequest();
            updateatimeEntryrequest.tags(this.tags);
            updateatimeEntryrequest.description(this.description);
            updateatimeEntryrequest.tagAction(this.tagAction);
            updateatimeEntryrequest.start(this.start);
            updateatimeEntryrequest.end(this.end);
            updateatimeEntryrequest.tid(this.tid);
            updateatimeEntryrequest.billable(this.billable);
            updateatimeEntryrequest.duration(this.duration);
            return updateatimeEntryrequest;
        }

        /**
         * Execute updateTimeEntryDetails request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateatimeEntryrequest updateatimeEntryrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateTimeEntryDetailsWithHttpInfo(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTimeEntryDetails request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateatimeEntryrequest updateatimeEntryrequest = buildBodyParams();
            return updateTimeEntryDetailsWithHttpInfo(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2);
        }

        /**
         * Execute updateTimeEntryDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateatimeEntryrequest updateatimeEntryrequest = buildBodyParams();
            return updateTimeEntryDetailsAsync(teamId, timerId, updateatimeEntryrequest, customTaskIds, teamId2, _callback);
        }
    }

    /**
     * Update a time Entry
     * Update the details of a time entry.
     * @param teamId Team ID (Workspace) (required)
     * @param timerId  (required)
     * @param updateatimeEntryrequest Accessible tag actions are &#x60;[\&quot;replace\&quot;, \&quot;add\&quot;, \&quot;remove\&quot;]&#x60; (required)
     * @return UpdateTimeEntryDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimeEntryDetailsRequestBuilder updateTimeEntryDetails(List<Tags6> tags, double teamId, double timerId) throws IllegalArgumentException {
        if (tags == null) throw new IllegalArgumentException("\"tags\" is required but got null");
        
        
        return new UpdateTimeEntryDetailsRequestBuilder(tags, teamId, timerId);
    }
}
