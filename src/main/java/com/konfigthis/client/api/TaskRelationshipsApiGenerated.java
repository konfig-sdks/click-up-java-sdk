/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDependencyrequest;
import com.konfigthis.client.model.AddTaskLinkresponse;
import com.konfigthis.client.model.DeleteTaskLinkresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskRelationshipsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskRelationshipsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskRelationshipsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDependencyCall(String taskId, AddDependencyrequest addDependencyrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDependencyrequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/dependency"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDependencyValidateBeforeCall(String taskId, AddDependencyrequest addDependencyrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addDependency(Async)");
        }

        // verify the required parameter 'addDependencyrequest' is set
        if (addDependencyrequest == null) {
            throw new ApiException("Missing the required parameter 'addDependencyrequest' when calling addDependency(Async)");
        }

        return addDependencyCall(taskId, addDependencyrequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> addDependencyWithHttpInfo(String taskId, AddDependencyrequest addDependencyrequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = addDependencyValidateBeforeCall(taskId, addDependencyrequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDependencyAsync(String taskId, AddDependencyrequest addDependencyrequest, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDependencyValidateBeforeCall(taskId, addDependencyrequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDependencyRequestBuilder {
        private final String taskId;
        private String dependsOn;
        private String depedencyOf;
        private Boolean customTaskIds;
        private Double teamId;

        private AddDependencyRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set dependsOn
         * @param dependsOn  (optional)
         * @return AddDependencyRequestBuilder
         */
        public AddDependencyRequestBuilder dependsOn(String dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        
        /**
         * Set depedencyOf
         * @param depedencyOf  (optional)
         * @return AddDependencyRequestBuilder
         */
        public AddDependencyRequestBuilder depedencyOf(String depedencyOf) {
            this.depedencyOf = depedencyOf;
            return this;
        }
        
        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return AddDependencyRequestBuilder
         */
        public AddDependencyRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.  For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return AddDependencyRequestBuilder
         */
        public AddDependencyRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addDependency
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDependencyrequest addDependencyrequest = buildBodyParams();
            return addDependencyCall(taskId, addDependencyrequest, customTaskIds, teamId, _callback);
        }

        private AddDependencyrequest buildBodyParams() {
            AddDependencyrequest addDependencyrequest = new AddDependencyrequest();
            addDependencyrequest.dependsOn(this.dependsOn);
            addDependencyrequest.depedencyOf(this.depedencyOf);
            return addDependencyrequest;
        }

        /**
         * Execute addDependency request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            AddDependencyrequest addDependencyrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = addDependencyWithHttpInfo(taskId, addDependencyrequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDependency request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            AddDependencyrequest addDependencyrequest = buildBodyParams();
            return addDependencyWithHttpInfo(taskId, addDependencyrequest, customTaskIds, teamId);
        }

        /**
         * Execute addDependency request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            AddDependencyrequest addDependencyrequest = buildBodyParams();
            return addDependencyAsync(taskId, addDependencyrequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Add Dependency
     * Set a task as waiting on or blocking another task.
     * @param taskId This is the task which is waiting on or blocking another task. (required)
     * @param addDependencyrequest Use the &#x60;depends_on&#x60; parameter in the request body to specify the task that must be completed before the task in the path parameter.\\  \\ Use the &#x60;dependency_of&#x60; parameter in the request body to specify the task that&#39;s waiting for the task in the path parameter to be completed.\\  \\ You can only use one per request. (required)
     * @return AddDependencyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddDependencyRequestBuilder addDependency(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new AddDependencyRequestBuilder(taskId);
    }
    private okhttp3.Call linkTasksCall(String taskId, String linksTo, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/link/{links_to}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "links_to" + "}", localVarApiClient.escapeString(linksTo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkTasksValidateBeforeCall(String taskId, String linksTo, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling linkTasks(Async)");
        }

        // verify the required parameter 'linksTo' is set
        if (linksTo == null) {
            throw new ApiException("Missing the required parameter 'linksTo' when calling linkTasks(Async)");
        }

        return linkTasksCall(taskId, linksTo, customTaskIds, teamId, _callback);

    }


    private ApiResponse<AddTaskLinkresponse> linkTasksWithHttpInfo(String taskId, String linksTo, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = linkTasksValidateBeforeCall(taskId, linksTo, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<AddTaskLinkresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call linkTasksAsync(String taskId, String linksTo, Boolean customTaskIds, Double teamId, final ApiCallback<AddTaskLinkresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkTasksValidateBeforeCall(taskId, linksTo, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<AddTaskLinkresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LinkTasksRequestBuilder {
        private final String taskId;
        private final String linksTo;
        private Boolean customTaskIds;
        private Double teamId;

        private LinkTasksRequestBuilder(String taskId, String linksTo) {
            this.taskId = taskId;
            this.linksTo = linksTo;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return LinkTasksRequestBuilder
         */
        public LinkTasksRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return LinkTasksRequestBuilder
         */
        public LinkTasksRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for linkTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return linkTasksCall(taskId, linksTo, customTaskIds, teamId, _callback);
        }


        /**
         * Execute linkTasks request
         * @return AddTaskLinkresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AddTaskLinkresponse execute() throws ApiException {
            ApiResponse<AddTaskLinkresponse> localVarResp = linkTasksWithHttpInfo(taskId, linksTo, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute linkTasks request with HTTP info returned
         * @return ApiResponse&lt;AddTaskLinkresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddTaskLinkresponse> executeWithHttpInfo() throws ApiException {
            return linkTasksWithHttpInfo(taskId, linksTo, customTaskIds, teamId);
        }

        /**
         * Execute linkTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddTaskLinkresponse> _callback) throws ApiException {
            return linkTasksAsync(taskId, linksTo, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Add Task Link
     * Link two tasks together.
     * @param taskId  (required)
     * @param linksTo  (required)
     * @return LinkTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LinkTasksRequestBuilder linkTasks(String taskId, String linksTo) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (linksTo == null) throw new IllegalArgumentException("\"linksTo\" is required but got null");
            

        return new LinkTasksRequestBuilder(taskId, linksTo);
    }
    private okhttp3.Call removeDependencyCall(String taskId, String dependsOn, String dependencyOf, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/dependency"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dependsOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depends_on", dependsOn));
        }

        if (dependencyOf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dependency_of", dependencyOf));
        }

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDependencyValidateBeforeCall(String taskId, String dependsOn, String dependencyOf, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeDependency(Async)");
        }

        // verify the required parameter 'dependsOn' is set
        if (dependsOn == null) {
            throw new ApiException("Missing the required parameter 'dependsOn' when calling removeDependency(Async)");
        }

        // verify the required parameter 'dependencyOf' is set
        if (dependencyOf == null) {
            throw new ApiException("Missing the required parameter 'dependencyOf' when calling removeDependency(Async)");
        }

        return removeDependencyCall(taskId, dependsOn, dependencyOf, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> removeDependencyWithHttpInfo(String taskId, String dependsOn, String dependencyOf, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = removeDependencyValidateBeforeCall(taskId, dependsOn, dependencyOf, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeDependencyAsync(String taskId, String dependsOn, String dependencyOf, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDependencyValidateBeforeCall(taskId, dependsOn, dependencyOf, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveDependencyRequestBuilder {
        private final String taskId;
        private final String dependsOn;
        private final String dependencyOf;
        private Boolean customTaskIds;
        private Double teamId;

        private RemoveDependencyRequestBuilder(String taskId, String dependsOn, String dependencyOf) {
            this.taskId = taskId;
            this.dependsOn = dependsOn;
            this.dependencyOf = dependencyOf;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RemoveDependencyRequestBuilder
         */
        public RemoveDependencyRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RemoveDependencyRequestBuilder
         */
        public RemoveDependencyRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for removeDependency
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDependencyCall(taskId, dependsOn, dependencyOf, customTaskIds, teamId, _callback);
        }


        /**
         * Execute removeDependency request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeDependencyWithHttpInfo(taskId, dependsOn, dependencyOf, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeDependency request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeDependencyWithHttpInfo(taskId, dependsOn, dependencyOf, customTaskIds, teamId);
        }

        /**
         * Execute removeDependency request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeDependencyAsync(taskId, dependsOn, dependencyOf, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Delete Dependency
     * Remove the dependency relationship between two or more tasks.
     * @param taskId  (required)
     * @param dependsOn  (required)
     * @param dependencyOf  (required)
     * @return RemoveDependencyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDependencyRequestBuilder removeDependency(String taskId, String dependsOn, String dependencyOf) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (dependsOn == null) throw new IllegalArgumentException("\"dependsOn\" is required but got null");
            

        if (dependencyOf == null) throw new IllegalArgumentException("\"dependencyOf\" is required but got null");
            

        return new RemoveDependencyRequestBuilder(taskId, dependsOn, dependencyOf);
    }
    private okhttp3.Call removeLinkBetweenTasksCall(String taskId, String linksTo, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/link/{links_to}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "links_to" + "}", localVarApiClient.escapeString(linksTo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLinkBetweenTasksValidateBeforeCall(String taskId, String linksTo, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeLinkBetweenTasks(Async)");
        }

        // verify the required parameter 'linksTo' is set
        if (linksTo == null) {
            throw new ApiException("Missing the required parameter 'linksTo' when calling removeLinkBetweenTasks(Async)");
        }

        return removeLinkBetweenTasksCall(taskId, linksTo, customTaskIds, teamId, _callback);

    }


    private ApiResponse<DeleteTaskLinkresponse> removeLinkBetweenTasksWithHttpInfo(String taskId, String linksTo, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = removeLinkBetweenTasksValidateBeforeCall(taskId, linksTo, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<DeleteTaskLinkresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeLinkBetweenTasksAsync(String taskId, String linksTo, Boolean customTaskIds, Double teamId, final ApiCallback<DeleteTaskLinkresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLinkBetweenTasksValidateBeforeCall(taskId, linksTo, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<DeleteTaskLinkresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveLinkBetweenTasksRequestBuilder {
        private final String taskId;
        private final String linksTo;
        private Boolean customTaskIds;
        private Double teamId;

        private RemoveLinkBetweenTasksRequestBuilder(String taskId, String linksTo) {
            this.taskId = taskId;
            this.linksTo = linksTo;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RemoveLinkBetweenTasksRequestBuilder
         */
        public RemoveLinkBetweenTasksRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RemoveLinkBetweenTasksRequestBuilder
         */
        public RemoveLinkBetweenTasksRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for removeLinkBetweenTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeLinkBetweenTasksCall(taskId, linksTo, customTaskIds, teamId, _callback);
        }


        /**
         * Execute removeLinkBetweenTasks request
         * @return DeleteTaskLinkresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DeleteTaskLinkresponse execute() throws ApiException {
            ApiResponse<DeleteTaskLinkresponse> localVarResp = removeLinkBetweenTasksWithHttpInfo(taskId, linksTo, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeLinkBetweenTasks request with HTTP info returned
         * @return ApiResponse&lt;DeleteTaskLinkresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteTaskLinkresponse> executeWithHttpInfo() throws ApiException {
            return removeLinkBetweenTasksWithHttpInfo(taskId, linksTo, customTaskIds, teamId);
        }

        /**
         * Execute removeLinkBetweenTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteTaskLinkresponse> _callback) throws ApiException {
            return removeLinkBetweenTasksAsync(taskId, linksTo, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Delete Task Link
     * Remove the link between two tasks.
     * @param taskId  (required)
     * @param linksTo  (required)
     * @return RemoveLinkBetweenTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLinkBetweenTasksRequestBuilder removeLinkBetweenTasks(String taskId, String linksTo) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (linksTo == null) throw new IllegalArgumentException("\"linksTo\" is required but got null");
            

        return new RemoveLinkBetweenTasksRequestBuilder(taskId, linksTo);
    }
}
