/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTeamrequest;
import com.konfigthis.client.model.CreateTeamresponse;
import com.konfigthis.client.model.GetTeamsresponse;
import com.konfigthis.client.model.Members2;
import com.konfigthis.client.model.UpdateTeamrequest;
import com.konfigthis.client.model.UpdateTeamresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamsUserGroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsUserGroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsUserGroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTeamCall(Double teamId, CreateTeamrequest createTeamrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTeamrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/group"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamValidateBeforeCall(Double teamId, CreateTeamrequest createTeamrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTeam(Async)");
        }

        // verify the required parameter 'createTeamrequest' is set
        if (createTeamrequest == null) {
            throw new ApiException("Missing the required parameter 'createTeamrequest' when calling createTeam(Async)");
        }

        return createTeamCall(teamId, createTeamrequest, _callback);

    }


    private ApiResponse<CreateTeamresponse> createTeamWithHttpInfo(Double teamId, CreateTeamrequest createTeamrequest) throws ApiException {
        okhttp3.Call localVarCall = createTeamValidateBeforeCall(teamId, createTeamrequest, null);
        Type localVarReturnType = new TypeToken<CreateTeamresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamAsync(Double teamId, CreateTeamrequest createTeamrequest, final ApiCallback<CreateTeamresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamValidateBeforeCall(teamId, createTeamrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateTeamresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamRequestBuilder {
        private final String name;
        private final List<Integer> members;
        private final Double teamId;

        private CreateTeamRequestBuilder(String name, List<Integer> members, double teamId) {
            this.name = name;
            this.members = members;
            this.teamId = teamId;
        }

        /**
         * Build call for createTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTeamrequest createTeamrequest = buildBodyParams();
            return createTeamCall(teamId, createTeamrequest, _callback);
        }

        private CreateTeamrequest buildBodyParams() {
            CreateTeamrequest createTeamrequest = new CreateTeamrequest();
            createTeamrequest.name(this.name);
            createTeamrequest.members(this.members);
            return createTeamrequest;
        }

        /**
         * Execute createTeam request
         * @return CreateTeamresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateTeamresponse execute() throws ApiException {
            CreateTeamrequest createTeamrequest = buildBodyParams();
            ApiResponse<CreateTeamresponse> localVarResp = createTeamWithHttpInfo(teamId, createTeamrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeam request with HTTP info returned
         * @return ApiResponse&lt;CreateTeamresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTeamresponse> executeWithHttpInfo() throws ApiException {
            CreateTeamrequest createTeamrequest = buildBodyParams();
            return createTeamWithHttpInfo(teamId, createTeamrequest);
        }

        /**
         * Execute createTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTeamresponse> _callback) throws ApiException {
            CreateTeamrequest createTeamrequest = buildBodyParams();
            return createTeamAsync(teamId, createTeamrequest, _callback);
        }
    }

    /**
     * Create Team
     * This endpoint is used to create [Teams: user groups](https://docs.clickup.com/en/articles/4010016-teams-how-to-create-user-groups) which are groups of users you can assign items to in your Workspace.\\  \\ In our API documentation, &#x60;team_id&#x60; refers to the id of a Workspace, and &#x60;group_id&#x60; refers to the id of a user group.\\  \\ **Note:** Adding a guest with view only permissions to a Team automatically converts them to a paid guest.\\  \\ If you don&#39;t have any paid guest seats available, a new member seat is automatically added to increase the number of paid guest seats available.\\  \\ This incurs a prorated charge based on your billing cycle.
     * @param teamId Team ID (Workspace) (required)
     * @param createTeamrequest  (required)
     * @return CreateTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamRequestBuilder createTeam(String name, List<Integer> members, double teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (members == null) throw new IllegalArgumentException("\"members\" is required but got null");
        
        return new CreateTeamRequestBuilder(name, members, teamId);
    }
    private okhttp3.Call getUserGroupsCall(Double teamId, String groupIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (groupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_ids", groupIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGroupsValidateBeforeCall(Double teamId, String groupIds, final ApiCallback _callback) throws ApiException {
        return getUserGroupsCall(teamId, groupIds, _callback);

    }


    private ApiResponse<GetTeamsresponse> getUserGroupsWithHttpInfo(Double teamId, String groupIds) throws ApiException {
        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(teamId, groupIds, null);
        Type localVarReturnType = new TypeToken<GetTeamsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserGroupsAsync(Double teamId, String groupIds, final ApiCallback<GetTeamsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGroupsValidateBeforeCall(teamId, groupIds, _callback);
        Type localVarReturnType = new TypeToken<GetTeamsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserGroupsRequestBuilder {
        private Double teamId;
        private String groupIds;

        private GetUserGroupsRequestBuilder() {
        }

        /**
         * Set teamId
         * @param teamId Team ID (Workspace) (optional)
         * @return GetUserGroupsRequestBuilder
         */
        public GetUserGroupsRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set groupIds
         * @param groupIds Enter one or more Team ids (user groups) to retrieve information about specific Teams. (optional)
         * @return GetUserGroupsRequestBuilder
         */
        public GetUserGroupsRequestBuilder groupIds(String groupIds) {
            this.groupIds = groupIds;
            return this;
        }
        
        /**
         * Build call for getUserGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserGroupsCall(teamId, groupIds, _callback);
        }


        /**
         * Execute getUserGroups request
         * @return GetTeamsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetTeamsresponse execute() throws ApiException {
            ApiResponse<GetTeamsresponse> localVarResp = getUserGroupsWithHttpInfo(teamId, groupIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserGroups request with HTTP info returned
         * @return ApiResponse&lt;GetTeamsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTeamsresponse> executeWithHttpInfo() throws ApiException {
            return getUserGroupsWithHttpInfo(teamId, groupIds);
        }

        /**
         * Execute getUserGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTeamsresponse> _callback) throws ApiException {
            return getUserGroupsAsync(teamId, groupIds, _callback);
        }
    }

    /**
     * Get Teams
     * This endpoint is used to view [Teams: user groups](https://docs.clickup.com/en/articles/4010016-teams-how-to-create-user-groups) in your Workspace.\\  \\ In our API documentation, &#x60;team_id&#x60; refers to the id of a Workspace, and &#x60;group_id&#x60; refers to the id of a user group.
     * @return GetUserGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetUserGroupsRequestBuilder getUserGroups() throws IllegalArgumentException {
        return new GetUserGroupsRequestBuilder();
    }
    private okhttp3.Call removeGroupCall(String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/group/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGroupValidateBeforeCall(String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeGroup(Async)");
        }

        return removeGroupCall(groupId, _callback);

    }


    private ApiResponse<Object> removeGroupWithHttpInfo(String groupId) throws ApiException {
        okhttp3.Call localVarCall = removeGroupValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeGroupAsync(String groupId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGroupValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveGroupRequestBuilder {
        private final String groupId;

        private RemoveGroupRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Build call for removeGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeGroupCall(groupId, _callback);
        }


        /**
         * Execute removeGroup request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeGroupWithHttpInfo(groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeGroup request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeGroupWithHttpInfo(groupId);
        }

        /**
         * Execute removeGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeGroupAsync(groupId, _callback);
        }
    }

    /**
     * Delete Team
     * This endpoint is used to remove a [Team: user group](https://docs.clickup.com/en/articles/4010016-teams-how-to-create-user-groups) from your Workspace.\\  \\ In our API documentation, &#x60;team_id&#x60; refers to the id of a Workspace, and &#x60;group_id&#x60; refers to the id of a user group.
     * @param groupId 7C73-4002-A6A9-310014852858 (string) - Team ID (user group) (required)
     * @return RemoveGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveGroupRequestBuilder removeGroup(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveGroupRequestBuilder(groupId);
    }
    private okhttp3.Call updateUserGroupCall(String groupId, UpdateTeamrequest updateTeamrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeamrequest;

        // create path and map variables
        String localVarPath = "/group/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserGroupValidateBeforeCall(String groupId, UpdateTeamrequest updateTeamrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateUserGroup(Async)");
        }

        // verify the required parameter 'updateTeamrequest' is set
        if (updateTeamrequest == null) {
            throw new ApiException("Missing the required parameter 'updateTeamrequest' when calling updateUserGroup(Async)");
        }

        return updateUserGroupCall(groupId, updateTeamrequest, _callback);

    }


    private ApiResponse<UpdateTeamresponse> updateUserGroupWithHttpInfo(String groupId, UpdateTeamrequest updateTeamrequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserGroupValidateBeforeCall(groupId, updateTeamrequest, null);
        Type localVarReturnType = new TypeToken<UpdateTeamresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserGroupAsync(String groupId, UpdateTeamrequest updateTeamrequest, final ApiCallback<UpdateTeamresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserGroupValidateBeforeCall(groupId, updateTeamrequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateTeamresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserGroupRequestBuilder {
        private final String groupId;
        private String name;
        private String handle;
        private Members2 members;

        private UpdateUserGroupRequestBuilder(String groupId) {
            this.groupId = groupId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateUserGroupRequestBuilder
         */
        public UpdateUserGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set handle
         * @param handle  (optional)
         * @return UpdateUserGroupRequestBuilder
         */
        public UpdateUserGroupRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set members
         * @param members  (optional)
         * @return UpdateUserGroupRequestBuilder
         */
        public UpdateUserGroupRequestBuilder members(Members2 members) {
            this.members = members;
            return this;
        }
        
        /**
         * Build call for updateUserGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTeamrequest updateTeamrequest = buildBodyParams();
            return updateUserGroupCall(groupId, updateTeamrequest, _callback);
        }

        private UpdateTeamrequest buildBodyParams() {
            UpdateTeamrequest updateTeamrequest = new UpdateTeamrequest();
            updateTeamrequest.name(this.name);
            updateTeamrequest.handle(this.handle);
            updateTeamrequest.members(this.members);
            return updateTeamrequest;
        }

        /**
         * Execute updateUserGroup request
         * @return UpdateTeamresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateTeamresponse execute() throws ApiException {
            UpdateTeamrequest updateTeamrequest = buildBodyParams();
            ApiResponse<UpdateTeamresponse> localVarResp = updateUserGroupWithHttpInfo(groupId, updateTeamrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserGroup request with HTTP info returned
         * @return ApiResponse&lt;UpdateTeamresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateTeamresponse> executeWithHttpInfo() throws ApiException {
            UpdateTeamrequest updateTeamrequest = buildBodyParams();
            return updateUserGroupWithHttpInfo(groupId, updateTeamrequest);
        }

        /**
         * Execute updateUserGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateTeamresponse> _callback) throws ApiException {
            UpdateTeamrequest updateTeamrequest = buildBodyParams();
            return updateUserGroupAsync(groupId, updateTeamrequest, _callback);
        }
    }

    /**
     * Update Team
     * This endpoint is used to manage [Teams: user groups](https://docs.clickup.com/en/articles/4010016-teams-how-to-create-user-groups) which are groups of users you can assign items to in your Workspace.\\  \\ In our API documentation, &#x60;team_id&#x60; refers to the id of a Workspace, and &#x60;group_id&#x60; refers to the id of a user group.\\  \\ **Note:** Adding a guest with view only permissions to a Team automatically converts them to a paid guest.\\  \\ If you don&#39;t have any paid guest seats available, a new member seat is automatically added to increase the number of paid guest seats available.\\  \\ This incurs a prorated charge based on your billing cycle.
     * @param groupId 7C73-4002-A6A9-310014852858 (string) - Team ID (user group) (required)
     * @param updateTeamrequest You can update the team &#x60;handle&#x60; which is used to @mention a Team (user group) in your Workspace.\\  \\ Add or remove members to and from a Team (user group) using the &#x60;\&quot;add\&quot;&#x60; and/or &#x60;\&quot;rem\&quot;&#x60; parameters and including an array of user ids. (required)
     * @return UpdateUserGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserGroupRequestBuilder updateUserGroup(String groupId) throws IllegalArgumentException {
        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateUserGroupRequestBuilder(groupId);
    }
}
