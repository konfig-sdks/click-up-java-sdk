/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateGoalrequest;
import com.konfigthis.client.model.CreateGoalresponse;
import com.konfigthis.client.model.CreateKeyResultrequest;
import com.konfigthis.client.model.CreateKeyResultresponse;
import com.konfigthis.client.model.EditKeyResultrequest;
import com.konfigthis.client.model.EditKeyResultresponse;
import com.konfigthis.client.model.GetGoalresponse;
import com.konfigthis.client.model.GetGoalsresponse;
import com.konfigthis.client.model.UpdateGoalrequest;
import com.konfigthis.client.model.UpdateGoalresponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GoalsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GoalsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GoalsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addKeyResultCall(String goalId, CreateKeyResultrequest createKeyResultrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKeyResultrequest;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}/key_result"
            .replace("{" + "goal_id" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addKeyResultValidateBeforeCall(String goalId, CreateKeyResultrequest createKeyResultrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling addKeyResult(Async)");
        }

        // verify the required parameter 'createKeyResultrequest' is set
        if (createKeyResultrequest == null) {
            throw new ApiException("Missing the required parameter 'createKeyResultrequest' when calling addKeyResult(Async)");
        }

        return addKeyResultCall(goalId, createKeyResultrequest, _callback);

    }


    private ApiResponse<CreateKeyResultresponse> addKeyResultWithHttpInfo(String goalId, CreateKeyResultrequest createKeyResultrequest) throws ApiException {
        okhttp3.Call localVarCall = addKeyResultValidateBeforeCall(goalId, createKeyResultrequest, null);
        Type localVarReturnType = new TypeToken<CreateKeyResultresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addKeyResultAsync(String goalId, CreateKeyResultrequest createKeyResultrequest, final ApiCallback<CreateKeyResultresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addKeyResultValidateBeforeCall(goalId, createKeyResultrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateKeyResultresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddKeyResultRequestBuilder {
        private final String name;
        private final List<Integer> owners;
        private final String type;
        private final Integer stepsStart;
        private final Integer stepsEnd;
        private final String unit;
        private final List<String> taskIds;
        private final List<String> listIds;
        private final String goalId;

        private AddKeyResultRequestBuilder(String name, List<Integer> owners, String type, Integer stepsStart, Integer stepsEnd, String unit, List<String> taskIds, List<String> listIds, String goalId) {
            this.name = name;
            this.owners = owners;
            this.type = type;
            this.stepsStart = stepsStart;
            this.stepsEnd = stepsEnd;
            this.unit = unit;
            this.taskIds = taskIds;
            this.listIds = listIds;
            this.goalId = goalId;
        }

        /**
         * Build call for addKeyResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateKeyResultrequest createKeyResultrequest = buildBodyParams();
            return addKeyResultCall(goalId, createKeyResultrequest, _callback);
        }

        private CreateKeyResultrequest buildBodyParams() {
            CreateKeyResultrequest createKeyResultrequest = new CreateKeyResultrequest();
            createKeyResultrequest.name(this.name);
            createKeyResultrequest.owners(this.owners);
            createKeyResultrequest.type(this.type);
            createKeyResultrequest.stepsStart(this.stepsStart);
            createKeyResultrequest.stepsEnd(this.stepsEnd);
            createKeyResultrequest.unit(this.unit);
            createKeyResultrequest.taskIds(this.taskIds);
            createKeyResultrequest.listIds(this.listIds);
            return createKeyResultrequest;
        }

        /**
         * Execute addKeyResult request
         * @return CreateKeyResultresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateKeyResultresponse execute() throws ApiException {
            CreateKeyResultrequest createKeyResultrequest = buildBodyParams();
            ApiResponse<CreateKeyResultresponse> localVarResp = addKeyResultWithHttpInfo(goalId, createKeyResultrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addKeyResult request with HTTP info returned
         * @return ApiResponse&lt;CreateKeyResultresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateKeyResultresponse> executeWithHttpInfo() throws ApiException {
            CreateKeyResultrequest createKeyResultrequest = buildBodyParams();
            return addKeyResultWithHttpInfo(goalId, createKeyResultrequest);
        }

        /**
         * Execute addKeyResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateKeyResultresponse> _callback) throws ApiException {
            CreateKeyResultrequest createKeyResultrequest = buildBodyParams();
            return addKeyResultAsync(goalId, createKeyResultrequest, _callback);
        }
    }

    /**
     * Create Key Result
     * Add a Target to a Goal.
     * @param goalId 900e-462d-a849-4a216b06d930 (uuid) (required)
     * @param createKeyResultrequest  (required)
     * @return AddKeyResultRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddKeyResultRequestBuilder addKeyResult(String name, List<Integer> owners, String type, Integer stepsStart, Integer stepsEnd, String unit, List<String> taskIds, List<String> listIds, String goalId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (owners == null) throw new IllegalArgumentException("\"owners\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (stepsStart == null) throw new IllegalArgumentException("\"stepsStart\" is required but got null");
        if (stepsEnd == null) throw new IllegalArgumentException("\"stepsEnd\" is required but got null");
        if (unit == null) throw new IllegalArgumentException("\"unit\" is required but got null");
            

        if (taskIds == null) throw new IllegalArgumentException("\"taskIds\" is required but got null");
        if (listIds == null) throw new IllegalArgumentException("\"listIds\" is required but got null");
        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new AddKeyResultRequestBuilder(name, owners, type, stepsStart, stepsEnd, unit, taskIds, listIds, goalId);
    }
    private okhttp3.Call addNewGoalToWorkspaceCall(Double teamId, CreateGoalrequest createGoalrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGoalrequest;

        // create path and map variables
        String localVarPath = "/team/{team_id}/goal"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewGoalToWorkspaceValidateBeforeCall(Double teamId, CreateGoalrequest createGoalrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addNewGoalToWorkspace(Async)");
        }

        // verify the required parameter 'createGoalrequest' is set
        if (createGoalrequest == null) {
            throw new ApiException("Missing the required parameter 'createGoalrequest' when calling addNewGoalToWorkspace(Async)");
        }

        return addNewGoalToWorkspaceCall(teamId, createGoalrequest, _callback);

    }


    private ApiResponse<CreateGoalresponse> addNewGoalToWorkspaceWithHttpInfo(Double teamId, CreateGoalrequest createGoalrequest) throws ApiException {
        okhttp3.Call localVarCall = addNewGoalToWorkspaceValidateBeforeCall(teamId, createGoalrequest, null);
        Type localVarReturnType = new TypeToken<CreateGoalresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewGoalToWorkspaceAsync(Double teamId, CreateGoalrequest createGoalrequest, final ApiCallback<CreateGoalresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewGoalToWorkspaceValidateBeforeCall(teamId, createGoalrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateGoalresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewGoalToWorkspaceRequestBuilder {
        private final String description;
        private final String name;
        private final Integer dueDate;
        private final Boolean multipleOwners;
        private final List<Integer> owners;
        private final String color;
        private final Double teamId;

        private AddNewGoalToWorkspaceRequestBuilder(String description, String name, Integer dueDate, Boolean multipleOwners, List<Integer> owners, String color, double teamId) {
            this.description = description;
            this.name = name;
            this.dueDate = dueDate;
            this.multipleOwners = multipleOwners;
            this.owners = owners;
            this.color = color;
            this.teamId = teamId;
        }

        /**
         * Build call for addNewGoalToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateGoalrequest createGoalrequest = buildBodyParams();
            return addNewGoalToWorkspaceCall(teamId, createGoalrequest, _callback);
        }

        private CreateGoalrequest buildBodyParams() {
            CreateGoalrequest createGoalrequest = new CreateGoalrequest();
            createGoalrequest.description(this.description);
            createGoalrequest.name(this.name);
            createGoalrequest.dueDate(this.dueDate);
            createGoalrequest.multipleOwners(this.multipleOwners);
            createGoalrequest.owners(this.owners);
            createGoalrequest.color(this.color);
            return createGoalrequest;
        }

        /**
         * Execute addNewGoalToWorkspace request
         * @return CreateGoalresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateGoalresponse execute() throws ApiException {
            CreateGoalrequest createGoalrequest = buildBodyParams();
            ApiResponse<CreateGoalresponse> localVarResp = addNewGoalToWorkspaceWithHttpInfo(teamId, createGoalrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewGoalToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;CreateGoalresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateGoalresponse> executeWithHttpInfo() throws ApiException {
            CreateGoalrequest createGoalrequest = buildBodyParams();
            return addNewGoalToWorkspaceWithHttpInfo(teamId, createGoalrequest);
        }

        /**
         * Execute addNewGoalToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateGoalresponse> _callback) throws ApiException {
            CreateGoalrequest createGoalrequest = buildBodyParams();
            return addNewGoalToWorkspaceAsync(teamId, createGoalrequest, _callback);
        }
    }

    /**
     * Create Goal
     * Add a new Goal to a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @param createGoalrequest  (required)
     * @return AddNewGoalToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddNewGoalToWorkspaceRequestBuilder addNewGoalToWorkspace(String description, String name, Integer dueDate, Boolean multipleOwners, List<Integer> owners, String color, double teamId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (dueDate == null) throw new IllegalArgumentException("\"dueDate\" is required but got null");
        if (multipleOwners == null) throw new IllegalArgumentException("\"multipleOwners\" is required but got null");
        if (owners == null) throw new IllegalArgumentException("\"owners\" is required but got null");
        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        
        return new AddNewGoalToWorkspaceRequestBuilder(description, name, dueDate, multipleOwners, owners, color, teamId);
    }
    private okhttp3.Call getDetailsCall(String goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}"
            .replace("{" + "goal_id" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling getDetails(Async)");
        }

        return getDetailsCall(goalId, _callback);

    }


    private ApiResponse<GetGoalresponse> getDetailsWithHttpInfo(String goalId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(goalId, null);
        Type localVarReturnType = new TypeToken<GetGoalresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String goalId, final ApiCallback<GetGoalresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(goalId, _callback);
        Type localVarReturnType = new TypeToken<GetGoalresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String goalId;

        private GetDetailsRequestBuilder(String goalId) {
            this.goalId = goalId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(goalId, _callback);
        }


        /**
         * Execute getDetails request
         * @return GetGoalresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetGoalresponse execute() throws ApiException {
            ApiResponse<GetGoalresponse> localVarResp = getDetailsWithHttpInfo(goalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;GetGoalresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGoalresponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(goalId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGoalresponse> _callback) throws ApiException {
            return getDetailsAsync(goalId, _callback);
        }
    }

    /**
     * Get Goal
     * View the details of a Goal including its Targets.
     * @param goalId 900e-462d-a849-4a216b06d930 (uuid) (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String goalId) throws IllegalArgumentException {
        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new GetDetailsRequestBuilder(goalId);
    }
    private okhttp3.Call getWorkspaceGoalsCall(Double teamId, Boolean includeCompleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team/{team_id}/goal"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCompleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_completed", includeCompleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkspaceGoalsValidateBeforeCall(Double teamId, Boolean includeCompleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getWorkspaceGoals(Async)");
        }

        return getWorkspaceGoalsCall(teamId, includeCompleted, _callback);

    }


    private ApiResponse<GetGoalsresponse> getWorkspaceGoalsWithHttpInfo(Double teamId, Boolean includeCompleted) throws ApiException {
        okhttp3.Call localVarCall = getWorkspaceGoalsValidateBeforeCall(teamId, includeCompleted, null);
        Type localVarReturnType = new TypeToken<GetGoalsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkspaceGoalsAsync(Double teamId, Boolean includeCompleted, final ApiCallback<GetGoalsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkspaceGoalsValidateBeforeCall(teamId, includeCompleted, _callback);
        Type localVarReturnType = new TypeToken<GetGoalsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkspaceGoalsRequestBuilder {
        private final Double teamId;
        private Boolean includeCompleted;

        private GetWorkspaceGoalsRequestBuilder(double teamId) {
            this.teamId = teamId;
        }

        /**
         * Set includeCompleted
         * @param includeCompleted  (optional)
         * @return GetWorkspaceGoalsRequestBuilder
         */
        public GetWorkspaceGoalsRequestBuilder includeCompleted(Boolean includeCompleted) {
            this.includeCompleted = includeCompleted;
            return this;
        }
        
        /**
         * Build call for getWorkspaceGoals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkspaceGoalsCall(teamId, includeCompleted, _callback);
        }


        /**
         * Execute getWorkspaceGoals request
         * @return GetGoalsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetGoalsresponse execute() throws ApiException {
            ApiResponse<GetGoalsresponse> localVarResp = getWorkspaceGoalsWithHttpInfo(teamId, includeCompleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkspaceGoals request with HTTP info returned
         * @return ApiResponse&lt;GetGoalsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetGoalsresponse> executeWithHttpInfo() throws ApiException {
            return getWorkspaceGoalsWithHttpInfo(teamId, includeCompleted);
        }

        /**
         * Execute getWorkspaceGoals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetGoalsresponse> _callback) throws ApiException {
            return getWorkspaceGoalsAsync(teamId, includeCompleted, _callback);
        }
    }

    /**
     * Get Goals
     * View the Goals available in a Workspace.
     * @param teamId Team ID (Workspace) (required)
     * @return GetWorkspaceGoalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkspaceGoalsRequestBuilder getWorkspaceGoals(double teamId) throws IllegalArgumentException {
        
        return new GetWorkspaceGoalsRequestBuilder(teamId);
    }
    private okhttp3.Call removeGoalCall(String goalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}"
            .replace("{" + "goal_id" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGoalValidateBeforeCall(String goalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling removeGoal(Async)");
        }

        return removeGoalCall(goalId, _callback);

    }


    private ApiResponse<Object> removeGoalWithHttpInfo(String goalId) throws ApiException {
        okhttp3.Call localVarCall = removeGoalValidateBeforeCall(goalId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeGoalAsync(String goalId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGoalValidateBeforeCall(goalId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveGoalRequestBuilder {
        private final String goalId;

        private RemoveGoalRequestBuilder(String goalId) {
            this.goalId = goalId;
        }

        /**
         * Build call for removeGoal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeGoalCall(goalId, _callback);
        }


        /**
         * Execute removeGoal request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeGoalWithHttpInfo(goalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeGoal request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeGoalWithHttpInfo(goalId);
        }

        /**
         * Execute removeGoal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeGoalAsync(goalId, _callback);
        }
    }

    /**
     * Delete Goal
     * Remove a Goal from your Workspace.
     * @param goalId 900e-462d-a849-4a216b06d930 (uuid) (required)
     * @return RemoveGoalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveGoalRequestBuilder removeGoal(String goalId) throws IllegalArgumentException {
        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new RemoveGoalRequestBuilder(goalId);
    }
    private okhttp3.Call removeTargetCall(String keyResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key_result/{key_result_id}"
            .replace("{" + "key_result_id" + "}", localVarApiClient.escapeString(keyResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTargetValidateBeforeCall(String keyResultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyResultId' is set
        if (keyResultId == null) {
            throw new ApiException("Missing the required parameter 'keyResultId' when calling removeTarget(Async)");
        }

        return removeTargetCall(keyResultId, _callback);

    }


    private ApiResponse<Object> removeTargetWithHttpInfo(String keyResultId) throws ApiException {
        okhttp3.Call localVarCall = removeTargetValidateBeforeCall(keyResultId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeTargetAsync(String keyResultId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTargetValidateBeforeCall(keyResultId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveTargetRequestBuilder {
        private final String keyResultId;

        private RemoveTargetRequestBuilder(String keyResultId) {
            this.keyResultId = keyResultId;
        }

        /**
         * Build call for removeTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTargetCall(keyResultId, _callback);
        }


        /**
         * Execute removeTarget request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeTargetWithHttpInfo(keyResultId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeTarget request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeTargetWithHttpInfo(keyResultId);
        }

        /**
         * Execute removeTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeTargetAsync(keyResultId, _callback);
        }
    }

    /**
     * Delete Key Result
     * Delete a target from a Goal.
     * @param keyResultId 8480-49bc-8c57-e569747efe93 (uuid) (required)
     * @return RemoveTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTargetRequestBuilder removeTarget(String keyResultId) throws IllegalArgumentException {
        if (keyResultId == null) throw new IllegalArgumentException("\"keyResultId\" is required but got null");
            

        return new RemoveTargetRequestBuilder(keyResultId);
    }
    private okhttp3.Call updateGoalDetailsCall(String goalId, UpdateGoalrequest updateGoalrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGoalrequest;

        // create path and map variables
        String localVarPath = "/goal/{goal_id}"
            .replace("{" + "goal_id" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGoalDetailsValidateBeforeCall(String goalId, UpdateGoalrequest updateGoalrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling updateGoalDetails(Async)");
        }

        // verify the required parameter 'updateGoalrequest' is set
        if (updateGoalrequest == null) {
            throw new ApiException("Missing the required parameter 'updateGoalrequest' when calling updateGoalDetails(Async)");
        }

        return updateGoalDetailsCall(goalId, updateGoalrequest, _callback);

    }


    private ApiResponse<UpdateGoalresponse> updateGoalDetailsWithHttpInfo(String goalId, UpdateGoalrequest updateGoalrequest) throws ApiException {
        okhttp3.Call localVarCall = updateGoalDetailsValidateBeforeCall(goalId, updateGoalrequest, null);
        Type localVarReturnType = new TypeToken<UpdateGoalresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGoalDetailsAsync(String goalId, UpdateGoalrequest updateGoalrequest, final ApiCallback<UpdateGoalresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGoalDetailsValidateBeforeCall(goalId, updateGoalrequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateGoalresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGoalDetailsRequestBuilder {
        private final String description;
        private final String name;
        private final Integer dueDate;
        private final List<Integer> remOwners;
        private final List<Integer> addOwners;
        private final String color;
        private final String goalId;

        private UpdateGoalDetailsRequestBuilder(String description, String name, Integer dueDate, List<Integer> remOwners, List<Integer> addOwners, String color, String goalId) {
            this.description = description;
            this.name = name;
            this.dueDate = dueDate;
            this.remOwners = remOwners;
            this.addOwners = addOwners;
            this.color = color;
            this.goalId = goalId;
        }

        /**
         * Build call for updateGoalDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateGoalrequest updateGoalrequest = buildBodyParams();
            return updateGoalDetailsCall(goalId, updateGoalrequest, _callback);
        }

        private UpdateGoalrequest buildBodyParams() {
            UpdateGoalrequest updateGoalrequest = new UpdateGoalrequest();
            updateGoalrequest.description(this.description);
            updateGoalrequest.name(this.name);
            updateGoalrequest.dueDate(this.dueDate);
            updateGoalrequest.remOwners(this.remOwners);
            updateGoalrequest.addOwners(this.addOwners);
            updateGoalrequest.color(this.color);
            return updateGoalrequest;
        }

        /**
         * Execute updateGoalDetails request
         * @return UpdateGoalresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public UpdateGoalresponse execute() throws ApiException {
            UpdateGoalrequest updateGoalrequest = buildBodyParams();
            ApiResponse<UpdateGoalresponse> localVarResp = updateGoalDetailsWithHttpInfo(goalId, updateGoalrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGoalDetails request with HTTP info returned
         * @return ApiResponse&lt;UpdateGoalresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateGoalresponse> executeWithHttpInfo() throws ApiException {
            UpdateGoalrequest updateGoalrequest = buildBodyParams();
            return updateGoalDetailsWithHttpInfo(goalId, updateGoalrequest);
        }

        /**
         * Execute updateGoalDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateGoalresponse> _callback) throws ApiException {
            UpdateGoalrequest updateGoalrequest = buildBodyParams();
            return updateGoalDetailsAsync(goalId, updateGoalrequest, _callback);
        }
    }

    /**
     * Update Goal
     * Rename a Goal, set the due date, replace the description, add or remove owners, and set the Goal color.
     * @param goalId 900e-462d-a849-4a216b06d930 (uuid) (required)
     * @param updateGoalrequest  (required)
     * @return UpdateGoalDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGoalDetailsRequestBuilder updateGoalDetails(String description, String name, Integer dueDate, List<Integer> remOwners, List<Integer> addOwners, String color, String goalId) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (dueDate == null) throw new IllegalArgumentException("\"dueDate\" is required but got null");
        if (remOwners == null) throw new IllegalArgumentException("\"remOwners\" is required but got null");
        if (addOwners == null) throw new IllegalArgumentException("\"addOwners\" is required but got null");
        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        if (goalId == null) throw new IllegalArgumentException("\"goalId\" is required but got null");
            

        return new UpdateGoalDetailsRequestBuilder(description, name, dueDate, remOwners, addOwners, color, goalId);
    }
    private okhttp3.Call updateKeyResultCall(String keyResultId, EditKeyResultrequest editKeyResultrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editKeyResultrequest;

        // create path and map variables
        String localVarPath = "/key_result/{key_result_id}"
            .replace("{" + "key_result_id" + "}", localVarApiClient.escapeString(keyResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKeyResultValidateBeforeCall(String keyResultId, EditKeyResultrequest editKeyResultrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyResultId' is set
        if (keyResultId == null) {
            throw new ApiException("Missing the required parameter 'keyResultId' when calling updateKeyResult(Async)");
        }

        // verify the required parameter 'editKeyResultrequest' is set
        if (editKeyResultrequest == null) {
            throw new ApiException("Missing the required parameter 'editKeyResultrequest' when calling updateKeyResult(Async)");
        }

        return updateKeyResultCall(keyResultId, editKeyResultrequest, _callback);

    }


    private ApiResponse<EditKeyResultresponse> updateKeyResultWithHttpInfo(String keyResultId, EditKeyResultrequest editKeyResultrequest) throws ApiException {
        okhttp3.Call localVarCall = updateKeyResultValidateBeforeCall(keyResultId, editKeyResultrequest, null);
        Type localVarReturnType = new TypeToken<EditKeyResultresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateKeyResultAsync(String keyResultId, EditKeyResultrequest editKeyResultrequest, final ApiCallback<EditKeyResultresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKeyResultValidateBeforeCall(keyResultId, editKeyResultrequest, _callback);
        Type localVarReturnType = new TypeToken<EditKeyResultresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateKeyResultRequestBuilder {
        private final Integer stepsCurrent;
        private final String note;
        private final String keyResultId;

        private UpdateKeyResultRequestBuilder(Integer stepsCurrent, String note, String keyResultId) {
            this.stepsCurrent = stepsCurrent;
            this.note = note;
            this.keyResultId = keyResultId;
        }

        /**
         * Build call for updateKeyResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditKeyResultrequest editKeyResultrequest = buildBodyParams();
            return updateKeyResultCall(keyResultId, editKeyResultrequest, _callback);
        }

        private EditKeyResultrequest buildBodyParams() {
            EditKeyResultrequest editKeyResultrequest = new EditKeyResultrequest();
            editKeyResultrequest.stepsCurrent(this.stepsCurrent);
            editKeyResultrequest.note(this.note);
            return editKeyResultrequest;
        }

        /**
         * Execute updateKeyResult request
         * @return EditKeyResultresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EditKeyResultresponse execute() throws ApiException {
            EditKeyResultrequest editKeyResultrequest = buildBodyParams();
            ApiResponse<EditKeyResultresponse> localVarResp = updateKeyResultWithHttpInfo(keyResultId, editKeyResultrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateKeyResult request with HTTP info returned
         * @return ApiResponse&lt;EditKeyResultresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditKeyResultresponse> executeWithHttpInfo() throws ApiException {
            EditKeyResultrequest editKeyResultrequest = buildBodyParams();
            return updateKeyResultWithHttpInfo(keyResultId, editKeyResultrequest);
        }

        /**
         * Execute updateKeyResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditKeyResultresponse> _callback) throws ApiException {
            EditKeyResultrequest editKeyResultrequest = buildBodyParams();
            return updateKeyResultAsync(keyResultId, editKeyResultrequest, _callback);
        }
    }

    /**
     * Edit Key Result
     * Update a Target.
     * @param keyResultId 8480-49bc-8c57-e569747efe93 (uuid) (required)
     * @param editKeyResultrequest All properties available in the Create Key Result endpoint may also be used along with the additional properties below. (required)
     * @return UpdateKeyResultRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateKeyResultRequestBuilder updateKeyResult(Integer stepsCurrent, String note, String keyResultId) throws IllegalArgumentException {
        if (stepsCurrent == null) throw new IllegalArgumentException("\"stepsCurrent\" is required but got null");
        if (note == null) throw new IllegalArgumentException("\"note\" is required but got null");
            

        if (keyResultId == null) throw new IllegalArgumentException("\"keyResultId\" is required but got null");
            

        return new UpdateKeyResultRequestBuilder(stepsCurrent, note, keyResultId);
    }
}
