/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateChatViewCommentrequest;
import com.konfigthis.client.model.CreateChatViewCommentresponse;
import com.konfigthis.client.model.CreateListCommentrequest;
import com.konfigthis.client.model.CreateListCommentresponse;
import com.konfigthis.client.model.CreateTaskCommentrequest;
import com.konfigthis.client.model.CreateTaskCommentresponse;
import com.konfigthis.client.model.GetChatViewCommentsresponse;
import com.konfigthis.client.model.GetListCommentsresponse;
import com.konfigthis.client.model.GetTaskCommentsresponse;
import com.konfigthis.client.model.UpdateCommentrequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CommentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToListCommentCall(Double listId, CreateListCommentrequest createListCommentrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createListCommentrequest;

        // create path and map variables
        String localVarPath = "/list/{list_id}/comment"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToListCommentValidateBeforeCall(Double listId, CreateListCommentrequest createListCommentrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling addToListComment(Async)");
        }

        // verify the required parameter 'createListCommentrequest' is set
        if (createListCommentrequest == null) {
            throw new ApiException("Missing the required parameter 'createListCommentrequest' when calling addToListComment(Async)");
        }

        return addToListCommentCall(listId, createListCommentrequest, _callback);

    }


    private ApiResponse<CreateListCommentresponse> addToListCommentWithHttpInfo(Double listId, CreateListCommentrequest createListCommentrequest) throws ApiException {
        okhttp3.Call localVarCall = addToListCommentValidateBeforeCall(listId, createListCommentrequest, null);
        Type localVarReturnType = new TypeToken<CreateListCommentresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToListCommentAsync(Double listId, CreateListCommentrequest createListCommentrequest, final ApiCallback<CreateListCommentresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToListCommentValidateBeforeCall(listId, createListCommentrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateListCommentresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToListCommentRequestBuilder {
        private final String commentText;
        private final Integer assignee;
        private final Boolean notifyAll;
        private final Double listId;

        private AddToListCommentRequestBuilder(String commentText, Integer assignee, Boolean notifyAll, double listId) {
            this.commentText = commentText;
            this.assignee = assignee;
            this.notifyAll = notifyAll;
            this.listId = listId;
        }

        /**
         * Build call for addToListComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateListCommentrequest createListCommentrequest = buildBodyParams();
            return addToListCommentCall(listId, createListCommentrequest, _callback);
        }

        private CreateListCommentrequest buildBodyParams() {
            CreateListCommentrequest createListCommentrequest = new CreateListCommentrequest();
            createListCommentrequest.commentText(this.commentText);
            createListCommentrequest.assignee(this.assignee);
            createListCommentrequest.notifyAll(this.notifyAll);
            return createListCommentrequest;
        }

        /**
         * Execute addToListComment request
         * @return CreateListCommentresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateListCommentresponse execute() throws ApiException {
            CreateListCommentrequest createListCommentrequest = buildBodyParams();
            ApiResponse<CreateListCommentresponse> localVarResp = addToListCommentWithHttpInfo(listId, createListCommentrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToListComment request with HTTP info returned
         * @return ApiResponse&lt;CreateListCommentresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateListCommentresponse> executeWithHttpInfo() throws ApiException {
            CreateListCommentrequest createListCommentrequest = buildBodyParams();
            return addToListCommentWithHttpInfo(listId, createListCommentrequest);
        }

        /**
         * Execute addToListComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateListCommentresponse> _callback) throws ApiException {
            CreateListCommentrequest createListCommentrequest = buildBodyParams();
            return addToListCommentAsync(listId, createListCommentrequest, _callback);
        }
    }

    /**
     * Create List Comment
     * Add a comment to a List.
     * @param listId  (required)
     * @param createListCommentrequest  (required)
     * @return AddToListCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddToListCommentRequestBuilder addToListComment(String commentText, Integer assignee, Boolean notifyAll, double listId) throws IllegalArgumentException {
        if (commentText == null) throw new IllegalArgumentException("\"commentText\" is required but got null");
            

        if (assignee == null) throw new IllegalArgumentException("\"assignee\" is required but got null");
        if (notifyAll == null) throw new IllegalArgumentException("\"notifyAll\" is required but got null");
        
        return new AddToListCommentRequestBuilder(commentText, assignee, notifyAll, listId);
    }
    private okhttp3.Call createChatViewCommentCall(String viewId, CreateChatViewCommentrequest createChatViewCommentrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChatViewCommentrequest;

        // create path and map variables
        String localVarPath = "/view/{view_id}/comment"
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChatViewCommentValidateBeforeCall(String viewId, CreateChatViewCommentrequest createChatViewCommentrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling createChatViewComment(Async)");
        }

        // verify the required parameter 'createChatViewCommentrequest' is set
        if (createChatViewCommentrequest == null) {
            throw new ApiException("Missing the required parameter 'createChatViewCommentrequest' when calling createChatViewComment(Async)");
        }

        return createChatViewCommentCall(viewId, createChatViewCommentrequest, _callback);

    }


    private ApiResponse<CreateChatViewCommentresponse> createChatViewCommentWithHttpInfo(String viewId, CreateChatViewCommentrequest createChatViewCommentrequest) throws ApiException {
        okhttp3.Call localVarCall = createChatViewCommentValidateBeforeCall(viewId, createChatViewCommentrequest, null);
        Type localVarReturnType = new TypeToken<CreateChatViewCommentresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChatViewCommentAsync(String viewId, CreateChatViewCommentrequest createChatViewCommentrequest, final ApiCallback<CreateChatViewCommentresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChatViewCommentValidateBeforeCall(viewId, createChatViewCommentrequest, _callback);
        Type localVarReturnType = new TypeToken<CreateChatViewCommentresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChatViewCommentRequestBuilder {
        private final String commentText;
        private final Boolean notifyAll;
        private final String viewId;

        private CreateChatViewCommentRequestBuilder(String commentText, Boolean notifyAll, String viewId) {
            this.commentText = commentText;
            this.notifyAll = notifyAll;
            this.viewId = viewId;
        }

        /**
         * Build call for createChatViewComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChatViewCommentrequest createChatViewCommentrequest = buildBodyParams();
            return createChatViewCommentCall(viewId, createChatViewCommentrequest, _callback);
        }

        private CreateChatViewCommentrequest buildBodyParams() {
            CreateChatViewCommentrequest createChatViewCommentrequest = new CreateChatViewCommentrequest();
            createChatViewCommentrequest.commentText(this.commentText);
            createChatViewCommentrequest.notifyAll(this.notifyAll);
            return createChatViewCommentrequest;
        }

        /**
         * Execute createChatViewComment request
         * @return CreateChatViewCommentresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateChatViewCommentresponse execute() throws ApiException {
            CreateChatViewCommentrequest createChatViewCommentrequest = buildBodyParams();
            ApiResponse<CreateChatViewCommentresponse> localVarResp = createChatViewCommentWithHttpInfo(viewId, createChatViewCommentrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChatViewComment request with HTTP info returned
         * @return ApiResponse&lt;CreateChatViewCommentresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateChatViewCommentresponse> executeWithHttpInfo() throws ApiException {
            CreateChatViewCommentrequest createChatViewCommentrequest = buildBodyParams();
            return createChatViewCommentWithHttpInfo(viewId, createChatViewCommentrequest);
        }

        /**
         * Execute createChatViewComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateChatViewCommentresponse> _callback) throws ApiException {
            CreateChatViewCommentrequest createChatViewCommentrequest = buildBodyParams();
            return createChatViewCommentAsync(viewId, createChatViewCommentrequest, _callback);
        }
    }

    /**
     * Create Chat View Comment
     * Add a new comment to a Chat view.
     * @param viewId 105 (string) (required)
     * @param createChatViewCommentrequest  (required)
     * @return CreateChatViewCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateChatViewCommentRequestBuilder createChatViewComment(String commentText, Boolean notifyAll, String viewId) throws IllegalArgumentException {
        if (commentText == null) throw new IllegalArgumentException("\"commentText\" is required but got null");
            

        if (notifyAll == null) throw new IllegalArgumentException("\"notifyAll\" is required but got null");
        if (viewId == null) throw new IllegalArgumentException("\"viewId\" is required but got null");
            

        return new CreateChatViewCommentRequestBuilder(commentText, notifyAll, viewId);
    }
    private okhttp3.Call createNewTaskCommentCall(String taskId, CreateTaskCommentrequest createTaskCommentrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskCommentrequest;

        // create path and map variables
        String localVarPath = "/task/{task_id}/comment"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTaskCommentValidateBeforeCall(String taskId, CreateTaskCommentrequest createTaskCommentrequest, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling createNewTaskComment(Async)");
        }

        // verify the required parameter 'createTaskCommentrequest' is set
        if (createTaskCommentrequest == null) {
            throw new ApiException("Missing the required parameter 'createTaskCommentrequest' when calling createNewTaskComment(Async)");
        }

        return createNewTaskCommentCall(taskId, createTaskCommentrequest, customTaskIds, teamId, _callback);

    }


    private ApiResponse<CreateTaskCommentresponse> createNewTaskCommentWithHttpInfo(String taskId, CreateTaskCommentrequest createTaskCommentrequest, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = createNewTaskCommentValidateBeforeCall(taskId, createTaskCommentrequest, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<CreateTaskCommentresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTaskCommentAsync(String taskId, CreateTaskCommentrequest createTaskCommentrequest, Boolean customTaskIds, Double teamId, final ApiCallback<CreateTaskCommentresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTaskCommentValidateBeforeCall(taskId, createTaskCommentrequest, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<CreateTaskCommentresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTaskCommentRequestBuilder {
        private final String commentText;
        private final Integer assignee;
        private final Boolean notifyAll;
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;

        private CreateNewTaskCommentRequestBuilder(String commentText, Integer assignee, Boolean notifyAll, String taskId) {
            this.commentText = commentText;
            this.assignee = assignee;
            this.notifyAll = notifyAll;
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return CreateNewTaskCommentRequestBuilder
         */
        public CreateNewTaskCommentRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return CreateNewTaskCommentRequestBuilder
         */
        public CreateNewTaskCommentRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for createNewTaskComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTaskCommentrequest createTaskCommentrequest = buildBodyParams();
            return createNewTaskCommentCall(taskId, createTaskCommentrequest, customTaskIds, teamId, _callback);
        }

        private CreateTaskCommentrequest buildBodyParams() {
            CreateTaskCommentrequest createTaskCommentrequest = new CreateTaskCommentrequest();
            createTaskCommentrequest.commentText(this.commentText);
            createTaskCommentrequest.assignee(this.assignee);
            createTaskCommentrequest.notifyAll(this.notifyAll);
            return createTaskCommentrequest;
        }

        /**
         * Execute createNewTaskComment request
         * @return CreateTaskCommentresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateTaskCommentresponse execute() throws ApiException {
            CreateTaskCommentrequest createTaskCommentrequest = buildBodyParams();
            ApiResponse<CreateTaskCommentresponse> localVarResp = createNewTaskCommentWithHttpInfo(taskId, createTaskCommentrequest, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTaskComment request with HTTP info returned
         * @return ApiResponse&lt;CreateTaskCommentresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateTaskCommentresponse> executeWithHttpInfo() throws ApiException {
            CreateTaskCommentrequest createTaskCommentrequest = buildBodyParams();
            return createNewTaskCommentWithHttpInfo(taskId, createTaskCommentrequest, customTaskIds, teamId);
        }

        /**
         * Execute createNewTaskComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateTaskCommentresponse> _callback) throws ApiException {
            CreateTaskCommentrequest createTaskCommentrequest = buildBodyParams();
            return createNewTaskCommentAsync(taskId, createTaskCommentrequest, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Create Task Comment
     * Add a new comment to a task.
     * @param taskId  (required)
     * @param createTaskCommentrequest  (required)
     * @return CreateNewTaskCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTaskCommentRequestBuilder createNewTaskComment(String commentText, Integer assignee, Boolean notifyAll, String taskId) throws IllegalArgumentException {
        if (commentText == null) throw new IllegalArgumentException("\"commentText\" is required but got null");
            

        if (assignee == null) throw new IllegalArgumentException("\"assignee\" is required but got null");
        if (notifyAll == null) throw new IllegalArgumentException("\"notifyAll\" is required but got null");
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new CreateNewTaskCommentRequestBuilder(commentText, assignee, notifyAll, taskId);
    }
    private okhttp3.Call deleteTaskCommentCall(Double commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comment/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTaskCommentValidateBeforeCall(Double commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling deleteTaskComment(Async)");
        }

        return deleteTaskCommentCall(commentId, _callback);

    }


    private ApiResponse<Object> deleteTaskCommentWithHttpInfo(Double commentId) throws ApiException {
        okhttp3.Call localVarCall = deleteTaskCommentValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteTaskCommentAsync(Double commentId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTaskCommentValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteTaskCommentRequestBuilder {
        private final Double commentId;

        private DeleteTaskCommentRequestBuilder(double commentId) {
            this.commentId = commentId;
        }

        /**
         * Build call for deleteTaskComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTaskCommentCall(commentId, _callback);
        }


        /**
         * Execute deleteTaskComment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteTaskCommentWithHttpInfo(commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteTaskComment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteTaskCommentWithHttpInfo(commentId);
        }

        /**
         * Execute deleteTaskComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteTaskCommentAsync(commentId, _callback);
        }
    }

    /**
     * Delete Comment
     * Delete a task comment.
     * @param commentId  (required)
     * @return DeleteTaskCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTaskCommentRequestBuilder deleteTaskComment(double commentId) throws IllegalArgumentException {
        
        return new DeleteTaskCommentRequestBuilder(commentId);
    }
    private okhttp3.Call getListCommentsCall(Double listId, Integer start, String startId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list/{list_id}/comment"
            .replace("{" + "list_id" + "}", localVarApiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (startId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_id", startId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListCommentsValidateBeforeCall(Double listId, Integer start, String startId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListComments(Async)");
        }

        return getListCommentsCall(listId, start, startId, _callback);

    }


    private ApiResponse<GetListCommentsresponse> getListCommentsWithHttpInfo(Double listId, Integer start, String startId) throws ApiException {
        okhttp3.Call localVarCall = getListCommentsValidateBeforeCall(listId, start, startId, null);
        Type localVarReturnType = new TypeToken<GetListCommentsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListCommentsAsync(Double listId, Integer start, String startId, final ApiCallback<GetListCommentsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListCommentsValidateBeforeCall(listId, start, startId, _callback);
        Type localVarReturnType = new TypeToken<GetListCommentsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListCommentsRequestBuilder {
        private final Double listId;
        private Integer start;
        private String startId;

        private GetListCommentsRequestBuilder(double listId) {
            this.listId = listId;
        }

        /**
         * Set start
         * @param start Enter the &#x60;date&#x60; of a List info comment using Unix time in milliseconds. (optional)
         * @return GetListCommentsRequestBuilder
         */
        public GetListCommentsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set startId
         * @param startId Enter the Comment &#x60;id&#x60; of a List info comment. (optional)
         * @return GetListCommentsRequestBuilder
         */
        public GetListCommentsRequestBuilder startId(String startId) {
            this.startId = startId;
            return this;
        }
        
        /**
         * Build call for getListComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCommentsCall(listId, start, startId, _callback);
        }


        /**
         * Execute getListComments request
         * @return GetListCommentsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetListCommentsresponse execute() throws ApiException {
            ApiResponse<GetListCommentsresponse> localVarResp = getListCommentsWithHttpInfo(listId, start, startId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListComments request with HTTP info returned
         * @return ApiResponse&lt;GetListCommentsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetListCommentsresponse> executeWithHttpInfo() throws ApiException {
            return getListCommentsWithHttpInfo(listId, start, startId);
        }

        /**
         * Execute getListComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetListCommentsresponse> _callback) throws ApiException {
            return getListCommentsAsync(listId, start, startId, _callback);
        }
    }

    /**
     * Get List Comments
     * View the comments added to a List. \\  \\ If you do not include the &#x60;start&#x60; and &#x60;start_id&#x60; parameters, this endpoint will return the most recent 25 comments.\\  \\ Use the &#x60;start&#x60; and &#x60;start id&#x60; parameters of the oldest comment to retrieve the next 25 comments.
     * @param listId  (required)
     * @return GetListCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListCommentsRequestBuilder getListComments(double listId) throws IllegalArgumentException {
        
        return new GetListCommentsRequestBuilder(listId);
    }
    private okhttp3.Call getTaskCommentsCall(String taskId, Boolean customTaskIds, Double teamId, Integer start, String startId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/comment"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (startId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_id", startId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskCommentsValidateBeforeCall(String taskId, Boolean customTaskIds, Double teamId, Integer start, String startId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskComments(Async)");
        }

        return getTaskCommentsCall(taskId, customTaskIds, teamId, start, startId, _callback);

    }


    private ApiResponse<GetTaskCommentsresponse> getTaskCommentsWithHttpInfo(String taskId, Boolean customTaskIds, Double teamId, Integer start, String startId) throws ApiException {
        okhttp3.Call localVarCall = getTaskCommentsValidateBeforeCall(taskId, customTaskIds, teamId, start, startId, null);
        Type localVarReturnType = new TypeToken<GetTaskCommentsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaskCommentsAsync(String taskId, Boolean customTaskIds, Double teamId, Integer start, String startId, final ApiCallback<GetTaskCommentsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskCommentsValidateBeforeCall(taskId, customTaskIds, teamId, start, startId, _callback);
        Type localVarReturnType = new TypeToken<GetTaskCommentsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaskCommentsRequestBuilder {
        private final String taskId;
        private Boolean customTaskIds;
        private Double teamId;
        private Integer start;
        private String startId;

        private GetTaskCommentsRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return GetTaskCommentsRequestBuilder
         */
        public GetTaskCommentsRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return GetTaskCommentsRequestBuilder
         */
        public GetTaskCommentsRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set start
         * @param start Enter the &#x60;date&#x60; of a task comment using Unix time in milliseconds. (optional)
         * @return GetTaskCommentsRequestBuilder
         */
        public GetTaskCommentsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set startId
         * @param startId Enter the Comment &#x60;id&#x60; of a task comment. (optional)
         * @return GetTaskCommentsRequestBuilder
         */
        public GetTaskCommentsRequestBuilder startId(String startId) {
            this.startId = startId;
            return this;
        }
        
        /**
         * Build call for getTaskComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaskCommentsCall(taskId, customTaskIds, teamId, start, startId, _callback);
        }


        /**
         * Execute getTaskComments request
         * @return GetTaskCommentsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetTaskCommentsresponse execute() throws ApiException {
            ApiResponse<GetTaskCommentsresponse> localVarResp = getTaskCommentsWithHttpInfo(taskId, customTaskIds, teamId, start, startId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaskComments request with HTTP info returned
         * @return ApiResponse&lt;GetTaskCommentsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetTaskCommentsresponse> executeWithHttpInfo() throws ApiException {
            return getTaskCommentsWithHttpInfo(taskId, customTaskIds, teamId, start, startId);
        }

        /**
         * Execute getTaskComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetTaskCommentsresponse> _callback) throws ApiException {
            return getTaskCommentsAsync(taskId, customTaskIds, teamId, start, startId, _callback);
        }
    }

    /**
     * Get Task Comments
     * View task comments. \\  \\ If you do not include the &#x60;start&#x60; and &#x60;start_id&#x60; parameters, this endpoint will return the most recent 25 comments.\\  \\ Use the &#x60;start&#x60; and &#x60;start id&#x60; parameters of the oldest comment to retrieve the next 25 comments.
     * @param taskId  (required)
     * @return GetTaskCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTaskCommentsRequestBuilder getTaskComments(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new GetTaskCommentsRequestBuilder(taskId);
    }
    private okhttp3.Call getViewCommentsCall(String viewId, Integer start, String startId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/view/{view_id}/comment"
            .replace("{" + "view_id" + "}", localVarApiClient.escapeString(viewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (startId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_id", startId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewCommentsValidateBeforeCall(String viewId, Integer start, String startId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'viewId' is set
        if (viewId == null) {
            throw new ApiException("Missing the required parameter 'viewId' when calling getViewComments(Async)");
        }

        return getViewCommentsCall(viewId, start, startId, _callback);

    }


    private ApiResponse<GetChatViewCommentsresponse> getViewCommentsWithHttpInfo(String viewId, Integer start, String startId) throws ApiException {
        okhttp3.Call localVarCall = getViewCommentsValidateBeforeCall(viewId, start, startId, null);
        Type localVarReturnType = new TypeToken<GetChatViewCommentsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getViewCommentsAsync(String viewId, Integer start, String startId, final ApiCallback<GetChatViewCommentsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewCommentsValidateBeforeCall(viewId, start, startId, _callback);
        Type localVarReturnType = new TypeToken<GetChatViewCommentsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetViewCommentsRequestBuilder {
        private final String viewId;
        private Integer start;
        private String startId;

        private GetViewCommentsRequestBuilder(String viewId) {
            this.viewId = viewId;
        }

        /**
         * Set start
         * @param start Enter the &#x60;date&#x60; of a Chat view comment using Unix time in milliseconds. (optional)
         * @return GetViewCommentsRequestBuilder
         */
        public GetViewCommentsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set startId
         * @param startId Enter the Comment &#x60;id&#x60; of a Chat view comment. (optional)
         * @return GetViewCommentsRequestBuilder
         */
        public GetViewCommentsRequestBuilder startId(String startId) {
            this.startId = startId;
            return this;
        }
        
        /**
         * Build call for getViewComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getViewCommentsCall(viewId, start, startId, _callback);
        }


        /**
         * Execute getViewComments request
         * @return GetChatViewCommentsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetChatViewCommentsresponse execute() throws ApiException {
            ApiResponse<GetChatViewCommentsresponse> localVarResp = getViewCommentsWithHttpInfo(viewId, start, startId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getViewComments request with HTTP info returned
         * @return ApiResponse&lt;GetChatViewCommentsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetChatViewCommentsresponse> executeWithHttpInfo() throws ApiException {
            return getViewCommentsWithHttpInfo(viewId, start, startId);
        }

        /**
         * Execute getViewComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetChatViewCommentsresponse> _callback) throws ApiException {
            return getViewCommentsAsync(viewId, start, startId, _callback);
        }
    }

    /**
     * Get Chat View Comments
     * View comments from a Chat view. \\  \\ If you do not include the &#x60;start&#x60; and &#x60;start_id&#x60; parameters, this endpoint will return the most recent 25 comments.\\  \\ Use the &#x60;start&#x60; and &#x60;start id&#x60; parameters of the oldest comment to retrieve the next 25 comments.
     * @param viewId 105 (string) (required)
     * @return GetViewCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetViewCommentsRequestBuilder getViewComments(String viewId) throws IllegalArgumentException {
        if (viewId == null) throw new IllegalArgumentException("\"viewId\" is required but got null");
            

        return new GetViewCommentsRequestBuilder(viewId);
    }
    private okhttp3.Call updateTaskCommentCall(Double commentId, UpdateCommentrequest updateCommentrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCommentrequest;

        // create path and map variables
        String localVarPath = "/comment/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTaskCommentValidateBeforeCall(Double commentId, UpdateCommentrequest updateCommentrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateTaskComment(Async)");
        }

        // verify the required parameter 'updateCommentrequest' is set
        if (updateCommentrequest == null) {
            throw new ApiException("Missing the required parameter 'updateCommentrequest' when calling updateTaskComment(Async)");
        }

        return updateTaskCommentCall(commentId, updateCommentrequest, _callback);

    }


    private ApiResponse<Object> updateTaskCommentWithHttpInfo(Double commentId, UpdateCommentrequest updateCommentrequest) throws ApiException {
        okhttp3.Call localVarCall = updateTaskCommentValidateBeforeCall(commentId, updateCommentrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTaskCommentAsync(Double commentId, UpdateCommentrequest updateCommentrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTaskCommentValidateBeforeCall(commentId, updateCommentrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTaskCommentRequestBuilder {
        private final String commentText;
        private final Integer assignee;
        private final Boolean resolved;
        private final Double commentId;

        private UpdateTaskCommentRequestBuilder(String commentText, Integer assignee, Boolean resolved, double commentId) {
            this.commentText = commentText;
            this.assignee = assignee;
            this.resolved = resolved;
            this.commentId = commentId;
        }

        /**
         * Build call for updateTaskComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCommentrequest updateCommentrequest = buildBodyParams();
            return updateTaskCommentCall(commentId, updateCommentrequest, _callback);
        }

        private UpdateCommentrequest buildBodyParams() {
            UpdateCommentrequest updateCommentrequest = new UpdateCommentrequest();
            updateCommentrequest.commentText(this.commentText);
            updateCommentrequest.assignee(this.assignee);
            updateCommentrequest.resolved(this.resolved);
            return updateCommentrequest;
        }

        /**
         * Execute updateTaskComment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateCommentrequest updateCommentrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateTaskCommentWithHttpInfo(commentId, updateCommentrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTaskComment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateCommentrequest updateCommentrequest = buildBodyParams();
            return updateTaskCommentWithHttpInfo(commentId, updateCommentrequest);
        }

        /**
         * Execute updateTaskComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateCommentrequest updateCommentrequest = buildBodyParams();
            return updateTaskCommentAsync(commentId, updateCommentrequest, _callback);
        }
    }

    /**
     * Update Comment
     * Replace the content of a task commment, assign a comment, and mark a comment as resolved.
     * @param commentId  (required)
     * @param updateCommentrequest  (required)
     * @return UpdateTaskCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTaskCommentRequestBuilder updateTaskComment(String commentText, Integer assignee, Boolean resolved, double commentId) throws IllegalArgumentException {
        if (commentText == null) throw new IllegalArgumentException("\"commentText\" is required but got null");
            

        if (assignee == null) throw new IllegalArgumentException("\"assignee\" is required but got null");
        if (resolved == null) throw new IllegalArgumentException("\"resolved\" is required but got null");
        
        return new UpdateTaskCommentRequestBuilder(commentText, assignee, resolved, commentId);
    }
}
