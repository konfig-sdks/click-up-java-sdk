/*
 * ClickUp API Reference
 * This is the ClickUp API Reference where you can learn about specific endpoints and parameters in detail.  Browse the available endpoints using the sidebar on the left.  **Not sure where to begin?** [Get Started with the ClickUp API](https://clickup.com/api) 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateSpaceTagrequest;
import com.konfigthis.client.model.DeleteSpaceTagrequest;
import com.konfigthis.client.model.EditSpaceTagrequest;
import com.konfigthis.client.model.EditSpaceTagresponse;
import com.konfigthis.client.model.GetSpaceTagsresponse;
import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.Tag1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TagsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getAuthorizationToken() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setAuthorizationToken(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToTaskCall(String taskId, String tagName, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/tag/{tag_name}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToTaskValidateBeforeCall(String taskId, String tagName, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addToTask(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling addToTask(Async)");
        }

        return addToTaskCall(taskId, tagName, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> addToTaskWithHttpInfo(String taskId, String tagName, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = addToTaskValidateBeforeCall(taskId, tagName, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToTaskAsync(String taskId, String tagName, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToTaskValidateBeforeCall(taskId, tagName, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToTaskRequestBuilder {
        private final String taskId;
        private final String tagName;
        private Boolean customTaskIds;
        private Double teamId;

        private AddToTaskRequestBuilder(String taskId, String tagName) {
            this.taskId = taskId;
            this.tagName = tagName;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return AddToTaskRequestBuilder
         */
        public AddToTaskRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return AddToTaskRequestBuilder
         */
        public AddToTaskRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addToTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addToTaskCall(taskId, tagName, customTaskIds, teamId, _callback);
        }


        /**
         * Execute addToTask request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = addToTaskWithHttpInfo(taskId, tagName, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToTask request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return addToTaskWithHttpInfo(taskId, tagName, customTaskIds, teamId);
        }

        /**
         * Execute addToTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return addToTaskAsync(taskId, tagName, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Add Tag To Task
     * Add a Tag to a task.
     * @param taskId  (required)
     * @param tagName  (required)
     * @return AddToTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddToTaskRequestBuilder addToTask(String taskId, String tagName) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (tagName == null) throw new IllegalArgumentException("\"tagName\" is required but got null");
            

        return new AddToTaskRequestBuilder(taskId, tagName);
    }
    private okhttp3.Call createSpaceTagCall(Double spaceId, CreateSpaceTagrequest createSpaceTagrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSpaceTagrequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}/tag"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSpaceTagValidateBeforeCall(Double spaceId, CreateSpaceTagrequest createSpaceTagrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createSpaceTag(Async)");
        }

        // verify the required parameter 'createSpaceTagrequest' is set
        if (createSpaceTagrequest == null) {
            throw new ApiException("Missing the required parameter 'createSpaceTagrequest' when calling createSpaceTag(Async)");
        }

        return createSpaceTagCall(spaceId, createSpaceTagrequest, _callback);

    }


    private ApiResponse<Object> createSpaceTagWithHttpInfo(Double spaceId, CreateSpaceTagrequest createSpaceTagrequest) throws ApiException {
        okhttp3.Call localVarCall = createSpaceTagValidateBeforeCall(spaceId, createSpaceTagrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSpaceTagAsync(Double spaceId, CreateSpaceTagrequest createSpaceTagrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSpaceTagValidateBeforeCall(spaceId, createSpaceTagrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSpaceTagRequestBuilder {
        private final Tag tag;
        private final Double spaceId;

        private CreateSpaceTagRequestBuilder(Tag tag, double spaceId) {
            this.tag = tag;
            this.spaceId = spaceId;
        }

        /**
         * Build call for createSpaceTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSpaceTagrequest createSpaceTagrequest = buildBodyParams();
            return createSpaceTagCall(spaceId, createSpaceTagrequest, _callback);
        }

        private CreateSpaceTagrequest buildBodyParams() {
            CreateSpaceTagrequest createSpaceTagrequest = new CreateSpaceTagrequest();
            createSpaceTagrequest.tag(this.tag);
            return createSpaceTagrequest;
        }

        /**
         * Execute createSpaceTag request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateSpaceTagrequest createSpaceTagrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createSpaceTagWithHttpInfo(spaceId, createSpaceTagrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSpaceTag request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateSpaceTagrequest createSpaceTagrequest = buildBodyParams();
            return createSpaceTagWithHttpInfo(spaceId, createSpaceTagrequest);
        }

        /**
         * Execute createSpaceTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateSpaceTagrequest createSpaceTagrequest = buildBodyParams();
            return createSpaceTagAsync(spaceId, createSpaceTagrequest, _callback);
        }
    }

    /**
     * Create Space Tag
     * Add a new task Tag to a Space.
     * @param spaceId  (required)
     * @param createSpaceTagrequest  (required)
     * @return CreateSpaceTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateSpaceTagRequestBuilder createSpaceTag(Tag tag, double spaceId) throws IllegalArgumentException {
        if (tag == null) throw new IllegalArgumentException("\"tag\" is required but got null");
        
        return new CreateSpaceTagRequestBuilder(tag, spaceId);
    }
    private okhttp3.Call getSpaceCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/space/{space_id}/tag"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceValidateBeforeCall(Double spaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getSpace(Async)");
        }

        return getSpaceCall(spaceId, _callback);

    }


    private ApiResponse<GetSpaceTagsresponse> getSpaceWithHttpInfo(Double spaceId) throws ApiException {
        okhttp3.Call localVarCall = getSpaceValidateBeforeCall(spaceId, null);
        Type localVarReturnType = new TypeToken<GetSpaceTagsresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpaceAsync(Double spaceId, final ApiCallback<GetSpaceTagsresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceValidateBeforeCall(spaceId, _callback);
        Type localVarReturnType = new TypeToken<GetSpaceTagsresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpaceRequestBuilder {
        private final Double spaceId;

        private GetSpaceRequestBuilder(double spaceId) {
            this.spaceId = spaceId;
        }

        /**
         * Build call for getSpace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpaceCall(spaceId, _callback);
        }


        /**
         * Execute getSpace request
         * @return GetSpaceTagsresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GetSpaceTagsresponse execute() throws ApiException {
            ApiResponse<GetSpaceTagsresponse> localVarResp = getSpaceWithHttpInfo(spaceId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpace request with HTTP info returned
         * @return ApiResponse&lt;GetSpaceTagsresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetSpaceTagsresponse> executeWithHttpInfo() throws ApiException {
            return getSpaceWithHttpInfo(spaceId);
        }

        /**
         * Execute getSpace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetSpaceTagsresponse> _callback) throws ApiException {
            return getSpaceAsync(spaceId, _callback);
        }
    }

    /**
     * Get Space Tags
     * View the task Tags available in a Space.
     * @param spaceId  (required)
     * @return GetSpaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSpaceRequestBuilder getSpace(double spaceId) throws IllegalArgumentException {
        
        return new GetSpaceRequestBuilder(spaceId);
    }
    private okhttp3.Call removeFromTaskCall(String taskId, String tagName, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/task/{task_id}/tag/{tag_name}"
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customTaskIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_task_ids", customTaskIds));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromTaskValidateBeforeCall(String taskId, String tagName, Boolean customTaskIds, Double teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeFromTask(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling removeFromTask(Async)");
        }

        return removeFromTaskCall(taskId, tagName, customTaskIds, teamId, _callback);

    }


    private ApiResponse<Object> removeFromTaskWithHttpInfo(String taskId, String tagName, Boolean customTaskIds, Double teamId) throws ApiException {
        okhttp3.Call localVarCall = removeFromTaskValidateBeforeCall(taskId, tagName, customTaskIds, teamId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromTaskAsync(String taskId, String tagName, Boolean customTaskIds, Double teamId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromTaskValidateBeforeCall(taskId, tagName, customTaskIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFromTaskRequestBuilder {
        private final String taskId;
        private final String tagName;
        private Boolean customTaskIds;
        private Double teamId;

        private RemoveFromTaskRequestBuilder(String taskId, String tagName) {
            this.taskId = taskId;
            this.tagName = tagName;
        }

        /**
         * Set customTaskIds
         * @param customTaskIds If you want to reference a task by it&#39;s custom task id, this value must be &#x60;true&#x60;. (optional)
         * @return RemoveFromTaskRequestBuilder
         */
        public RemoveFromTaskRequestBuilder customTaskIds(Boolean customTaskIds) {
            this.customTaskIds = customTaskIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId Only used when the &#x60;custom_task_ids&#x60; parameter is set to &#x60;true&#x60;.\\  \\ For example: &#x60;custom_task_ids&#x3D;true&amp;team_id&#x3D;123&#x60;. (optional)
         * @return RemoveFromTaskRequestBuilder
         */
        public RemoveFromTaskRequestBuilder teamId(Double teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for removeFromTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromTaskCall(taskId, tagName, customTaskIds, teamId, _callback);
        }


        /**
         * Execute removeFromTask request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeFromTaskWithHttpInfo(taskId, tagName, customTaskIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFromTask request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeFromTaskWithHttpInfo(taskId, tagName, customTaskIds, teamId);
        }

        /**
         * Execute removeFromTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeFromTaskAsync(taskId, tagName, customTaskIds, teamId, _callback);
        }
    }

    /**
     * Remove Tag From Task
     * Remove a Tag from a task. This does not delete the Tag from the Space.
     * @param taskId  (required)
     * @param tagName  (required)
     * @return RemoveFromTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromTaskRequestBuilder removeFromTask(String taskId, String tagName) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        if (tagName == null) throw new IllegalArgumentException("\"tagName\" is required but got null");
            

        return new RemoveFromTaskRequestBuilder(taskId, tagName);
    }
    private okhttp3.Call removeSpaceTagCall(Double spaceId, String tagName, DeleteSpaceTagrequest deleteSpaceTagrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSpaceTagrequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}/tag/{tag_name}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSpaceTagValidateBeforeCall(Double spaceId, String tagName, DeleteSpaceTagrequest deleteSpaceTagrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling removeSpaceTag(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling removeSpaceTag(Async)");
        }

        // verify the required parameter 'deleteSpaceTagrequest' is set
        if (deleteSpaceTagrequest == null) {
            throw new ApiException("Missing the required parameter 'deleteSpaceTagrequest' when calling removeSpaceTag(Async)");
        }

        return removeSpaceTagCall(spaceId, tagName, deleteSpaceTagrequest, _callback);

    }


    private ApiResponse<Object> removeSpaceTagWithHttpInfo(Double spaceId, String tagName, DeleteSpaceTagrequest deleteSpaceTagrequest) throws ApiException {
        okhttp3.Call localVarCall = removeSpaceTagValidateBeforeCall(spaceId, tagName, deleteSpaceTagrequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeSpaceTagAsync(Double spaceId, String tagName, DeleteSpaceTagrequest deleteSpaceTagrequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSpaceTagValidateBeforeCall(spaceId, tagName, deleteSpaceTagrequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveSpaceTagRequestBuilder {
        private final Tag tag;
        private final Double spaceId;
        private final String tagName;

        private RemoveSpaceTagRequestBuilder(Tag tag, double spaceId, String tagName) {
            this.tag = tag;
            this.spaceId = spaceId;
            this.tagName = tagName;
        }

        /**
         * Build call for removeSpaceTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteSpaceTagrequest deleteSpaceTagrequest = buildBodyParams();
            return removeSpaceTagCall(spaceId, tagName, deleteSpaceTagrequest, _callback);
        }

        private DeleteSpaceTagrequest buildBodyParams() {
            DeleteSpaceTagrequest deleteSpaceTagrequest = new DeleteSpaceTagrequest();
            deleteSpaceTagrequest.tag(this.tag);
            return deleteSpaceTagrequest;
        }

        /**
         * Execute removeSpaceTag request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            DeleteSpaceTagrequest deleteSpaceTagrequest = buildBodyParams();
            ApiResponse<Object> localVarResp = removeSpaceTagWithHttpInfo(spaceId, tagName, deleteSpaceTagrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeSpaceTag request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            DeleteSpaceTagrequest deleteSpaceTagrequest = buildBodyParams();
            return removeSpaceTagWithHttpInfo(spaceId, tagName, deleteSpaceTagrequest);
        }

        /**
         * Execute removeSpaceTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            DeleteSpaceTagrequest deleteSpaceTagrequest = buildBodyParams();
            return removeSpaceTagAsync(spaceId, tagName, deleteSpaceTagrequest, _callback);
        }
    }

    /**
     * Delete Space Tag
     * Delete a task Tag from a Space.
     * @param spaceId  (required)
     * @param tagName  (required)
     * @param deleteSpaceTagrequest  (required)
     * @return RemoveSpaceTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveSpaceTagRequestBuilder removeSpaceTag(Tag tag, double spaceId, String tagName) throws IllegalArgumentException {
        if (tag == null) throw new IllegalArgumentException("\"tag\" is required but got null");
        
        if (tagName == null) throw new IllegalArgumentException("\"tagName\" is required but got null");
            

        return new RemoveSpaceTagRequestBuilder(tag, spaceId, tagName);
    }
    private okhttp3.Call updateSpaceTagCall(Double spaceId, String tagName, EditSpaceTagrequest editSpaceTagrequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editSpaceTagrequest;

        // create path and map variables
        String localVarPath = "/space/{space_id}/tag/{tag_name}"
            .replace("{" + "space_id" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization Token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpaceTagValidateBeforeCall(Double spaceId, String tagName, EditSpaceTagrequest editSpaceTagrequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateSpaceTag(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling updateSpaceTag(Async)");
        }

        // verify the required parameter 'editSpaceTagrequest' is set
        if (editSpaceTagrequest == null) {
            throw new ApiException("Missing the required parameter 'editSpaceTagrequest' when calling updateSpaceTag(Async)");
        }

        return updateSpaceTagCall(spaceId, tagName, editSpaceTagrequest, _callback);

    }


    private ApiResponse<EditSpaceTagresponse> updateSpaceTagWithHttpInfo(Double spaceId, String tagName, EditSpaceTagrequest editSpaceTagrequest) throws ApiException {
        okhttp3.Call localVarCall = updateSpaceTagValidateBeforeCall(spaceId, tagName, editSpaceTagrequest, null);
        Type localVarReturnType = new TypeToken<EditSpaceTagresponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpaceTagAsync(Double spaceId, String tagName, EditSpaceTagrequest editSpaceTagrequest, final ApiCallback<EditSpaceTagresponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpaceTagValidateBeforeCall(spaceId, tagName, editSpaceTagrequest, _callback);
        Type localVarReturnType = new TypeToken<EditSpaceTagresponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpaceTagRequestBuilder {
        private final Tag1 tag;
        private final Double spaceId;
        private final String tagName;

        private UpdateSpaceTagRequestBuilder(Tag1 tag, double spaceId, String tagName) {
            this.tag = tag;
            this.spaceId = spaceId;
            this.tagName = tagName;
        }

        /**
         * Build call for updateSpaceTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditSpaceTagrequest editSpaceTagrequest = buildBodyParams();
            return updateSpaceTagCall(spaceId, tagName, editSpaceTagrequest, _callback);
        }

        private EditSpaceTagrequest buildBodyParams() {
            EditSpaceTagrequest editSpaceTagrequest = new EditSpaceTagrequest();
            editSpaceTagrequest.tag(this.tag);
            return editSpaceTagrequest;
        }

        /**
         * Execute updateSpaceTag request
         * @return EditSpaceTagresponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EditSpaceTagresponse execute() throws ApiException {
            EditSpaceTagrequest editSpaceTagrequest = buildBodyParams();
            ApiResponse<EditSpaceTagresponse> localVarResp = updateSpaceTagWithHttpInfo(spaceId, tagName, editSpaceTagrequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpaceTag request with HTTP info returned
         * @return ApiResponse&lt;EditSpaceTagresponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EditSpaceTagresponse> executeWithHttpInfo() throws ApiException {
            EditSpaceTagrequest editSpaceTagrequest = buildBodyParams();
            return updateSpaceTagWithHttpInfo(spaceId, tagName, editSpaceTagrequest);
        }

        /**
         * Execute updateSpaceTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EditSpaceTagresponse> _callback) throws ApiException {
            EditSpaceTagrequest editSpaceTagrequest = buildBodyParams();
            return updateSpaceTagAsync(spaceId, tagName, editSpaceTagrequest, _callback);
        }
    }

    /**
     * Edit Space Tag
     * Update a task Tag.
     * @param spaceId  (required)
     * @param tagName  (required)
     * @param editSpaceTagrequest  (required)
     * @return UpdateSpaceTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpaceTagRequestBuilder updateSpaceTag(Tag1 tag, double spaceId, String tagName) throws IllegalArgumentException {
        if (tag == null) throw new IllegalArgumentException("\"tag\" is required but got null");
        
        if (tagName == null) throw new IllegalArgumentException("\"tagName\" is required but got null");
            

        return new UpdateSpaceTagRequestBuilder(tag, spaceId, tagName);
    }
}
